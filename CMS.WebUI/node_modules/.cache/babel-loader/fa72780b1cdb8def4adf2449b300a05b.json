{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\LFMS\\\\LFMS.WebUI\\\\src\\\\content\\\\pages\\\\Components\\\\DirectorType\\\\DirectorTypeForm.tsx\",\n    _s = $RefreshSig$();\n\n////import { Helmet } from 'react-helmet-async';\nimport { useEffect, useState } from 'react';\nimport * as Yup from \"yup\";\nimport { post } from \"../../../../services/common.service\";\nimport { Button, Grid, TextField } from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst label = {\n  inputProps: {\n    'aria-label': 'Switch demo'\n  }\n};\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 600,\n  bgcolor: 'background.paper',\n  boxShadow: 24,\n  p: 4\n};\nexport const DirectorTypeForm = _ref => {\n  _s();\n\n  let {\n    clearForm,\n    directorTypeFormFunc,\n    directorTypeData,\n    rerenderTable\n  } = _ref;\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    reset(initialValues);\n    clearForm();\n  };\n\n  const initialValues = {\n    DirectorTypeName: \"\",\n    Remarks: \"\"\n  };\n\n  const showModal = () => {\n    setOpen(true);\n    reset(initialValues);\n  };\n\n  const resetForm = () => {\n    reset(initialValues);\n    clearForm();\n  };\n\n  useEffect(() => {\n    directorTypeFormFunc.current = handleOpen;\n    reset(directorTypeData);\n  }, []);\n  useEffect(() => {\n    reset(directorTypeData);\n    setValue(\"DirectorTypeName\", directorTypeData.DirectorTypeName);\n  }, [directorTypeData, directorTypeFormFunc]);\n  const validationSchema = Yup.object().shape({\n    directorTypeName: Yup.string().required('Director Type is required').min(2, 'Director Type must be at least 6 characters').max(200, 'Director Type must not exceed 200 characters'),\n    remarks: Yup.string().required('Remarks is required').min(2, 'Remarks must be at least 2 characters')\n  });\n  const {\n    register,\n    setValue,\n    handleSubmit,\n    reset,\n    formState: {\n      errors\n    }\n  } = useForm({\n    shouldUnregister: false\n  });\n\n  const onSubmit = data => {\n    handleFormSubmit(data);\n  };\n\n  const handleFormSubmit = formValue => {\n    const {\n      DirectorTypeName,\n      Remarks\n    } = formValue;\n    setMessage(\"gbghihiou\");\n    setLoading(true);\n    post('master/AddDirectorType', formValue).then(response => {\n      if (response.data.status == 'success') {\n        alert('successfully saved');\n        handleClose();\n        rerenderTable();\n      }\n    }, error => {\n      const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n      setLoading(false);\n      setMessage(resMessage);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      sx: {\n        margin: 1\n      },\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: showModal,\n      children: \" Add Director Type\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      noValidate: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"row\",\n        justifyContent: \"center\",\n        alignItems: \"stretch\",\n        spacing: 1,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              style: {\n                width: '100%'\n              },\n              required: true,\n              id: \"outlined-required\",\n              label: \"CompanyNumber\",\n              ...register('DirectorTypeName'),\n              className: `form-control ${errors.DirectorTypeName ? 'is-invalid' : ''}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              style: {\n                width: '100%'\n              },\n              type: \"text\",\n              required: true,\n              id: \"outlined-required\",\n              label: \"DOB\",\n              ...register('Remarks'),\n              className: `form-control ${errors.Remarks ? 'is-invalid' : ''}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        sx: {\n          margin: 1\n        },\n        variant: \"contained\",\n        color: \"primary\",\n        children: \" Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(DirectorTypeForm, \"jCkTiqlbsEFb8OnMQAthCJN0ATo=\", false, function () {\n  return [useForm];\n});\n\n_c = DirectorTypeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"DirectorTypeForm\");","map":{"version":3,"sources":["E:/Projects/LFMS/LFMS.WebUI/src/content/pages/Components/DirectorType/DirectorTypeForm.tsx"],"names":["useEffect","useState","Yup","post","Button","Grid","TextField","useForm","label","inputProps","style","position","top","left","transform","width","bgcolor","boxShadow","p","DirectorTypeForm","clearForm","directorTypeFormFunc","directorTypeData","rerenderTable","loading","setLoading","message","setMessage","open","setOpen","handleOpen","handleClose","reset","initialValues","DirectorTypeName","Remarks","showModal","resetForm","current","setValue","validationSchema","object","shape","directorTypeName","string","required","min","max","remarks","register","handleSubmit","formState","errors","shouldUnregister","onSubmit","data","handleFormSubmit","formValue","then","response","status","alert","error","resMessage","toString","margin"],"mappings":"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","sourcesContent":["////import { Helmet } from 'react-helmet-async';\r\nimport PageTitle from '../../../../components/PageTitle';\r\nimport { useEffect, useState } from 'react';\r\nimport * as Yup from \"yup\";\r\nimport { post } from \"../../../../services/common.service\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nimport PageTitleWrapper from '../../../../components/PageTitleWrapper';\r\nimport { Button, IconButton, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box, Modal, Typography } from '@mui/material';\r\nimport { useForm } from 'react-hook-form';\r\nimport { DirectorTypeModel } from '../../../../types/master.type';\r\n\r\nconst label = { inputProps: { 'aria-label': 'Switch demo' } };\r\n\r\nconst style = {\r\n    position: 'absolute' as 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 600,\r\n    bgcolor: 'background.paper',\r\n    boxShadow: 24,\r\n    p: 4,\r\n};\r\n\r\nexport const DirectorTypeForm: React.FC<any> = ({ clearForm, directorTypeFormFunc, directorTypeData, rerenderTable }) => {\r\n\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    const [open, setOpen] = useState(false);\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        reset(initialValues);\r\n        clearForm();\r\n    }\r\n    const initialValues: DirectorTypeModel = {\r\n        DirectorTypeName: \"\",\r\n        Remarks: \"\",\r\n    };\r\n    const showModal = () => {\r\n        setOpen(true);\r\n        reset(initialValues);\r\n    }\r\n    const resetForm = () => {\r\n        reset(initialValues);\r\n        clearForm();\r\n    }\r\n    useEffect(() => {\r\n        directorTypeFormFunc.current = handleOpen\r\n        reset(directorTypeData);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        reset(directorTypeData);\r\n        setValue(\"DirectorTypeName\", directorTypeData.DirectorTypeName);\r\n    }, [directorTypeData, directorTypeFormFunc]);\r\n\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        directorTypeName: Yup.string()\r\n            .required('Director Type is required')\r\n            .min(2, 'Director Type must be at least 6 characters')\r\n            .max(200, 'Director Type must not exceed 200 characters'),\r\n        remarks: Yup.string()\r\n            .required('Remarks is required')\r\n            .min(2, 'Remarks must be at least 2 characters')\r\n    });\r\n\r\n    const {\r\n        register, setValue,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { errors }\r\n    } = useForm<DirectorTypeModel>({\r\n        shouldUnregister: false,\r\n    });\r\n    const onSubmit = (data: DirectorTypeModel) => {\r\n        handleFormSubmit(data);\r\n    };\r\n    const handleFormSubmit = (formValue: { DirectorTypeName: string; Remarks: string }) => {\r\n        const { DirectorTypeName, Remarks } = formValue;\r\n        setMessage(\"gbghihiou\");\r\n        setLoading(true);\r\n        post('master/AddDirectorType', formValue).then(\r\n            (response: any) => {\r\n                if (response.data.status == 'success') {\r\n                    alert('successfully saved');\r\n                    handleClose();\r\n                    rerenderTable();\r\n                }\r\n            },\r\n            (error: any) => {\r\n                const resMessage =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setLoading(false);\r\n                setMessage(resMessage);\r\n            }\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button sx={{ margin: 1 }} variant=\"contained\" color=\"primary\" onClick={showModal}> Add Director Type</Button>\r\n            <form onSubmit={handleSubmit(onSubmit)} noValidate >\r\n                <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"stretch\"\r\n                    spacing={1}\r\n                >\r\n                    <Grid item xs={4}>\r\n                        <div>\r\n                            <TextField\r\n                                style={{ width: '100%' }}\r\n                                required\r\n                                id=\"outlined-required\"\r\n                                label=\"CompanyNumber\"\r\n                                {...register('DirectorTypeName')}\r\n                                className={`form-control ${errors.DirectorTypeName ? 'is-invalid' : ''}`}\r\n                            />\r\n                            <TextField\r\n                                style={{ width: '100%' }} type=\"text\"\r\n                                required\r\n                                id=\"outlined-required\"\r\n                                label=\"DOB\"\r\n                                {...register('Remarks')}\r\n                                className={`form-control ${errors.Remarks ? 'is-invalid' : ''}`}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Button  type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"primary\"> Next</Button>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}