{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\LFMS\\\\LFMS.WebUI\\\\src\\\\content\\\\pages\\\\Components\\\\CompanyType\\\\CompanyTypeForm.tsx\",\n    _s = $RefreshSig$();\n\n////import { Helmet } from 'react-helmet-async';\nimport PageTitle from '../../../../components/PageTitle';\nimport { useState } from 'react';\nimport * as Yup from \"yup\";\nimport { post } from \"../../../../services/common.service\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport PageTitleWrapper from '../../../../components/PageTitleWrapper';\nimport { Button, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box } from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst label = {\n  inputProps: {\n    'aria-label': 'Switch demo'\n  }\n};\n\nfunction CompanyTypeForm() {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const initialValues = {\n    username: \"\",\n    password: \"\"\n  };\n  const validationSchema = Yup.object().shape({\n    companyTypeName: Yup.string().required('Company Type is required').min(2, 'Username must be at least 6 characters').max(20, 'Username must not exceed 20 characters'),\n    remarks: Yup.string().required('Remarks is required').min(2, 'Password must be at least 6 characters').max(40, 'Password must not exceed 40 characters')\n  });\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(validationSchema)\n  });\n\n  const onSubmit = data => {\n    handleFormSubmit(data); //console.log(JSON.stringify(data, null, 2));\n  };\n\n  const handleFormSubmit = formValue => {\n    const {\n      companyTypeName,\n      remarks\n    } = formValue;\n    setMessage(\"gbghihiou\");\n    setLoading(true);\n    post('token', formValue).then(response => {\n      // history.push(\"/profile\");\n      if (response.data.token) {\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      }\n\n      window.location.href = '/';\n    }, error => {\n      const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n      setLoading(false);\n      setMessage(resMessage);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"sm\",\n      children: [/*#__PURE__*/_jsxDEV(PageTitleWrapper, {\n        children: /*#__PURE__*/_jsxDEV(PageTitle, {\n          heading: \"Company Type\",\n          subHeading: \"sers.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"register-form\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit(onSubmit),\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            justifyContent: \"center\",\n            alignItems: \"stretch\",\n            spacing: 6,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Card, {\n                sx: {\n                  px: 12\n                },\n                children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n                  title: \"Enter Company Type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                  children: /*#__PURE__*/_jsxDEV(Box, {\n                    component: \"form\",\n                    sx: {\n                      '& .MuiTextField-root': {\n                        m: 1,\n                        width: '25ch'\n                      }\n                    },\n                    noValidate: true,\n                    autoComplete: \"off\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      children: /*#__PURE__*/_jsxDEV(TextField, {\n                        style: {\n                          width: '100%'\n                        },\n                        required: true,\n                        id: \"outlined-required\",\n                        label: \"CompanyType\",\n                        ...register('companyTypeName'),\n                        className: `form-control ${errors.companyTypeName ? 'is-invalid' : ''}`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 112,\n                        columnNumber: 41\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 111,\n                      columnNumber: 37\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: /*#__PURE__*/_jsxDEV(TextField, {\n                        style: {\n                          width: '100%'\n                        },\n                        required: true,\n                        id: \"outlined-password-input\",\n                        label: \"Remarks\",\n                        type: \"remarks\",\n                        multiline: true,\n                        rows: 2,\n                        maxRows: 4,\n                        autoComplete: \"current-password\",\n                        ...register('remarks'),\n                        className: `form-control ${errors.remarks ? 'is-invalid' : ''}`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 122,\n                        columnNumber: 41\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 121,\n                      columnNumber: 37\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 103,\n                    columnNumber: 33\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  sx: {\n                    margin: 1\n                  },\n                  variant: \"contained\",\n                  color: \"primary\",\n                  children: \"Login\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"button\",\n                  onClick: () => reset(),\n                  sx: {\n                    margin: 1\n                  },\n                  variant: \"contained\",\n                  color: \"secondary\",\n                  children: \"Reset\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(CompanyTypeForm, \"7WrwAlJQWCzaBEtEBDzU+m+rLJM=\", false, function () {\n  return [useForm];\n});\n\n_c = CompanyTypeForm;\nexport default CompanyTypeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompanyTypeForm\");","map":{"version":3,"sources":["E:/Projects/LFMS/LFMS.WebUI/src/content/pages/Components/CompanyType/CompanyTypeForm.tsx"],"names":["PageTitle","useState","Yup","post","yupResolver","PageTitleWrapper","Button","Container","Grid","Card","CardHeader","CardContent","Divider","TextField","Box","useForm","label","inputProps","CompanyTypeForm","loading","setLoading","message","setMessage","initialValues","username","password","validationSchema","object","shape","companyTypeName","string","required","min","max","remarks","register","handleSubmit","reset","formState","errors","resolver","onSubmit","data","handleFormSubmit","formValue","then","response","token","localStorage","setItem","JSON","stringify","window","location","href","error","resMessage","toString","px","m","width","margin"],"mappings":"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","sourcesContent":["////import { Helmet } from 'react-helmet-async';\r\nimport PageTitle from '../../../../components/PageTitle';\r\nimport { useState } from 'react';\r\nimport * as Yup from \"yup\";\r\nimport { post} from \"../../../../services/common.service\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nimport PageTitleWrapper from '../../../../components/PageTitleWrapper';\r\nimport { Button, IconButton, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box } from '@mui/material';\r\nimport Footer from '../../../../components/Footer';\r\n\r\nimport Switch from '@mui/material/Switch';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nconst label = { inputProps: { 'aria-label': 'Switch demo' } };\r\n\r\nfunction CompanyTypeForm() {\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    const initialValues: {\r\n        username: string;\r\n        password: string;\r\n    } = {\r\n        username: \"\",\r\n        password: \"\",\r\n    };\r\n    type CompanyTypeForm = {\r\n        companyTypeName: string;\r\n        remarks: string;\r\n    };\r\n    const validationSchema = Yup.object().shape({\r\n        companyTypeName: Yup.string()\r\n            .required('Company Type is required')\r\n            .min(2, 'Username must be at least 6 characters')\r\n            .max(20, 'Username must not exceed 20 characters'),\r\n        remarks: Yup.string()\r\n            .required('Remarks is required')\r\n            .min(2, 'Password must be at least 6 characters')\r\n            .max(40, 'Password must not exceed 40 characters'),\r\n    });\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { errors }\r\n    } = useForm<CompanyTypeForm>({\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n    const onSubmit = (data: CompanyTypeForm) => {\r\n        handleFormSubmit(data);\r\n        //console.log(JSON.stringify(data, null, 2));\r\n    };\r\n    const handleFormSubmit = (formValue: { companyTypeName: string; remarks: string }) => {\r\n        const { companyTypeName, remarks } = formValue;\r\n        setMessage(\"gbghihiou\");\r\n        setLoading(true);\r\n        post('token', formValue).then(\r\n            (response: any) => {\r\n                // history.push(\"/profile\");\r\n                if (response.data.token) {\r\n                    localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n                }\r\n                window.location.href = '/';\r\n            },\r\n            (error: any) => {\r\n                const resMessage =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setLoading(false);\r\n                setMessage(resMessage);\r\n            }\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n            <Container maxWidth=\"sm\">\r\n                <PageTitleWrapper>\r\n                    <PageTitle\r\n                        heading=\"Company Type\"\r\n                        subHeading=\"sers.\"\r\n                    />\r\n                </PageTitleWrapper>\r\n                <div className=\"register-form\">\r\n                    <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"stretch\"\r\n                    spacing={6}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Card sx={{ px: 12 }}>\r\n                            <CardHeader title=\"Enter Company Type\" />\r\n                            <Divider />\r\n                            <CardContent>\r\n                                <Box\r\n                                    component=\"form\"\r\n                                    sx={{\r\n                                        '& .MuiTextField-root': { m: 1, width: '25ch' },\r\n                                    }}\r\n                                    noValidate\r\n                                    autoComplete=\"off\"\r\n                                >\r\n                                    <div>\r\n                                        <TextField\r\n                                            style={{ width: '100%' }}\r\n                                            required\r\n                                            id=\"outlined-required\"\r\n                                                    label=\"CompanyType\"\r\n                                                    {...register('companyTypeName')}\r\n                                                    className={`form-control ${errors.companyTypeName ? 'is-invalid' : ''}`}\r\n                                        />\r\n                                    </div>\r\n                                    <div>\r\n                                        <TextField style={{ width: '100%' }} required\r\n                                            id=\"outlined-password-input\" label=\"Remarks\"                                                        type=\"remarks\" multiline rows={2}  maxRows={4} autoComplete=\"current-password\"\r\n                                                    {...register('remarks')}\r\n                                                    className={`form-control ${errors.remarks ? 'is-invalid' : ''}`}\r\n                                        />\r\n                                    </div>\r\n                                </Box>\r\n                                    </CardContent>\r\n                            <Button type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"primary\">\r\n                                Login\r\n                                    </Button>\r\n                                    <Button type=\"button\"\r\n                                        onClick={() => reset()} sx={{ margin: 1 }} variant=\"contained\" color=\"secondary\">\r\n                                        Reset\r\n                                    </Button>\r\n\r\n                        </Card>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                    </form>\r\n                </div>\r\n            </Container>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CompanyTypeForm;\r\n"]},"metadata":{},"sourceType":"module"}