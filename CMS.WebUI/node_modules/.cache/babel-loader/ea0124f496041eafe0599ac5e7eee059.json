{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\LFMS\\\\LFMS.WebUI\\\\src\\\\content\\\\pages\\\\Components\\\\Designation\\\\DesignationForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport * as Yup from \"yup\";\nimport { post } from \"../../../../services/common.service\";\nimport { Button, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box, Modal } from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst label = {\n  inputProps: {\n    'aria-label': 'Switch demo'\n  }\n};\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 600,\n  bgcolor: 'background.paper',\n  boxShadow: 24,\n  p: 4\n};\nexport const DesignationForm = _ref => {\n  _s();\n\n  let {\n    clearForm,\n    designationFormFunc,\n    designationData,\n    rerenderTable,\n    AddButtonLabel\n  } = _ref;\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    reset(initialValues);\n    clearForm();\n  };\n\n  const initialValues = {\n    DesignationName: \"\",\n    Remarks: \"\"\n  };\n\n  const showModal = () => {\n    setOpen(true);\n    reset(initialValues);\n  };\n\n  const resetForm = () => {\n    reset(initialValues);\n    clearForm();\n  };\n\n  useEffect(() => {\n    designationFormFunc.current = handleOpen;\n    reset(designationData);\n  }, []);\n  useEffect(() => {\n    reset(designationData);\n  }, [designationData, designationFormFunc]);\n  const validationSchema = Yup.object().shape({\n    designationName: Yup.string().required('Designation is required').min(2, 'Designation must be at least 6 characters').max(200, 'Designation must not exceed 200 characters'),\n    remarks: Yup.string().required('Remarks is required').min(2, 'Remarks must be at least 2 characters')\n  });\n  const {\n    register,\n    setValue,\n    handleSubmit,\n    reset,\n    formState: {\n      errors\n    }\n  } = useForm({\n    shouldUnregister: false\n  });\n\n  const onSubmit = data => {\n    handleFormSubmit(data);\n  };\n\n  const handleFormSubmit = formValue => {\n    const {\n      DesignationName,\n      Remarks\n    } = formValue;\n    setLoading(true);\n    post('master/AddDesignation', formValue).then(response => {\n      if (response.data.status == 'success') {\n        alert('successfully saved');\n        handleClose();\n        rerenderTable();\n      }\n    }, error => {\n      const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n      setLoading(false);\n      setMessage(resMessage);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      sx: {\n        margin: 1\n      },\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: showModal,\n      children: AddButtonLabel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"modal-modal-title\",\n      \"aria-describedby\": \"modal-modal-description\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        maxWidth: \"md\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"register-form\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit(onSubmit),\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              direction: \"row\",\n              justifyContent: \"center\",\n              alignItems: \"stretch\",\n              spacing: 1,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(Card, {\n                  children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n                    title: \"Enter Designation Detail\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 134,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 135,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                    children: /*#__PURE__*/_jsxDEV(Box, {\n                      sx: {\n                        '& .MuiTextField-root': {\n                          my: 1,\n                          width: '25ch'\n                        }\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        children: /*#__PURE__*/_jsxDEV(TextField, {\n                          style: {\n                            width: '100%'\n                          },\n                          required: true,\n                          id: \"outlined-required\",\n                          label: \"Designation Name\",\n                          ...register('DesignationName'),\n                          className: `form-control ${errors.DesignationName ? 'is-invalid' : ''}`\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 143,\n                          columnNumber: 57\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 142,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: /*#__PURE__*/_jsxDEV(TextField, {\n                          style: {\n                            width: '100%'\n                          },\n                          required: true,\n                          id: \"outlined-password-input\",\n                          label: \"Remarks\",\n                          type: \"remarks\",\n                          multiline: true,\n                          rows: 2,\n                          maxRows: 4,\n                          autoComplete: \"current-password\",\n                          ...register('Remarks'),\n                          className: `form-control ${errors.Remarks ? 'is-invalid' : ''}`\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 153,\n                          columnNumber: 57\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 152,\n                        columnNumber: 53\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 137,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 136,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    type: \"submit\",\n                    sx: {\n                      margin: 1\n                    },\n                    variant: \"contained\",\n                    color: \"primary\",\n                    children: \" Save\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 167,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    type: \"button\",\n                    onClick: () => resetForm(),\n                    sx: {\n                      margin: 1\n                    },\n                    variant: \"contained\",\n                    color: \"secondary\",\n                    children: \" Reset \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 168,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    type: \"submit\",\n                    sx: {\n                      margin: 1\n                    },\n                    variant: \"contained\",\n                    color: \"error\",\n                    onClick: handleClose,\n                    children: \" Close\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 169,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(DesignationForm, \"jCkTiqlbsEFb8OnMQAthCJN0ATo=\", false, function () {\n  return [useForm];\n});\n\n_c = DesignationForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"DesignationForm\");","map":{"version":3,"sources":["E:/Projects/LFMS/LFMS.WebUI/src/content/pages/Components/Designation/DesignationForm.tsx"],"names":["useEffect","useState","Yup","post","Button","Container","Grid","Card","CardHeader","CardContent","Divider","TextField","Box","Modal","useForm","label","inputProps","style","position","top","left","transform","width","bgcolor","boxShadow","p","DesignationForm","clearForm","designationFormFunc","designationData","rerenderTable","AddButtonLabel","loading","setLoading","message","setMessage","open","setOpen","handleOpen","handleClose","reset","initialValues","DesignationName","Remarks","showModal","resetForm","current","validationSchema","object","shape","designationName","string","required","min","max","remarks","register","setValue","handleSubmit","formState","errors","shouldUnregister","onSubmit","data","handleFormSubmit","formValue","then","response","status","alert","error","resMessage","toString","margin","my"],"mappings":"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","sourcesContent":["import PageTitle from '../../../../components/PageTitle';\r\nimport { useEffect, useState } from 'react';\r\nimport * as Yup from \"yup\";\r\nimport { post } from \"../../../../services/common.service\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nimport PageTitleWrapper from '../../../../components/PageTitleWrapper';\r\nimport { Button, IconButton, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box, Modal, Typography } from '@mui/material';\r\nimport Footer from '../../../../components/Footer';\r\n\r\nimport Switch from '@mui/material/Switch';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nconst label = { inputProps: { 'aria-label': 'Switch demo' } };\r\n\r\nconst style = {\r\n    position: 'absolute' as 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 600,\r\n    bgcolor: 'background.paper',\r\n    boxShadow: 24,\r\n    p: 4,\r\n};\r\nexport type DesignationModel = {\r\n    DesignationID?: number;\r\n    DesignationName: string;\r\n    Remarks: string;\r\n};\r\nexport const DesignationForm: React.FC<any> = ({ clearForm, designationFormFunc, designationData, rerenderTable, AddButtonLabel }) => {\r\n\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    const [open, setOpen] = useState(false);\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        reset(initialValues);\r\n        clearForm();\r\n    }\r\n    const initialValues: DesignationModel = {\r\n        DesignationName: \"\",\r\n        Remarks: \"\",\r\n    };\r\n    const showModal = () => {\r\n        setOpen(true);\r\n        reset(initialValues);\r\n    }\r\n    const resetForm = () => {\r\n        reset(initialValues);\r\n        clearForm();\r\n    }\r\n    useEffect(() => {\r\n        designationFormFunc.current = handleOpen\r\n        reset(designationData);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        reset(designationData);\r\n    }, [designationData, designationFormFunc]);\r\n\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        designationName: Yup.string()\r\n            .required('Designation is required')\r\n            .min(2, 'Designation must be at least 6 characters')\r\n            .max(200, 'Designation must not exceed 200 characters'),\r\n        remarks: Yup.string()\r\n            .required('Remarks is required')\r\n            .min(2, 'Remarks must be at least 2 characters')\r\n    });\r\n\r\n    const {\r\n        register, setValue,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { errors }\r\n    } = useForm<DesignationModel>({\r\n        shouldUnregister: false,\r\n    });\r\n    const onSubmit = (data: DesignationModel) => {\r\n        handleFormSubmit(data);\r\n    };\r\n    const handleFormSubmit = (formValue: { DesignationName: string; Remarks: string }) => {\r\n        const { DesignationName, Remarks } = formValue;\r\n        setLoading(true);\r\n        post('master/AddDesignation', formValue).then(\r\n            (response: any) => {\r\n                if (response.data.status == 'success') {\r\n                    alert('successfully saved');\r\n                    handleClose();\r\n                    rerenderTable();\r\n                }\r\n            },\r\n            (error: any) => {\r\n                const resMessage =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setLoading(false);\r\n                setMessage(resMessage);\r\n            }\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button sx={{ margin: 1 }} variant=\"contained\" color=\"primary\" onClick={showModal}>{AddButtonLabel }</Button>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"                \r\n            >\r\n               \r\n\r\n                    <Container maxWidth=\"md\">\r\n                        <div className=\"register-form\">\r\n                            <form onSubmit={handleSubmit(onSubmit)}>\r\n                                <Grid\r\n                                    container\r\n                                    direction=\"row\"\r\n                                    justifyContent=\"center\"\r\n                                    alignItems=\"stretch\"\r\n                                    spacing={1}\r\n                                >\r\n                                    <Grid item xs={12}>\r\n                                        <Card>\r\n                                            <CardHeader title=\"Enter Designation Detail\" />\r\n                                            <Divider />\r\n                                            <CardContent>\r\n                                                <Box\r\n                                                    sx={{\r\n                                                        '& .MuiTextField-root': { my: 1, width: '25ch' },\r\n                                                    }}\r\n                                                >\r\n                                                    <div>\r\n                                                        <TextField\r\n                                                            style={{ width: '100%' }}\r\n                                                            required\r\n                                                            id=\"outlined-required\"\r\n                                                            label=\"Designation Name\"\r\n                                                            {...register('DesignationName')}\r\n                                                            className={`form-control ${errors.DesignationName ? 'is-invalid' : ''}`}\r\n                                                        />\r\n                                                    </div>\r\n                                                    <div>\r\n                                                        <TextField style={{ width: '100%' }}\r\n                                                            required\r\n                                                            id=\"outlined-password-input\"\r\n                                                            label=\"Remarks\"\r\n                                                            type=\"remarks\"\r\n                                                            multiline rows={2}\r\n                                                            maxRows={4}\r\n                                                            autoComplete=\"current-password\"\r\n                                                            {...register('Remarks')}\r\n                                                            className={`form-control ${errors.Remarks ? 'is-invalid' : ''}`}\r\n                                                        />\r\n                                                    </div>\r\n                                                </Box>\r\n                                            </CardContent>\r\n                                            <Button type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"primary\"> Save</Button>\r\n                                            <Button type=\"button\" onClick={() => resetForm()} sx={{ margin: 1 }} variant=\"contained\" color=\"secondary\"> Reset </Button>\r\n                                            <Button type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"error\" onClick={handleClose}> Close</Button>\r\n                                        </Card>\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                            </form>\r\n                        </div>\r\n                </Container>\r\n              \r\n            </Modal>\r\n        </>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}