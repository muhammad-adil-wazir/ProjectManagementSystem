{"ast":null,"code":"import { Get } from './common.service';\nexport const lectureService = {\n  getAllLectures: async () => {\n    return await Get('lecture').then(x => {\n      if (x.status == 200) {\n        return x.data.lectures;\n      } else {\n        return [];\n      }\n    });\n  },\n  getAllLectureByDepartmentID: async departmentID => {\n    return await Get('lecture/:DepartmentID/' + departmentID).then(x => {\n      if (x.status == 200) {\n        return x.data.lectures;\n      } else {\n        return [];\n      }\n    });\n  },\n  getAllDepartments: async () => {\n    return await Get('department').then(x => {\n      if (x.status == 200) {\n        return x.data.departments;\n      } else {\n        return [];\n      }\n    });\n  }\n};","map":{"version":3,"sources":["E:/Projects/Rebartek/cms.webui/src/services/lecture.service.ts"],"names":["Get","lectureService","getAllLectures","then","x","status","data","lectures","getAllLectureByDepartmentID","departmentID","getAllDepartments","departments"],"mappings":"AAAA,SAASA,GAAT,QAA0B,kBAA1B;AAIA,OAAO,MAAMC,cAAc,GAAG;AAC1BC,EAAAA,cAAc,EAAE,YAAqC;AACjD,WAAO,MAAMF,GAAG,CAAC,SAAD,CAAH,CAAeG,IAAf,CAAoBC,CAAC,IAAI;AAClC,UAAIA,CAAC,CAACC,MAAF,IAAY,GAAhB,EAAqB;AACjB,eAAOD,CAAC,CAACE,IAAF,CAAOC,QAAd;AACH,OAFD,MAGK;AACD,eAAO,EAAP;AACH;AACJ,KAPY,CAAb;AAQH,GAVyB;AAW1BC,EAAAA,2BAA2B,EAAE,MAAOC,YAAP,IAAyD;AAClF,WAAO,MAAMT,GAAG,CAAC,2BAA2BS,YAA5B,CAAH,CAA6CN,IAA7C,CAAkDC,CAAC,IAAI;AAChE,UAAIA,CAAC,CAACC,MAAF,IAAY,GAAhB,EAAqB;AACjB,eAAOD,CAAC,CAACE,IAAF,CAAOC,QAAd;AACH,OAFD,MAGK;AACD,eAAO,EAAP;AACH;AACJ,KAPY,CAAb;AAQH,GApByB;AAqB1BG,EAAAA,iBAAiB,EAAE,YAAwC;AACvD,WAAO,MAAMV,GAAG,CAAC,YAAD,CAAH,CAAkBG,IAAlB,CAAuBC,CAAC,IAAI;AACrC,UAAIA,CAAC,CAACC,MAAF,IAAY,GAAhB,EAAqB;AACjB,eAAOD,CAAC,CAACE,IAAF,CAAOK,WAAd;AACH,OAFD,MAGK;AACD,eAAO,EAAP;AACH;AACJ,KAPY,CAAb;AAQH;AA9ByB,CAAvB","sourcesContent":["import { Get, Post } from './common.service';\r\nimport { LectureModel, DepartmentModel } from '../types/master.type';\r\n\r\n\r\nexport const lectureService = {\r\n    getAllLectures: async (): Promise<LectureModel[]> => {\r\n        return await Get('lecture').then(x => {\r\n            if (x.status == 200) {\r\n                return x.data.lectures;\r\n            }\r\n            else {\r\n                return [];\r\n            }\r\n        });\r\n    },\r\n    getAllLectureByDepartmentID: async (departmentID: string): Promise<LectureModel[]> => {\r\n        return await Get('lecture/:DepartmentID/' + departmentID).then(x => {\r\n            if (x.status == 200) {\r\n                return x.data.lectures;\r\n            }\r\n            else {\r\n                return [];\r\n            }\r\n        });\r\n    },\r\n    getAllDepartments: async (): Promise<DepartmentModel[]> => {\r\n        return await Get('department').then(x => {\r\n            if (x.status == 200) {\r\n                return x.data.departments;\r\n            }\r\n            else {\r\n                return [];\r\n            }\r\n        });\r\n    },\r\n\r\n    \r\n}\r\n"]},"metadata":{},"sourceType":"module"}