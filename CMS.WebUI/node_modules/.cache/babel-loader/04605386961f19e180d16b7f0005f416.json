{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\LFMS\\\\LFMS.WebUI\\\\src\\\\content\\\\pages\\\\Components\\\\Designation\\\\DesignationForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { post } from \"../../../../services/common.service\";\nimport { Button, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box, Modal, Snackbar, Alert } from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport { object, string } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 600,\n  bgcolor: 'background.paper',\n  boxShadow: 24,\n  p: 4\n};\nexport const DesignationForm = _ref => {\n  _s();\n\n  let {\n    clearForm,\n    designationFormFunc,\n    designationData,\n    rerenderDesignationTable,\n    AddButtonLabel\n  } = _ref;\n  const [openAlert, setopenAlert] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [messageSuccess, setMessageSuccess] = useState(\"\");\n  const [messageErorr, setMessageError] = useState(\"\");\n  const [open, setOpen] = useState(false);\n\n  const handleAlertClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setopenAlert(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    reset(initialValues);\n    clearForm();\n  };\n\n  const initialValues = {\n    DesignationName: \"\",\n    Remarks: \"\"\n  };\n\n  const showModal = () => {\n    setOpen(true);\n    reset(initialValues);\n  };\n\n  const resetForm = () => {\n    reset(initialValues);\n    clearForm();\n  };\n\n  useEffect(() => {\n    designationFormFunc.current = handleOpen;\n    reset(designationData);\n  }, []);\n  useEffect(() => {\n    reset(designationData);\n  }, [designationData, designationFormFunc]);\n  const validationSchema = object({\n    DesignationName: string().nonempty('Designation is required').max(200, 'Designation must be less than 200 characters'),\n    Remarks: string().nonempty('Remark is required')\n  });\n  const {\n    register,\n    formState: {\n      errors,\n      isSubmitSuccessful\n    },\n    reset,\n    handleSubmit,\n    setValue\n  } = useForm({\n    resolver: zodResolver(validationSchema)\n  });\n  useEffect(() => {\n    if (isSubmitSuccessful) {\n      reset();\n    }\n  }, [isSubmitSuccessful]);\n\n  const onSubmitHandler = values => {\n    console.log(values);\n    handleFormSubmit(values);\n  };\n\n  const handleFormSubmit = formValue => {\n    setLoading(true);\n    let _url = 'master/AddDesignation';\n\n    if (formValue.DesignationID != null && formValue.DesignationID > 0) {\n      _url = 'master/EditDesignation';\n    }\n\n    post(_url, formValue).then(response => {\n      if (response.data.status == 'success') {\n        setopenAlert(true);\n        setMessageSuccess('successfully saved');\n        handleClose();\n        handleClose();\n        rerenderDesignationTable();\n      }\n    }, error => {\n      const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n      setLoading(false);\n      setMessageError(resMessage);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Snackbar, {\n      open: openAlert,\n      autoHideDuration: 5000,\n      onClose: handleAlertClose,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleAlertClose,\n        variant: \"filled\",\n        severity: \"success\",\n        sx: {\n          width: '100%'\n        },\n        children: messageSuccess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: openAlert,\n      autoHideDuration: 5000,\n      onClose: handleAlertClose,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleAlertClose,\n        variant: \"filled\",\n        severity: \"success\",\n        sx: {\n          width: '100%'\n        },\n        children: messageSuccess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      sx: {\n        margin: 1,\n        height: '53px'\n      },\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: showModal,\n      children: [\" \", AddButtonLabel]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"modal-modal-title\",\n      \"aria-describedby\": \"modal-modal-description\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        maxWidth: \"md\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"register-form\",\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            onSubmit: handleSubmit(onSubmitHandler),\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              direction: \"row\",\n              justifyContent: \"center\",\n              alignItems: \"stretch\",\n              spacing: 1,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(Card, {\n                  children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n                    title: \"Enter Designation  Detail\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 160,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 161,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                    children: /*#__PURE__*/_jsxDEV(Box, {\n                      sx: {\n                        '& .MuiTextField-root': {\n                          my: 1,\n                          width: '25ch'\n                        }\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        children: /*#__PURE__*/_jsxDEV(TextField, {\n                          style: {\n                            width: '100%'\n                          },\n                          required: true,\n                          id: \"outlined-required\",\n                          label: \"Designation Name\",\n                          ...register('DesignationName'),\n                          className: `form-control ${errors.DesignationName ? 'is-invalid' : ''}`\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 169,\n                          columnNumber: 57\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 168,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: /*#__PURE__*/_jsxDEV(TextField, {\n                          style: {\n                            width: '100%'\n                          },\n                          required: true,\n                          id: \"outlined-password-input\",\n                          label: \"Remarks\",\n                          type: \"remarks\",\n                          multiline: true,\n                          rows: 2,\n                          maxRows: 4,\n                          autoComplete: \"current-password\",\n                          ...register('Remarks'),\n                          className: `form-control ${errors.Remarks ? 'is-invalid' : ''}`\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 179,\n                          columnNumber: 57\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 178,\n                        columnNumber: 53\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 163,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 162,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    type: \"submit\",\n                    sx: {\n                      margin: 1\n                    },\n                    variant: \"contained\",\n                    color: \"primary\",\n                    children: \" Save\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 193,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    type: \"button\",\n                    onClick: () => resetForm(),\n                    sx: {\n                      margin: 1\n                    },\n                    variant: \"contained\",\n                    color: \"secondary\",\n                    children: \" Reset \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 194,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    type: \"submit\",\n                    sx: {\n                      margin: 1\n                    },\n                    variant: \"contained\",\n                    color: \"error\",\n                    onClick: handleClose,\n                    children: \" Close\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 195,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(DesignationForm, \"HV+qhlh3aNcykMSyw+SOZm5SRhU=\", false, function () {\n  return [useForm];\n});\n\n_c = DesignationForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"DesignationForm\");","map":{"version":3,"sources":["E:/Projects/LFMS/LFMS.WebUI/src/content/pages/Components/Designation/DesignationForm.tsx"],"names":["useEffect","useState","post","Button","Container","Grid","Card","CardHeader","CardContent","Divider","TextField","Box","Modal","Snackbar","Alert","useForm","object","string","zodResolver","style","position","top","left","transform","width","bgcolor","boxShadow","p","DesignationForm","clearForm","designationFormFunc","designationData","rerenderDesignationTable","AddButtonLabel","openAlert","setopenAlert","loading","setLoading","messageSuccess","setMessageSuccess","messageErorr","setMessageError","open","setOpen","handleAlertClose","event","reason","handleOpen","handleClose","reset","initialValues","DesignationName","Remarks","showModal","resetForm","current","validationSchema","nonempty","max","register","formState","errors","isSubmitSuccessful","handleSubmit","setValue","resolver","onSubmitHandler","values","console","log","handleFormSubmit","formValue","_url","DesignationID","then","response","data","status","error","resMessage","message","toString","margin","height","my"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { post } from \"../../../../services/common.service\";\r\nimport { Button, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box, Modal, Snackbar, Alert } from '@mui/material';\r\nimport { useForm, SubmitHandler } from 'react-hook-form';\r\nimport { object, string, TypeOf } from 'zod';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\n\r\n\r\nconst style = {\r\n    position: 'absolute' as 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 600,\r\n    bgcolor: 'background.paper',\r\n    boxShadow: 24,\r\n    p: 4,\r\n};\r\nexport type DesignationModel = {\r\n    DesignationID?: number;\r\n    DesignationName: string;\r\n    Remarks: string;\r\n};\r\nexport const DesignationForm: React.FC<any> = ({ clearForm, designationFormFunc, designationData, rerenderDesignationTable, AddButtonLabel }) => {\r\n\r\n    const [openAlert, setopenAlert] = useState<boolean>(false);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [messageSuccess, setMessageSuccess] = useState<string>(\"\");\r\n    const [messageErorr, setMessageError] = useState<string>(\"\");\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleAlertClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setopenAlert(false);\r\n    };\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        reset(initialValues);\r\n        clearForm();\r\n    }\r\n    const initialValues: DesignationModel = {\r\n        DesignationName: \"\",\r\n        Remarks: \"\",\r\n    };\r\n    const showModal = () => {\r\n        setOpen(true);\r\n        reset(initialValues);\r\n    }\r\n    const resetForm = () => {\r\n        reset(initialValues);\r\n        clearForm();\r\n    }\r\n    useEffect(() => {\r\n        designationFormFunc.current = handleOpen\r\n        reset(designationData);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        reset(designationData);\r\n    }, [designationData, designationFormFunc]);\r\n\r\n    const validationSchema = object({\r\n        DesignationName: string()\r\n            .nonempty('Designation is required')\r\n            .max(200, 'Designation must be less than 200 characters'),\r\n        Remarks: string().nonempty('Remark is required')\r\n    });\r\n    type RegisterInput = TypeOf<typeof validationSchema>;\r\n\r\n    const {\r\n        register,\r\n        formState: { errors, isSubmitSuccessful },\r\n        reset,\r\n        handleSubmit,\r\n        setValue\r\n    } = useForm<RegisterInput>({\r\n        resolver: zodResolver(validationSchema)\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (isSubmitSuccessful) {\r\n            reset();\r\n        }\r\n    }, [isSubmitSuccessful]);\r\n\r\n    const onSubmitHandler: SubmitHandler<RegisterInput> = (values) => {\r\n        console.log(values);\r\n        handleFormSubmit(values);\r\n    };\r\n    const handleFormSubmit = (formValue: DesignationModel) => {\r\n       \r\n        setLoading(true);\r\n\r\n        let _url = 'master/AddDesignation';\r\n        if (formValue.DesignationID != null && formValue.DesignationID > 0) {\r\n            _url = 'master/EditDesignation';\r\n        }\r\n\r\n        post(_url, formValue).then(\r\n            (response: any) => {\r\n                if (response.data.status == 'success') {\r\n                    setopenAlert(true);                    \r\n                    setMessageSuccess('successfully saved');\r\n                    handleClose();\r\n                    handleClose();\r\n                    rerenderDesignationTable();\r\n                }\r\n            },\r\n            (error: any) => {\r\n                const resMessage =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setLoading(false);\r\n                setMessageError(resMessage);\r\n            }\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Snackbar open={openAlert} autoHideDuration={5000} onClose={handleAlertClose}>\r\n                <Alert onClose={handleAlertClose} variant=\"filled\" severity=\"success\" sx={{ width: '100%' }}>\r\n                    {messageSuccess}\r\n                </Alert>\r\n            </Snackbar>\r\n\r\n            <Snackbar open={openAlert} autoHideDuration={5000} onClose={handleAlertClose}>\r\n                <Alert onClose={handleAlertClose} variant=\"filled\" severity=\"success\" sx={{ width: '100%' }}>\r\n                    {messageSuccess}\r\n                </Alert>\r\n            </Snackbar>\r\n\r\n            <Button sx={{ margin: 1, height: '53px' }} variant=\"contained\" color=\"primary\" onClick={showModal}> {AddButtonLabel}</Button>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"                \r\n            >\r\n                    <Container maxWidth=\"md\">\r\n                        <div className=\"register-form\">\r\n                        <Box onSubmit={handleSubmit(onSubmitHandler)}>\r\n                                <Grid\r\n                                    container\r\n                                    direction=\"row\"\r\n                                    justifyContent=\"center\"\r\n                                    alignItems=\"stretch\"\r\n                                    spacing={1}\r\n                                >\r\n                                    <Grid item xs={12}>\r\n                                        <Card>\r\n                                            <CardHeader title=\"Enter Designation  Detail\" />\r\n                                            <Divider />\r\n                                            <CardContent>\r\n                                                <Box\r\n                                                    sx={{\r\n                                                        '& .MuiTextField-root': { my: 1, width: '25ch' },\r\n                                                    }}\r\n                                                >\r\n                                                    <div>\r\n                                                        <TextField\r\n                                                            style={{ width: '100%' }}\r\n                                                            required\r\n                                                            id=\"outlined-required\"\r\n                                                            label=\"Designation Name\"\r\n                                                            {...register('DesignationName')}\r\n                                                            className={`form-control ${errors.DesignationName ? 'is-invalid' : ''}`}\r\n                                                        />\r\n                                                    </div>\r\n                                                    <div>\r\n                                                        <TextField style={{ width: '100%' }}\r\n                                                            required\r\n                                                            id=\"outlined-password-input\"\r\n                                                            label=\"Remarks\"\r\n                                                            type=\"remarks\"\r\n                                                            multiline rows={2}\r\n                                                            maxRows={4}\r\n                                                            autoComplete=\"current-password\"\r\n                                                            {...register('Remarks')}\r\n                                                            className={`form-control ${errors.Remarks ? 'is-invalid' : ''}`}\r\n                                                        />\r\n                                                    </div>\r\n                                                </Box>\r\n                                            </CardContent>\r\n                                            <Button type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"primary\"> Save</Button>\r\n                                            <Button type=\"button\" onClick={() => resetForm()} sx={{ margin: 1 }} variant=\"contained\" color=\"secondary\"> Reset </Button>\r\n                                            <Button type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"error\" onClick={handleClose}> Close</Button>\r\n                                        </Card>\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                            </Box>\r\n                        </div>\r\n                </Container>\r\n              \r\n            </Modal>\r\n        </>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}