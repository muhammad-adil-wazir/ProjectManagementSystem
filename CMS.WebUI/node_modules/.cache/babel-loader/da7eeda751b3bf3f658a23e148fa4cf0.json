{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\LFMS\\\\LFMS.WebUI\\\\src\\\\content\\\\pages\\\\Components\\\\CompanyType\\\\CompanyTypeForm.tsx\",\n    _s = $RefreshSig$();\n\n////import { Helmet } from 'react-helmet-async';\nimport { useState } from 'react';\nimport * as Yup from \"yup\";\nimport { post } from \"../../../../services/common.service\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { Button, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box, Modal } from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst label = {\n  inputProps: {\n    'aria-label': 'Switch demo'\n  }\n};\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 600,\n  bgcolor: 'background.paper',\n  //border: '2px solid #000',\n  boxShadow: 24,\n  p: 4\n};\nexport const CompanyTypeForm = _ref => {\n  _s();\n\n  let {\n    companyTypeData\n  } = _ref;\n  const [companyType, setcompanyType] = useState({\n    CompanyTypeName: \"abc\",\n    Remarks: \"\"\n  });\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  console.log(companyTypeData);\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => setOpen(true);\n\n  const handleClose = () => setOpen(false); //useEffect(() => {\n  //    setcompanyType(companyTypeData);\n  //    setOpen(true);\n  //}, [companyTypeData])\n\n\n  const initialValues = {\n    CompanyTypeName: \"\",\n    Remarks: \"\"\n  };\n  const validationSchema = Yup.object().shape({\n    companyTypeName: Yup.string().required('Company Type is required').min(2, 'Company Type must be at least 6 characters').max(200, 'Company Type must not exceed 200 characters'),\n    remarks: Yup.string().required('Remarks is required').min(2, 'Remarks must be at least 2 characters')\n  });\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(validationSchema)\n  });\n\n  const onSubmit = data => {\n    handleFormSubmit(data); //console.log(JSON.stringify(data, null, 2));\n  };\n\n  const handleFormSubmit = formValue => {\n    const {\n      CompanyTypeName,\n      Remarks\n    } = formValue;\n    setMessage(\"gbghihiou\");\n    setLoading(true);\n    post('master/AddCompanyType', formValue).then(response => {\n      // history.push(\"/profile\");\n      if (response.data.status == 'success') {\n        alert('done');\n      } //window.location.href = '/';\n\n    }, error => {\n      const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n      setLoading(false);\n      setMessage(resMessage);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      sx: {\n        margin: 1\n      },\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleOpen,\n      children: \"Open modal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"modal-modal-title\",\n      \"aria-describedby\": \"modal-modal-description\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: style,\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          maxWidth: \"md\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"register-form\",\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleSubmit(onSubmit),\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                direction: \"row\",\n                justifyContent: \"center\",\n                alignItems: \"stretch\",\n                spacing: 1,\n                children: /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(Card, {\n                    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n                      title: \"Enter Company Type Detail\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 124,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 125,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                      children: /*#__PURE__*/_jsxDEV(Box, {\n                        component: \"form\",\n                        sx: {\n                          '& .MuiTextField-root': {\n                            my: 1,\n                            width: '25ch'\n                          }\n                        },\n                        noValidate: true,\n                        autoComplete: \"off\",\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          children: /*#__PURE__*/_jsxDEV(TextField, {\n                            value: companyTypeData.CompanyTypeName,\n                            style: {\n                              width: '100%'\n                            },\n                            required: true,\n                            id: \"outlined-required\",\n                            label: \"Company Type\",\n                            ...register('CompanyTypeName'),\n                            className: `form-control ${errors.CompanyTypeName ? 'is-invalid' : ''}`\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 136,\n                            columnNumber: 57\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 135,\n                          columnNumber: 53\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: /*#__PURE__*/_jsxDEV(TextField, {\n                            style: {\n                              width: '100%'\n                            },\n                            required: true,\n                            id: \"outlined-password-input\",\n                            label: \"Remarks\",\n                            type: \"remarks\",\n                            multiline: true,\n                            rows: 2,\n                            maxRows: 4,\n                            autoComplete: \"current-password\",\n                            ...register('Remarks'),\n                            className: `form-control ${errors.Remarks ? 'is-invalid' : ''}`,\n                            value: companyType.Remarks\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 146,\n                            columnNumber: 57\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 145,\n                          columnNumber: 53\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 127,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 126,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      type: \"submit\",\n                      sx: {\n                        margin: 1\n                      },\n                      variant: \"contained\",\n                      color: \"primary\",\n                      children: \" Save\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 155,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      type: \"button\",\n                      onClick: () => reset(),\n                      sx: {\n                        margin: 1\n                      },\n                      variant: \"contained\",\n                      color: \"secondary\",\n                      children: \"Reset\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 156,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      type: \"submit\",\n                      sx: {\n                        margin: 1\n                      },\n                      variant: \"contained\",\n                      color: \"error\",\n                      onClick: handleClose,\n                      children: \" Close\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 160,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 123,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}; //export default CompanyTypeForm;\n\n_s(CompanyTypeForm, \"K4ocXmh4FNV48jlKg6uvak/ttHc=\", false, function () {\n  return [useForm];\n});\n\n_c = CompanyTypeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompanyTypeForm\");","map":{"version":3,"sources":["E:/Projects/LFMS/LFMS.WebUI/src/content/pages/Components/CompanyType/CompanyTypeForm.tsx"],"names":["useState","Yup","post","yupResolver","Button","Container","Grid","Card","CardHeader","CardContent","Divider","TextField","Box","Modal","useForm","label","inputProps","style","position","top","left","transform","width","bgcolor","boxShadow","p","CompanyTypeForm","companyTypeData","companyType","setcompanyType","CompanyTypeName","Remarks","loading","setLoading","message","setMessage","console","log","open","setOpen","handleOpen","handleClose","initialValues","validationSchema","object","shape","companyTypeName","string","required","min","max","remarks","register","handleSubmit","reset","formState","errors","resolver","onSubmit","data","handleFormSubmit","formValue","then","response","status","alert","error","resMessage","toString","margin","my"],"mappings":"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","sourcesContent":["////import { Helmet } from 'react-helmet-async';\r\nimport PageTitle from '../../../../components/PageTitle';\r\nimport { useEffect, useState } from 'react';\r\nimport * as Yup from \"yup\";\r\nimport { post} from \"../../../../services/common.service\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nimport PageTitleWrapper from '../../../../components/PageTitleWrapper';\r\nimport { Button, IconButton, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box, Modal, Typography } from '@mui/material';\r\nimport Footer from '../../../../components/Footer';\r\n\r\nimport Switch from '@mui/material/Switch';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nconst label = { inputProps: { 'aria-label': 'Switch demo' } };\r\n\r\nconst style = {\r\n    position: 'absolute' as 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 600,\r\n    bgcolor: 'background.paper',\r\n    //border: '2px solid #000',\r\n    boxShadow: 24,\r\n    p: 4,\r\n};\r\nexport type CompanyTypeModel = {\r\n    CompanyTypeID?: number;\r\n    CompanyTypeName: string;\r\n    Remarks: string;\r\n};\r\nexport const CompanyTypeForm: React.FC<CompanyTypeModel> = ({ companyTypeData }) => {\r\n    const [companyType, setcompanyType] = useState<CompanyTypeModel>({\r\n        CompanyTypeName: \"abc\",\r\n        Remarks: \"\",\r\n    });\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    console.log(companyTypeData);\r\n    const [open, setOpen] = useState(false);\r\n    const handleOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    //useEffect(() => {\r\n    //    setcompanyType(companyTypeData);\r\n    //    setOpen(true);\r\n    //}, [companyTypeData])\r\n\r\n    const initialValues: CompanyTypeModel = {\r\n        CompanyTypeName: \"\",\r\n        Remarks: \"\",\r\n    };\r\n  \r\n    const validationSchema = Yup.object().shape({\r\n        companyTypeName: Yup.string()\r\n            .required('Company Type is required')\r\n            .min(2, 'Company Type must be at least 6 characters')\r\n            .max(200, 'Company Type must not exceed 200 characters'),\r\n        remarks: Yup.string()\r\n            .required('Remarks is required')\r\n            .min(2, 'Remarks must be at least 2 characters')\r\n    });\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { errors }\r\n    } = useForm<CompanyTypeModel>({\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n    const onSubmit = (data: CompanyTypeModel) => {\r\n        handleFormSubmit(data);\r\n        //console.log(JSON.stringify(data, null, 2));\r\n    };\r\n    const handleFormSubmit = (formValue: { CompanyTypeName: string; Remarks: string }) => {\r\n        const { CompanyTypeName, Remarks } = formValue;\r\n        setMessage(\"gbghihiou\");\r\n        setLoading(true);\r\n        post('master/AddCompanyType', formValue).then(\r\n            (response: any) => {\r\n                // history.push(\"/profile\");\r\n                if (response.data.status == 'success') {\r\n                    alert('done');\r\n                }\r\n                //window.location.href = '/';\r\n            },\r\n            (error: any) => {\r\n                const resMessage =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setLoading(false);\r\n                setMessage(resMessage);\r\n            }\r\n        ); \r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button sx={{ margin: 1 }} variant=\"contained\" color=\"primary\" onClick={handleOpen}>Open modal</Button>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={style}>\r\n                    <Container maxWidth=\"md\">\r\n                        <div className=\"register-form\">\r\n                            <form onSubmit={handleSubmit(onSubmit)}>\r\n                                <Grid\r\n                                    container\r\n                                    direction=\"row\"\r\n                                    justifyContent=\"center\"\r\n                                    alignItems=\"stretch\"\r\n                                    spacing={1}\r\n                                >\r\n                                    <Grid item xs={12}>\r\n                                        <Card>\r\n                                            <CardHeader title=\"Enter Company Type Detail\" />\r\n                                            <Divider />\r\n                                            <CardContent>\r\n                                                <Box\r\n                                                    component=\"form\"\r\n                                                    sx={{\r\n                                                        '& .MuiTextField-root': { my: 1, width: '25ch' },\r\n                                                    }}\r\n                                                    noValidate\r\n                                                    autoComplete=\"off\"\r\n                                                >\r\n                                                    <div>\r\n                                                        <TextField value={companyTypeData!.CompanyTypeName }\r\n                                                            style={{ width: '100%' }}\r\n                                                            required\r\n                                                            id=\"outlined-required\"\r\n                                                            label=\"Company Type\"\r\n                                                            {...register('CompanyTypeName')}\r\n                                                            className={`form-control ${errors.CompanyTypeName ? 'is-invalid' : ''}`}\r\n                                                        />\r\n                                                    </div>\r\n                                                    <div>\r\n                                                        <TextField style={{ width: '100%' }} required\r\n                                                            id=\"outlined-password-input\" label=\"Remarks\" type=\"remarks\" multiline rows={2} maxRows={4} autoComplete=\"current-password\"\r\n                                                            {...register('Remarks')}\r\n                                                            className={`form-control ${errors.Remarks ? 'is-invalid' : ''}`}\r\n                                                            value={companyType!.Remarks}\r\n                                                        />\r\n                                                    </div>\r\n                                                </Box>\r\n                                            </CardContent>\r\n                                            <Button type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"primary\"> Save</Button>\r\n                                            <Button type=\"button\"\r\n                                                onClick={() => reset()} sx={{ margin: 1 }} variant=\"contained\" color=\"secondary\">\r\n                                                Reset\r\n                                            </Button>\r\n                                            <Button type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"error\" onClick={handleClose}> Close</Button>\r\n                                        </Card>\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                            </form>\r\n                        </div>\r\n                    </Container>\r\n                </Box>\r\n            </Modal>\r\n          \r\n\r\n        </>\r\n    );\r\n}\r\n\r\n//export default CompanyTypeForm;\r\n"]},"metadata":{},"sourceType":"module"}