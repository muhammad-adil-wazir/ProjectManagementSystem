{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\Rebartek\\\\cms.webui\\\\src\\\\content\\\\pages\\\\Components\\\\Lecture\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Grid, Container, Autocomplete, TextField, Snackbar, Alert, ListItem, Checkbox, ListItemIcon, ListItemText, List, Card, Divider, CardHeader, Button, CardContent } from '@mui/material';\nimport { useEffect, useRef, useState } from 'react';\nimport { LectureService } from '../../../../services/lecture.service';\nimport { ProfileService } from '../../../../services/profile.service';\nimport { DepartmentService } from '../../../../services/department.service';\nimport { UserService } from '../../../../services/user.service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction not(a, b) {\n  return a.filter(value => b.indexOf(value) === -1);\n}\n\nfunction intersection(a, b) {\n  return a.filter(value => b.indexOf(value) !== -1);\n}\n\nfunction union(a, b) {\n  return [...a, ...not(b, a)];\n}\n\nconst Lecture = () => {\n  _s();\n\n  const [allowedCredit, setAllowedCredit] = useState(0);\n  const [selectedCredit, setSelectedCredit] = useState(0);\n  const [openSuccessAlert, setopenSuccessAlert] = useState(false);\n  const [openErrorAlert, setopenErrorAlert] = useState(false);\n  const [messageSuccess, setMessageSuccess] = useState(\"\");\n  const [messageErorr, setMessageError] = useState(\"\");\n  const [isAdmin, setAdmin] = useState(false);\n  const [availableLectures, setAvailableLectures] = useState([]);\n  const [selectedLectures, setSelectedLectures] = useState([]);\n  const [departments, setDepartments] = useState([]);\n  const [selectedDepartment, setSelectedDepartment] = useState({\n    departmentName: ''\n  });\n  const [rerenderTableFlag, setrerenderTableFlag] = useState(false);\n  const userFormFunc = useRef(null);\n\n  const _profile = ProfileService.getProfile();\n\n  useEffect(() => {\n    DepartmentService.getAllDepartments().then(x => setDepartments(x));\n  }, []);\n  useEffect(() => {\n    if (departments.length > 0) {\n      setSelectedDepartment(departments.filter(x => x._id == (_profile === null || _profile === void 0 ? void 0 : _profile.DepartmentID))[0]);\n\n      if (_profile) {\n        if (_profile.RoleID == 1) {\n          setAdmin(true);\n          setAllowedCredit(64);\n          LectureService.getAllLectures().then(x => setAvailableLectures(x));\n        } else if (_profile.RoleID == 2) {\n          setAllowedCredit(14);\n          DepartmentService.getDepartmentByID(_profile.DepartmentID).then(x => {\n            let _selectedLectures = x[0].lectures;\n            setSelectedLectures(_selectedLectures);\n\n            let _selectedCredit = x[0].lectures.reduce((accumulator, current) => accumulator + current.credit, 0);\n\n            setSelectedCredit(_selectedCredit);\n            LectureService.getAllLectureByDepartmentID(_profile.DepartmentID).then(availableLecs => {\n              let _selectedLectureIDs = _selectedLectures.map(x => x._id);\n\n              let _availableLectures = new Array();\n\n              for (let i = 0; i < availableLecs.length; i++) {\n                if (_selectedLectureIDs.indexOf(availableLecs[i]._id) === -1) {\n                  _availableLectures.push(availableLecs[i]);\n                }\n              }\n\n              setAvailableLectures(_availableLectures);\n            });\n          });\n        } else if (_profile.RoleID == 3) {\n          // DepartmentService.getDepartmentByID(_profile.DepartmentID).then(x => {\n          //   setAvailableLectures(x[0].lectures!);\n          // }); \n          UserService.getUserById(_profile.UserID).then(x => {\n            let _selectedLectures = x[0].lectures;\n            setSelectedLectures(_selectedLectures);\n\n            let _selectedCredit = x[0].lectures.reduce((accumulator, current) => accumulator + current.credit, 0);\n\n            setSelectedCredit(_selectedCredit);\n            DepartmentService.getDepartmentByID(_profile.DepartmentID).then(availableLecs => {\n              let _selectedLectureIDs = _selectedLectures.map(x => x._id);\n\n              let _availableLectures = new Array();\n\n              for (let i = 0; i < availableLecs[0].lectures.length; i++) {\n                if (_selectedLectureIDs.indexOf(availableLecs[0].lectures[i]._id) === -1) {\n                  _availableLectures.push(availableLecs[0].lectures[i]);\n                }\n              }\n\n              setAvailableLectures(_availableLectures);\n            });\n\n            if (x[0].gpa >= 3.5) {\n              setAllowedCredit(40);\n            } else if (x[0].gpa >= 3 && x[0].gpa < 3.5) {\n              setAllowedCredit(35);\n            } else if (x[0].gpa < 3) {\n              setAllowedCredit(30);\n            }\n          });\n        }\n      }\n    }\n  }, [departments]);\n\n  const handleAlertClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setopenSuccessAlert(false);\n    setopenErrorAlert(false);\n  };\n\n  const rerenderLectureTable = () => {\n    setrerenderTableFlag(true);\n  };\n\n  const [checked, setChecked] = useState([]); //const [left, setLeft] = useState<readonly LectureModel[]>([0, 1, 2, 3]);\n  //const [right, setRight] = useState<readonly LectureModel[]>([4, 5, 6, 7]);\n\n  const leftChecked = intersection(checked, availableLectures);\n  const rightChecked = intersection(checked, selectedLectures);\n\n  const handleToggle = value => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  const numberOfChecked = items => intersection(checked, items).length;\n\n  const handleToggleAll = items => () => {\n    if (numberOfChecked(items) === items.length) {\n      setChecked(not(checked, items));\n    } else {\n      setChecked(union(checked, items));\n    }\n  };\n\n  const handleCheckedRight = () => {\n    //if(_profile?.RoleID === 1 || _profile?.RoleID === 2){\n    let _newlySelectedCredit = leftChecked.reduce((previous, current) => previous + current.credit, 0);\n\n    if (selectedCredit + _newlySelectedCredit > allowedCredit) {\n      setopenErrorAlert(true);\n      setMessageError(\"Max Allowed Credit: \" + allowedCredit);\n    } //}\n    else {\n      setSelectedLectures(selectedLectures.concat(leftChecked));\n      setAvailableLectures(not(availableLectures, leftChecked));\n      setChecked(not(checked, leftChecked));\n      setSelectedCredit(selectedCredit + _newlySelectedCredit);\n    }\n  };\n\n  const handleCheckedLeft = () => {\n    if (selectedCredit > 0) {\n      let _newlySelectedCredit = rightChecked.reduce((previous, current) => previous + current.credit, 0);\n\n      setSelectedCredit(selectedCredit - _newlySelectedCredit);\n    }\n\n    setAvailableLectures(availableLectures.concat(rightChecked));\n    setSelectedLectures(not(selectedLectures, rightChecked));\n    setChecked(not(checked, rightChecked));\n  };\n\n  const handleClickSave = () => {\n    if (selectedDepartment == undefined) {\n      setopenErrorAlert(true);\n      setMessageError(\"Please select a department\");\n      return;\n    }\n\n    if (selectedCredit < 1) {\n      setopenErrorAlert(true);\n      setMessageError(\"Please select a Lecture\");\n      return;\n    }\n\n    if ((_profile === null || _profile === void 0 ? void 0 : _profile.RoleID) === 1 || (_profile === null || _profile === void 0 ? void 0 : _profile.RoleID) === 2) {\n      let _payload = {\n        departmentId: _profile === null || _profile === void 0 ? void 0 : _profile.DepartmentID,\n        lectures: selectedLectures\n      };\n      DepartmentService.updateDepartmentLectures(_payload).then(x => {\n        if (x) {\n          setopenSuccessAlert(true);\n          setMessageSuccess(\"Successfully Saved Lectures!\");\n        } else {\n          setopenErrorAlert(true);\n          setMessageError(\"Something went wrong, Please try again later\");\n        }\n      });\n    } else if ((_profile === null || _profile === void 0 ? void 0 : _profile.RoleID) === 3) {\n      let _payload = {\n        userId: _profile === null || _profile === void 0 ? void 0 : _profile.UserID,\n        lectures: selectedLectures\n      };\n      UserService.updateUserLectures(_payload).then(x => {\n        if (x) {\n          setopenSuccessAlert(true);\n          setMessageSuccess(\"Successfully Saved Lectures!\");\n        } else {\n          setopenErrorAlert(true);\n          setMessageError(\"Something went wrong, Please try again later\");\n        }\n      });\n    }\n  };\n\n  const customList = (title, items) => /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      sx: {\n        px: 2,\n        py: 1\n      },\n      avatar: /*#__PURE__*/_jsxDEV(Checkbox, {\n        onClick: handleToggleAll(items),\n        checked: numberOfChecked(items) === items.length && items.length !== 0,\n        indeterminate: numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0,\n        disabled: items.length === 0,\n        inputProps: {\n          'aria-label': 'all items selected'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this),\n      title: title,\n      subheader: `${numberOfChecked(items)}/${items.length} selected`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      sx: {\n        height: 330,\n        bgcolor: 'background.paper',\n        overflow: 'auto'\n      },\n      dense: true,\n      component: \"div\",\n      role: \"list\",\n      children: [items.map(lecture => {\n        const labelId = `transfer-list-all-item-${lecture}-label`;\n        return /*#__PURE__*/_jsxDEV(ListItem, {\n          role: \"listitem\",\n          button: true,\n          onClick: handleToggle(lecture),\n          children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n            children: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: checked.indexOf(lecture) !== -1,\n              tabIndex: -1,\n              disableRipple: true,\n              inputProps: {\n                'aria-labelledby': labelId\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n            id: labelId,\n            primary: `${lecture.lectureName} (Credit:${lecture.credit})`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 15\n          }, this)]\n        }, lecture._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(ListItem, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Snackbar, {\n      open: openSuccessAlert,\n      autoHideDuration: 5000,\n      onClose: handleAlertClose,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleAlertClose,\n        variant: \"filled\",\n        severity: \"success\",\n        sx: {\n          width: '100%'\n        },\n        children: messageSuccess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: openErrorAlert,\n      autoHideDuration: 5000,\n      onClose: handleAlertClose,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleAlertClose,\n        variant: \"filled\",\n        severity: \"error\",\n        sx: {\n          width: '100%'\n        },\n        children: messageErorr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        m: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        title: \"Lecture Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          maxWidth: \"lg\",\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            justifyContent: \"center\",\n            alignItems: \"stretch\",\n            spacing: 3,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                disabled: isAdmin == false,\n                onChange: (event, newValue) => {\n                  setSelectedDepartment(newValue);\n                },\n                value: selectedDepartment,\n                disablePortal: true,\n                style: {\n                  width: '94%'\n                },\n                id: \"drpDepartments\",\n                options: departments,\n                getOptionLabel: departments => departments.departmentName,\n                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                  style: {\n                    width: '100%'\n                  },\n                  ...params,\n                  label: \"Department\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 299,\n                  columnNumber: 54\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              sx: {\n                textAlign: \"right\"\n              },\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"button\",\n                onClick: () => handleClickSave(),\n                sx: {\n                  height: \"53px\",\n                  padding: 1\n                },\n                variant: \"contained\",\n                color: \"primary\",\n                children: \" Save \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              hidden: selectedDepartment == undefined,\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  margin: 0\n                },\n                children: [\"Max Allowed Credit: \", /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: allowedCredit\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 306,\n                  columnNumber: 69\n                }, this), \", Selected Credit: \", /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: selectedCredit\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 306,\n                  columnNumber: 110\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 27\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              hidden: selectedDepartment == undefined,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                spacing: 2,\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 5.6,\n                  children: customList('Lecture Choices', availableLectures)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(Grid, {\n                    container: true,\n                    direction: \"column\",\n                    alignItems: \"center\",\n                    children: [/*#__PURE__*/_jsxDEV(Button, {\n                      sx: {\n                        my: 0.5\n                      },\n                      variant: \"outlined\",\n                      size: \"small\",\n                      onClick: handleCheckedRight,\n                      disabled: leftChecked.length === 0,\n                      \"aria-label\": \"move selected right\",\n                      children: \">\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 313,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      sx: {\n                        my: 0.5\n                      },\n                      variant: \"outlined\",\n                      size: \"small\",\n                      onClick: handleCheckedLeft,\n                      disabled: rightChecked.length === 0,\n                      \"aria-label\": \"move selected left\",\n                      children: \"<\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 323,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 312,\n                    columnNumber: 29\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 311,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 5.5,\n                  children: customList('Chosen Lectures', selectedLectures)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 335,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Lecture, \"hBjQmJRqYnwh8LQLJsZZ+xYknmU=\");\n\n_c = Lecture;\nexport default Lecture;\n\nvar _c;\n\n$RefreshReg$(_c, \"Lecture\");","map":{"version":3,"sources":["E:/Projects/Rebartek/cms.webui/src/content/pages/Components/Lecture/index.tsx"],"names":["Grid","Container","Autocomplete","TextField","Snackbar","Alert","ListItem","Checkbox","ListItemIcon","ListItemText","List","Card","Divider","CardHeader","Button","CardContent","useEffect","useRef","useState","LectureService","ProfileService","DepartmentService","UserService","not","a","b","filter","value","indexOf","intersection","union","Lecture","allowedCredit","setAllowedCredit","selectedCredit","setSelectedCredit","openSuccessAlert","setopenSuccessAlert","openErrorAlert","setopenErrorAlert","messageSuccess","setMessageSuccess","messageErorr","setMessageError","isAdmin","setAdmin","availableLectures","setAvailableLectures","selectedLectures","setSelectedLectures","departments","setDepartments","selectedDepartment","setSelectedDepartment","departmentName","rerenderTableFlag","setrerenderTableFlag","userFormFunc","_profile","getProfile","getAllDepartments","then","x","length","_id","DepartmentID","RoleID","getAllLectures","getDepartmentByID","_selectedLectures","lectures","_selectedCredit","reduce","accumulator","current","credit","getAllLectureByDepartmentID","availableLecs","_selectedLectureIDs","map","_availableLectures","Array","i","push","getUserById","UserID","gpa","handleAlertClose","event","reason","rerenderLectureTable","checked","setChecked","leftChecked","rightChecked","handleToggle","currentIndex","newChecked","splice","numberOfChecked","items","handleToggleAll","handleCheckedRight","_newlySelectedCredit","previous","concat","handleCheckedLeft","handleClickSave","undefined","_payload","departmentId","updateDepartmentLectures","userId","updateUserLectures","customList","title","px","py","height","bgcolor","overflow","lecture","labelId","lectureName","width","m","newValue","params","textAlign","padding","margin","my"],"mappings":"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","sourcesContent":["import { Grid, Container, Autocomplete, TextField, Snackbar, Alert, ListItem, Checkbox, ListItemIcon, ListItemText, List, Card, Divider, CardHeader, Button, CardContent } from '@mui/material';\r\nimport { MouseEventHandler, useEffect, useRef, useState } from 'react';\r\nimport LectureTable from './LectureTable';\r\nimport { DepartmentModel, LectureModel } from '../../../../types/master.type';\r\nimport { LectureService } from '../../../../services/lecture.service';\r\nimport { ProfileService } from '../../../../services/profile.service';\r\nimport { DepartmentService } from '../../../../services/department.service';\r\nimport { UserService } from '../../../../services/user.service';\r\n\r\nfunction not(a: readonly LectureModel[], b: readonly LectureModel[]) {\r\n    return a.filter((value) => b.indexOf(value) === -1);\r\n  }\r\n  \r\n  function intersection(a: readonly LectureModel[], b: readonly LectureModel[]) {\r\n    return a.filter((value) => b.indexOf(value) !== -1);\r\n  }\r\n  \r\n  function union(a: readonly LectureModel[], b: readonly LectureModel[]) {\r\n    return [...a, ...not(b, a)];\r\n  }\r\n\r\nconst Lecture = () => {\r\n    const [allowedCredit,setAllowedCredit] = useState<number>(0);\r\n    const [selectedCredit,setSelectedCredit] = useState<number>(0);\r\n    const [openSuccessAlert, setopenSuccessAlert] = useState<boolean>(false);\r\n    const [openErrorAlert, setopenErrorAlert] = useState<boolean>(false);\r\n    const [messageSuccess, setMessageSuccess] = useState<string>(\"\");\r\n    const [messageErorr, setMessageError] = useState<string>(\"\");\r\n\r\n    const [isAdmin, setAdmin] = useState<boolean>(false);\r\n    const [availableLectures, setAvailableLectures] = useState<LectureModel[]>([]);\r\n    const [selectedLectures, setSelectedLectures] = useState<LectureModel[]>([]);\r\n    const [departments, setDepartments] = useState<DepartmentModel[]>([]);\r\n    const [selectedDepartment, setSelectedDepartment] = useState<DepartmentModel>({departmentName:''});\r\n    const [rerenderTableFlag, setrerenderTableFlag] = useState<boolean>(false);\r\n    const userFormFunc = useRef<any>(null)\r\n    const _profile = ProfileService.getProfile();\r\n    useEffect(() => {\r\n     DepartmentService.getAllDepartments().then(x => setDepartments(x) );\r\n    },[]);\r\n    useEffect(() => {\r\n      if(departments.length > 0){\r\n        setSelectedDepartment(departments.filter(x => x._id == _profile?.DepartmentID)[0]);\r\n      if(_profile){\r\n        if(_profile.RoleID == 1){\r\n          setAdmin(true);\r\n          setAllowedCredit(64);\r\n\r\n          LectureService.getAllLectures().then(x => setAvailableLectures(x));\r\n        }\r\n        else if(_profile.RoleID == 2){\r\n          setAllowedCredit(14);\r\n          \r\n          DepartmentService.getDepartmentByID(_profile.DepartmentID).then(x => {\r\n            let _selectedLectures = x[0].lectures!;\r\n            setSelectedLectures(_selectedLectures);\r\n            let _selectedCredit = x[0].lectures!.reduce((accumulator, current) => accumulator + current.credit, 0);\r\n            setSelectedCredit(_selectedCredit);\r\n            LectureService.getAllLectureByDepartmentID(_profile.DepartmentID).then(availableLecs => {\r\n              let _selectedLectureIDs = _selectedLectures.map(x => x._id);\r\n              let _availableLectures: LectureModel[] = new Array();\r\n              for(let i=0;i<availableLecs.length;i++){\r\n                if(_selectedLectureIDs.indexOf(availableLecs[i]._id) === -1){\r\n                  _availableLectures.push(availableLecs[i]);\r\n                }\r\n              }\r\n              setAvailableLectures(_availableLectures);\r\n            });\r\n        });\r\n      }\r\n        else if(_profile.RoleID == 3){\r\n          \r\n          // DepartmentService.getDepartmentByID(_profile.DepartmentID).then(x => {\r\n          //   setAvailableLectures(x[0].lectures!);\r\n          // }); \r\n          UserService.getUserById(_profile.UserID).then(x => {\r\n            let _selectedLectures = x[0].lectures!;\r\n            setSelectedLectures(_selectedLectures);\r\n            let _selectedCredit = x[0].lectures!.reduce((accumulator, current) => accumulator + current.credit, 0);\r\n            setSelectedCredit(_selectedCredit);\r\n            DepartmentService.getDepartmentByID(_profile.DepartmentID).then(availableLecs => {\r\n              let _selectedLectureIDs = _selectedLectures.map(x => x._id);\r\n              let _availableLectures: LectureModel[] = new Array();\r\n              for(let i=0;i<availableLecs[0].lectures.length;i++){\r\n                if(_selectedLectureIDs.indexOf(availableLecs[0].lectures[i]._id) === -1){\r\n                  _availableLectures.push(availableLecs[0].lectures[i]);\r\n                }\r\n              }\r\n              setAvailableLectures(_availableLectures);\r\n            });\r\n            if(x[0].gpa >= 3.5){\r\n              setAllowedCredit(40);\r\n            }\r\n            else if(x[0].gpa >= 3 && x[0].gpa < 3.5){\r\n              setAllowedCredit(35);\r\n            }\r\n            else if(x[0].gpa < 3){\r\n              setAllowedCredit(30);\r\n            }\r\n          }); \r\n      }\r\n    }\r\n      }\r\n      \r\n    },[departments]);\r\n    const handleAlertClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setopenSuccessAlert(false);\r\n        setopenErrorAlert(false);\r\n    };\r\n    const rerenderLectureTable = () => {\r\n        setrerenderTableFlag(true);\r\n    }\r\n\r\n  const [checked, setChecked] = useState<readonly LectureModel[]>([]);\r\n  //const [left, setLeft] = useState<readonly LectureModel[]>([0, 1, 2, 3]);\r\n  //const [right, setRight] = useState<readonly LectureModel[]>([4, 5, 6, 7]);\r\n\r\n  const leftChecked = intersection(checked, availableLectures);\r\n  const rightChecked = intersection(checked, selectedLectures);\r\n\r\n  const handleToggle = (value: LectureModel) => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  const numberOfChecked = (items: readonly LectureModel[]) =>\r\n    intersection(checked, items).length;\r\n\r\n  const handleToggleAll = (items: readonly LectureModel[]) => () => {\r\n    if (numberOfChecked(items) === items.length) {\r\n      setChecked(not(checked, items));\r\n    } else {\r\n      setChecked(union(checked, items));\r\n    }\r\n  };\r\n\r\n  const handleCheckedRight = () => {\r\n    //if(_profile?.RoleID === 1 || _profile?.RoleID === 2){\r\n      let _newlySelectedCredit: number = leftChecked.reduce((previous,current) => previous + current.credit,0);\r\n      if((selectedCredit + _newlySelectedCredit) > allowedCredit){\r\n        setopenErrorAlert(true);\r\n        setMessageError(\"Max Allowed Credit: \" + allowedCredit);\r\n      }\r\n    //}\r\n    else{\r\n      setSelectedLectures(selectedLectures.concat(leftChecked));\r\n      setAvailableLectures(not(availableLectures, leftChecked));\r\n      setChecked(not(checked, leftChecked));\r\n      setSelectedCredit(selectedCredit + _newlySelectedCredit);\r\n    }\r\n    \r\n  };\r\n\r\n  const handleCheckedLeft = () => {\r\n    if(selectedCredit > 0){\r\n      let _newlySelectedCredit: number = rightChecked.reduce((previous,current) => previous + current.credit,0);\r\n      setSelectedCredit(selectedCredit - _newlySelectedCredit);\r\n    }\r\n    setAvailableLectures(availableLectures.concat(rightChecked));\r\n    setSelectedLectures(not(selectedLectures, rightChecked));\r\n    setChecked(not(checked, rightChecked));\r\n  };\r\n\r\n  const handleClickSave = () => {\r\n    if(selectedDepartment == undefined){\r\n      setopenErrorAlert(true);\r\n      setMessageError(\"Please select a department\");\r\n      return;\r\n    }\r\n    if(selectedCredit < 1){\r\n      setopenErrorAlert(true);\r\n      setMessageError(\"Please select a Lecture\");\r\n      return;\r\n    }\r\n   \r\n    if(_profile?.RoleID === 1 || _profile?.RoleID === 2){\r\n      let _payload = {departmentId: _profile?.DepartmentID, lectures: selectedLectures};\r\n      DepartmentService.updateDepartmentLectures(_payload).then(x => {\r\n        if(x){\r\n          setopenSuccessAlert(true);\r\n          setMessageSuccess(\"Successfully Saved Lectures!\");\r\n        }\r\n        else{\r\n          setopenErrorAlert(true);\r\n          setMessageError(\"Something went wrong, Please try again later\");\r\n        }\r\n      });\r\n    }\r\n    else if(_profile?.RoleID === 3){\r\n      let _payload = {userId: _profile?.UserID, lectures: selectedLectures};\r\n      UserService.updateUserLectures(_payload).then(x => {\r\n        if(x){\r\n          setopenSuccessAlert(true);\r\n          setMessageSuccess(\"Successfully Saved Lectures!\");\r\n        }\r\n        else{\r\n          setopenErrorAlert(true);\r\n          setMessageError(\"Something went wrong, Please try again later\");\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const customList = (title: React.ReactNode, items: readonly LectureModel[]) => (\r\n    <Card>\r\n      <CardHeader\r\n        sx={{ px: 2, py: 1 }}\r\n        avatar={\r\n          <Checkbox\r\n            onClick={handleToggleAll(items)}\r\n            checked={numberOfChecked(items) === items.length && items.length !== 0}\r\n            indeterminate={\r\n              numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0\r\n            }\r\n            disabled={items.length === 0}\r\n            inputProps={{\r\n              'aria-label': 'all items selected',\r\n            }}\r\n          />\r\n        }\r\n        title={title}\r\n        subheader={`${numberOfChecked(items)}/${items.length} selected`}\r\n      />\r\n      <Divider />\r\n      <List\r\n        sx={{\r\n         \r\n          height: 330,\r\n          bgcolor: 'background.paper',\r\n          overflow: 'auto',\r\n        }}\r\n        dense\r\n        component=\"div\"\r\n        role=\"list\"\r\n      >\r\n        {items.map((lecture: LectureModel) => {\r\n          const labelId = `transfer-list-all-item-${lecture}-label`;\r\n\r\n          return (\r\n            <ListItem\r\n              key={lecture._id}\r\n              role=\"listitem\"\r\n              button\r\n              onClick={handleToggle(lecture)}\r\n            >\r\n              <ListItemIcon>\r\n                <Checkbox\r\n                  checked={checked.indexOf(lecture) !== -1}\r\n                  tabIndex={-1}\r\n                  disableRipple\r\n                  inputProps={{\r\n                    'aria-labelledby': labelId,\r\n                  }}\r\n                />\r\n              </ListItemIcon>\r\n              <ListItemText id={labelId} primary={`${lecture.lectureName} (Credit:${lecture.credit})`} />\r\n            </ListItem>\r\n          );\r\n        })}\r\n        <ListItem />\r\n      </List>\r\n    </Card>\r\n  );\r\n    return (\r\n        <>\r\n         <Snackbar open={openSuccessAlert} autoHideDuration={5000} onClose={handleAlertClose}>\r\n                <Alert onClose={handleAlertClose} variant=\"filled\" severity=\"success\" sx={{ width: '100%' }}>\r\n                    {messageSuccess}\r\n                </Alert>\r\n            </Snackbar>\r\n            <Snackbar open={openErrorAlert} autoHideDuration={5000} onClose={handleAlertClose}>\r\n                <Alert onClose={handleAlertClose} variant=\"filled\" severity=\"error\" sx={{ width: '100%' }}>\r\n                    {messageErorr}\r\n                </Alert>\r\n            </Snackbar>\r\n            <Card sx={{m:3}}>\r\n            <CardHeader title=\"Lecture Selection\" />\r\n                <CardContent>\r\n                <Container maxWidth=\"lg\">\r\n                <Grid container direction=\"row\" justifyContent=\"center\" alignItems=\"stretch\" spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <Autocomplete disabled={isAdmin == false}\r\n                            onChange={(event, newValue) => {\r\n                                setSelectedDepartment(newValue!);\r\n                            }}\r\n                            value={selectedDepartment} disablePortal style={{ width: '94%' }}\r\n                            id=\"drpDepartments\" options={departments} getOptionLabel={departments => departments.departmentName}\r\n                            renderInput={(params) => <TextField style={{ width: '100%' }} {...params} label=\"Department\" />}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6} sx={{textAlign:\"right\"}}>\r\n                        <Button type=\"button\" onClick={() => handleClickSave()} sx={{ height:\"53px\",padding:1}} variant=\"contained\" color=\"primary\"> Save </Button>\r\n                    </Grid>\r\n                    <Grid item xs={12}  hidden={selectedDepartment == undefined}>\r\n                          <p style={{margin:0}}>Max Allowed Credit: <b>{allowedCredit}</b>, Selected Credit: <b>{selectedCredit}</b></p>\r\n                    </Grid>\r\n                    <Grid item xs={12}  hidden={selectedDepartment == undefined}>\r\n                    <Grid container spacing={2} justifyContent=\"center\" alignItems=\"center\">\r\n                        <Grid item xs={5.6}>{customList('Lecture Choices', availableLectures)}</Grid>\r\n                            <Grid item>\r\n                            <Grid container direction=\"column\" alignItems=\"center\">\r\n                            <Button\r\n                                sx={{ my: 0.5 }}\r\n                                variant=\"outlined\"\r\n                                size=\"small\"\r\n                                onClick={handleCheckedRight}\r\n                                disabled={leftChecked.length === 0}\r\n                                aria-label=\"move selected right\"\r\n                            >\r\n                                &gt;\r\n                            </Button>\r\n                            <Button\r\n                                sx={{ my: 0.5 }}\r\n                                variant=\"outlined\"\r\n                                size=\"small\"\r\n                                onClick={handleCheckedLeft}\r\n                                disabled={rightChecked.length === 0}\r\n                                aria-label=\"move selected left\"\r\n                            >\r\n                                &lt;\r\n                            </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item  xs={5.5}>{customList('Chosen Lectures', selectedLectures)}</Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n                </CardContent>\r\n            </Card>\r\n           \r\n        </>\r\n    );\r\n}\r\n\r\nexport default Lecture;\r\n"]},"metadata":{},"sourceType":"module"}