{"ast":null,"code":"import { Get } from './common.service';\nexport const dropdowns = {\n  getAllDirectorTypes: async () => {\n    return await Get('Master/GetAllDirectorTypes').then(x => {\n      if (x.data.status == 'success') {\n        return x.data.directorTypes;\n      } else {\n        return [];\n      }\n    });\n  },\n  getAllDesignations: async () => {\n    return await Get('Master/getAllDesignations').then(x => {\n      if (x.data.status == 'success') {\n        return x.data.designations;\n      } else {\n        return [];\n      }\n    });\n  },\n  getAllNationalities: async () => {\n    return await Get('Master/getAllNationalities').then(x => {\n      if (x.data.status == 'success') {\n        return x.data.nationalities;\n      } else {\n        return [];\n      }\n    });\n  },\n  getAllPlaceOfBirths: async () => {\n    return await Get('Master/getAllPlaceOfBirths').then(x => {\n      if (x.data.status == 'success') {\n        return x.data.placeOfBirths;\n      } else {\n        return [];\n      }\n    });\n  },\n  getAllIDTypes: async () => {\n    return await Get('Master/getAllIDTypes').then(x => {\n      if (x.data.status == 'success') {\n        return x.data.iDTypes;\n      } else {\n        return [];\n      }\n    });\n  },\n  getAllRoles: async () => {\n    return await Get('Security/getAllRoles').then(x => {\n      if (x.data.status == 'success') {\n        return x.data.roles;\n      } else {\n        return [];\n      }\n    });\n  },\n  getAllLocations: async () => {\n    return await Get('Security/getAllLocations').then(x => {\n      if (x.data.status == 'success') {\n        return x.data.locations;\n      } else {\n        return [];\n      }\n    });\n  },\n  GetAllLocationsForLogin: async () => {\n    return await Get('Security/GetAllLocationsForLogin').then(x => {\n      if (x.data.status == 'success') {\n        return x.data.locations;\n      } else {\n        return [];\n      }\n    });\n  }\n};","map":{"version":3,"sources":["E:/Projects/Rebartek/cms.webui/src/services/dropdowns.service.ts"],"names":["Get","dropdowns","getAllDirectorTypes","then","x","data","status","directorTypes","getAllDesignations","designations","getAllNationalities","nationalities","getAllPlaceOfBirths","placeOfBirths","getAllIDTypes","iDTypes","getAllRoles","roles","getAllLocations","locations","GetAllLocationsForLogin"],"mappings":"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","sourcesContent":["import { Get, Post } from './common.service';\r\nimport { DesignationModel, DirectorTypeModel, IDTypeModel, NationalityModel, PlaceOfBirthModel } from '../types/master.type';\r\nimport { LocationModel, RoleModel } from '../types/security.type';\r\n\r\nexport const dropdowns = {\r\n    getAllDirectorTypes: async (): Promise<DirectorTypeModel[]> => {\r\n        return await Get('Master/GetAllDirectorTypes').then(x => {\r\n            if (x.data.status == 'success') {\r\n                return x.data.directorTypes;\r\n            }\r\n            else {\r\n                return [];\r\n            }\r\n        });\r\n    },\r\n    getAllDesignations: async (): Promise<DesignationModel[]> => {\r\n        return await Get('Master/getAllDesignations').then(x => {\r\n            if (x.data.status == 'success') {\r\n                return x.data.designations;\r\n            }\r\n            else {\r\n                return [];\r\n            }\r\n        });\r\n    },\r\n    getAllNationalities: async (): Promise<NationalityModel[]> => {\r\n        return await Get('Master/getAllNationalities').then(x => {\r\n            if (x.data.status == 'success') {\r\n                return x.data.nationalities;\r\n            }\r\n            else {\r\n                return [];\r\n            }\r\n        });\r\n    },\r\n    getAllPlaceOfBirths: async (): Promise<PlaceOfBirthModel[]> => {\r\n        return await Get('Master/getAllPlaceOfBirths').then(x => {\r\n            if (x.data.status == 'success') {\r\n                return x.data.placeOfBirths;\r\n            }\r\n            else {\r\n                return [];\r\n            }\r\n        });\r\n    },\r\n    getAllIDTypes: async (): Promise<IDTypeModel[]> => {\r\n        return await Get('Master/getAllIDTypes').then(x => {\r\n            if (x.data.status == 'success') {\r\n                return x.data.iDTypes;\r\n            }\r\n            else {\r\n                return [];\r\n            }\r\n        });\r\n    },\r\n    getAllRoles: async (): Promise<RoleModel[]> => {\r\n        return await Get('Security/getAllRoles').then(x => {\r\n            if (x.data.status == 'success') {\r\n                return x.data.roles;\r\n            }\r\n            else {\r\n                return [];\r\n            }\r\n        });\r\n    },\r\n    getAllLocations: async (): Promise<LocationModel[]> => {\r\n        return await Get('Security/getAllLocations').then(x => {\r\n            if (x.data.status == 'success') {\r\n                return x.data.locations;\r\n            }\r\n            else {\r\n                return [];\r\n            }\r\n        });\r\n    },\r\n    GetAllLocationsForLogin: async (): Promise<LocationModel[]> => {\r\n        return await Get('Security/GetAllLocationsForLogin').then(x => {\r\n            if (x.data.status == 'success') {\r\n                return x.data.locations;\r\n            }\r\n            else {\r\n                return [];\r\n            }\r\n        });\r\n    },\r\n    \r\n}\r\n"]},"metadata":{},"sourceType":"module"}