{"ast":null,"code":"export function ProfileService() {\n  return {\n    setProfile: profile => {\n      if (profile != undefined) {\n        sessionStorage.setItem('UserID', profile.UserID.toString());\n        sessionStorage.setItem('UserName', profile.UserName);\n        sessionStorage.setItem('RoleID', profile.RoleID.toString());\n        sessionStorage.setItem('RoleName', profile.RoleName);\n        sessionStorage.setItem('Token', profile.Token.toString());\n        sessionStorage.setItem('Expiration', profile.Expiration.toString());\n        sessionStorage.setItem('ConfigID', profile.ConfigID.toString());\n      }\n    },\n    resetProfile: profile => {\n      if (profile != undefined) {\n        sessionStorage.removeItem('UserID');\n        sessionStorage.removeItem('UserName');\n        sessionStorage.removeItem('RoleID');\n        sessionStorage.removeItem('RoleName');\n        sessionStorage.removeItem('Token');\n        sessionStorage.removeItem('Expiration');\n        sessionStorage.removeItem('ConfigID');\n      }\n    },\n    getProfile: () => {\n      let profile = {\n        UserID: parseInt(sessionStorage.getItem('UserID')),\n        UserName: sessionStorage.getItem('UserName'),\n        RoleID: parseInt(sessionStorage.getItem('RoleID')),\n        RoleName: sessionStorage.getItem('RoleName'),\n        Token: sessionStorage.getItem('Token'),\n        Expiration: new Date(sessionStorage.getItem('Expiration')),\n        ConfigID: parseInt(sessionStorage.getItem('ConfigID'))\n      };\n      return profile;\n    },\n    isAuthencticated: () => {\n      return sessionStorage.getItem('Token') != null;\n    }\n  };\n}\n_c = ProfileService;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileService\");","map":{"version":3,"sources":["E:/Projects/LFMS/LFMS.WebUI/src/services/profile.service.ts"],"names":["ProfileService","setProfile","profile","undefined","sessionStorage","setItem","UserID","toString","UserName","RoleID","RoleName","Token","Expiration","ConfigID","resetProfile","removeItem","getProfile","parseInt","getItem","Date","isAuthencticated"],"mappings":"AAEA,OAAO,SAAUA,cAAV,GAA2B;AAC9B,SAAO;AACFC,IAAAA,UAAU,EAAIC,OAAD,IAAsB;AAChC,UAAIA,OAAO,IAAIC,SAAf,EAA0B;AACtBC,QAAAA,cAAc,CAACC,OAAf,CAAuB,QAAvB,EAAiCH,OAAO,CAACI,MAAR,CAAeC,QAAf,EAAjC;AACAH,QAAAA,cAAc,CAACC,OAAf,CAAuB,UAAvB,EAAmCH,OAAO,CAACM,QAA3C;AACAJ,QAAAA,cAAc,CAACC,OAAf,CAAuB,QAAvB,EAAiCH,OAAO,CAACO,MAAR,CAAeF,QAAf,EAAjC;AACAH,QAAAA,cAAc,CAACC,OAAf,CAAuB,UAAvB,EAAmCH,OAAO,CAACQ,QAA3C;AACAN,QAAAA,cAAc,CAACC,OAAf,CAAuB,OAAvB,EAAgCH,OAAO,CAACS,KAAR,CAAcJ,QAAd,EAAhC;AACAH,QAAAA,cAAc,CAACC,OAAf,CAAuB,YAAvB,EAAqCH,OAAO,CAACU,UAAR,CAAmBL,QAAnB,EAArC;AACAH,QAAAA,cAAc,CAACC,OAAf,CAAuB,UAAvB,EAAmCH,OAAO,CAACW,QAAR,CAAiBN,QAAjB,EAAnC;AACH;AACJ,KAXE;AAYHO,IAAAA,YAAY,EAAGZ,OAAD,IAAsB;AAChC,UAAIA,OAAO,IAAIC,SAAf,EAA0B;AACtBC,QAAAA,cAAc,CAACW,UAAf,CAA0B,QAA1B;AACAX,QAAAA,cAAc,CAACW,UAAf,CAA0B,UAA1B;AACAX,QAAAA,cAAc,CAACW,UAAf,CAA0B,QAA1B;AACAX,QAAAA,cAAc,CAACW,UAAf,CAA0B,UAA1B;AACAX,QAAAA,cAAc,CAACW,UAAf,CAA0B,OAA1B;AACAX,QAAAA,cAAc,CAACW,UAAf,CAA0B,YAA1B;AACAX,QAAAA,cAAc,CAACW,UAAf,CAA0B,UAA1B;AACH;AACJ,KAtBE;AAuBHC,IAAAA,UAAU,EAAG,MAAM;AACf,UAAId,OAAgB,GAAG;AACnBI,QAAAA,MAAM,EAAEW,QAAQ,CAACb,cAAc,CAACc,OAAf,CAAuB,QAAvB,CAAD,CADG;AAEnBV,QAAAA,QAAQ,EAAEJ,cAAc,CAACc,OAAf,CAAuB,UAAvB,CAFS;AAGnBT,QAAAA,MAAM,EAAEQ,QAAQ,CAACb,cAAc,CAACc,OAAf,CAAuB,QAAvB,CAAD,CAHG;AAInBR,QAAAA,QAAQ,EAAEN,cAAc,CAACc,OAAf,CAAuB,UAAvB,CAJS;AAKnBP,QAAAA,KAAK,EAAEP,cAAc,CAACc,OAAf,CAAuB,OAAvB,CALY;AAMnBN,QAAAA,UAAU,EAAE,IAAIO,IAAJ,CAASf,cAAc,CAACc,OAAf,CAAuB,YAAvB,CAAT,CANO;AAOnBL,QAAAA,QAAQ,EAAEI,QAAQ,CAACb,cAAc,CAACc,OAAf,CAAuB,UAAvB,CAAD;AAPC,OAAvB;AASA,aAAOhB,OAAP;AACH,KAlCE;AAmCHkB,IAAAA,gBAAgB,EAAG,MAAM;AACrB,aAAOhB,cAAc,CAACc,OAAf,CAAuB,OAAvB,KAAmC,IAA1C;AACH;AArCE,GAAP;AAuCH;KAxCgBlB,c","sourcesContent":["import { Profile } from '../types/profile.type';\r\n\r\nexport function  ProfileService() {\r\n    return {\r\n         setProfile : (profile: Profile) => {\r\n            if (profile != undefined) {\r\n                sessionStorage.setItem('UserID', profile.UserID.toString());\r\n                sessionStorage.setItem('UserName', profile.UserName);\r\n                sessionStorage.setItem('RoleID', profile.RoleID.toString());\r\n                sessionStorage.setItem('RoleName', profile.RoleName);\r\n                sessionStorage.setItem('Token', profile.Token.toString());\r\n                sessionStorage.setItem('Expiration', profile.Expiration.toString());\r\n                sessionStorage.setItem('ConfigID', profile.ConfigID.toString());\r\n            }\r\n        },\r\n        resetProfile: (profile: Profile) => {\r\n            if (profile != undefined) {\r\n                sessionStorage.removeItem('UserID');\r\n                sessionStorage.removeItem('UserName');\r\n                sessionStorage.removeItem('RoleID');\r\n                sessionStorage.removeItem('RoleName');\r\n                sessionStorage.removeItem('Token');\r\n                sessionStorage.removeItem('Expiration');\r\n                sessionStorage.removeItem('ConfigID');\r\n            }\r\n        },\r\n        getProfile : () => {\r\n            let profile: Profile = {\r\n                UserID: parseInt(sessionStorage.getItem('UserID')!),\r\n                UserName: sessionStorage.getItem('UserName')!,\r\n                RoleID: parseInt(sessionStorage.getItem('RoleID')!),\r\n                RoleName: sessionStorage.getItem('RoleName')!,\r\n                Token: sessionStorage.getItem('Token')!,\r\n                Expiration: new Date(sessionStorage.getItem('Expiration')!),\r\n                ConfigID: parseInt(sessionStorage.getItem('ConfigID')!),\r\n            };\r\n            return profile;\r\n        },\r\n        isAuthencticated : () => {\r\n            return sessionStorage.getItem('Token') != null;\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}