{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\LFMS\\\\LFMS.WebUI\\\\src\\\\content\\\\pages\\\\Components\\\\Director\\\\DirectorForm.tsx\",\n    _s = $RefreshSig$();\n\n////import { Helmet } from 'react-helmet-async';\nimport { useEffect, useState } from 'react';\nimport * as Yup from \"yup\";\nimport { post } from \"../../../../services/common.service\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { Button, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box, Modal, Autocomplete } from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport { dropdowns } from '../../../../services/dropdowns.service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst label = {\n  inputProps: {\n    'aria-label': 'Switch demo'\n  }\n};\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 600,\n  bgcolor: 'background.paper',\n  //border: '2px solid #000',\n  boxShadow: 24,\n  p: 4\n};\n\nfunction DirectorForm(clearForm, directorFormFunc, directorData, rerenderTable) {\n  _s();\n\n  const [openSuccessAlert, setopenSuccessAlert] = useState(false);\n  const [directorTypes, setDirectorTypes] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => {\n    setOpen(true); // reset(companyTypeData);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    reset(directorData);\n    clearForm();\n  };\n\n  const handleAlertClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setopenSuccessAlert(false);\n  };\n\n  const showModal = () => {\n    setOpen(true);\n    reset(directorData);\n  };\n\n  const resetForm = () => {\n    reset(directorData);\n    clearForm();\n  };\n\n  useEffect(() => {\n    directorFormFunc.current = handleOpen;\n    reset(directorData);\n    loadDropdowns();\n  }, []);\n  useEffect(() => {\n    reset(directorData);\n  }, [directorData, directorFormFunc]);\n\n  const loadDropdowns = () => {\n    dropdowns.getDirectorTypes().then(x => setDirectorTypes(x)); //dropdowns.getDirectorTypes().then(x => setDirectorTypes(x));\n    //dropdowns.getDirectorTypes().then(x => setDirectorTypes(x));\n  };\n\n  const validationSchema = Yup.object().shape({\n    companyTypeName: Yup.string().required('Director is required').min(2, 'Director must be at least 2 characters').max(20, 'Director must not exceed 20 characters')\n  });\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(validationSchema)\n  });\n\n  const onSubmit = data => {\n    handleFormSubmit(data); //console.log(JSON.stringify(data, null, 2));\n  };\n\n  const handleFormSubmit = director => {\n    setLoading(true);\n    let _url = 'director/AddDirector';\n\n    if (director.DirectorID != undefined) {\n      _url = 'director/EditDirector';\n    }\n\n    post(_url, director).then(response => {\n      // history.push(\"/profile\");\n      if (response.data.status == 'success') {\n        setMessage('Director Successfully Saved!');\n        setopenSuccessAlert(true);\n        handleClose();\n        rerenderTable();\n      }\n    }, error => {\n      const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n      setLoading(false);\n      setMessage(resMessage);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      sx: {\n        margin: 1\n      },\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleOpen,\n      children: \"Open modal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"modal-modal-title\",\n      \"aria-describedby\": \"modal-modal-description\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: style,\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          maxWidth: \"md\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"register-form\",\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleSubmit(onSubmit),\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                direction: \"row\",\n                justifyContent: \"center\",\n                alignItems: \"stretch\",\n                spacing: 1,\n                children: /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(Card, {\n                    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n                      title: \"Enter Company Type Detail\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 149,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 150,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                      children: /*#__PURE__*/_jsxDEV(Box, {\n                        component: \"form\",\n                        sx: {\n                          '& .MuiTextField-root': {\n                            my: 1,\n                            width: '25ch'\n                          }\n                        },\n                        noValidate: true,\n                        autoComplete: \"off\",\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          children: [/*#__PURE__*/_jsxDEV(TextField, {\n                            style: {\n                              width: '100%'\n                            },\n                            required: true,\n                            id: \"outlined-required\",\n                            label: \"DirectorName\",\n                            ...register('DirectorName'),\n                            className: `form-control ${errors.DirectorName ? 'is-invalid' : ''}`\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 161,\n                            columnNumber: 57\n                          }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n                            disablePortal: true,\n                            id: \"drpDirectorType\",\n                            options: directorTypes,\n                            sx: {\n                              width: 300\n                            },\n                            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                              label: \"Director Type\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 174,\n                              columnNumber: 86\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 169,\n                            columnNumber: 57\n                          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                            style: {\n                              width: '100%'\n                            },\n                            required: true,\n                            id: \"outlined-required\",\n                            label: \"CompanyType\",\n                            ...register('DirectorName'),\n                            className: `form-control ${errors.DirectorName ? 'is-invalid' : ''}`\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 176,\n                            columnNumber: 57\n                          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                            style: {\n                              width: '100%'\n                            },\n                            required: true,\n                            id: \"outlined-required\",\n                            label: \"CompanyType\",\n                            ...register('DirectorName'),\n                            className: `form-control ${errors.DirectorName ? 'is-invalid' : ''}`\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 184,\n                            columnNumber: 57\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 160,\n                          columnNumber: 53\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: /*#__PURE__*/_jsxDEV(TextField, {\n                            style: {\n                              width: '100%'\n                            },\n                            required: true,\n                            id: \"outlined-password-input\",\n                            label: \"Remarks\",\n                            type: \"remarks\",\n                            multiline: true,\n                            rows: 2,\n                            maxRows: 4,\n                            autoComplete: \"current-password\",\n                            ...register('Remarks'),\n                            className: `form-control ${errors.Remarks ? 'is-invalid' : ''}`\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 194,\n                            columnNumber: 57\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 193,\n                          columnNumber: 53\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 152,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 151,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      type: \"submit\",\n                      sx: {\n                        margin: 1\n                      },\n                      variant: \"contained\",\n                      color: \"primary\",\n                      children: \" Save\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 202,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      type: \"button\",\n                      onClick: () => resetForm(),\n                      sx: {\n                        margin: 1\n                      },\n                      variant: \"contained\",\n                      color: \"secondary\",\n                      children: \"Reset\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 203,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 148,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 147,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(DirectorForm, \"wIQVRSdI4XUsabZBzpvTlBHHn4c=\", false, function () {\n  return [useForm];\n});\n\n_c = DirectorForm;\nexport default DirectorForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"DirectorForm\");","map":{"version":3,"sources":["E:/Projects/LFMS/LFMS.WebUI/src/content/pages/Components/Director/DirectorForm.tsx"],"names":["useEffect","useState","Yup","post","yupResolver","Button","Container","Grid","Card","CardHeader","CardContent","Divider","TextField","Box","Modal","Autocomplete","useForm","dropdowns","label","inputProps","style","position","top","left","transform","width","bgcolor","boxShadow","p","DirectorForm","clearForm","directorFormFunc","directorData","rerenderTable","openSuccessAlert","setopenSuccessAlert","directorTypes","setDirectorTypes","loading","setLoading","message","setMessage","open","setOpen","handleOpen","handleClose","reset","handleAlertClose","event","reason","showModal","resetForm","current","loadDropdowns","getDirectorTypes","then","x","validationSchema","object","shape","companyTypeName","string","required","min","max","register","handleSubmit","formState","errors","resolver","onSubmit","data","handleFormSubmit","director","_url","DirectorID","undefined","response","status","error","resMessage","toString","margin","my","DirectorName","params","Remarks"],"mappings":"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","sourcesContent":["////import { Helmet } from 'react-helmet-async';\r\nimport PageTitle from '../../../../components/PageTitle';\r\nimport { useEffect, useState } from 'react';\r\nimport * as Yup from \"yup\";\r\nimport { post} from \"../../../../services/common.service\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nimport PageTitleWrapper from '../../../../components/PageTitleWrapper';\r\nimport { Button, IconButton, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box, Modal, Typography, Autocomplete } from '@mui/material';\r\nimport Footer from '../../../../components/Footer';\r\n\r\nimport Switch from '@mui/material/Switch';\r\nimport { useForm } from 'react-hook-form';\r\nimport { DirectorModel } from '../../../../types/director.type';\r\nimport { dropdowns } from '../../../../services/dropdowns.service';\r\nimport { DirectorTypeModel } from '../../../../types/master.type';\r\n\r\nconst label = { inputProps: { 'aria-label': 'Switch demo' } };\r\n\r\nconst style = {\r\n    position: 'absolute' as 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 600,\r\n    bgcolor: 'background.paper',\r\n    //border: '2px solid #000',\r\n    boxShadow: 24,\r\n    p: 4,\r\n};\r\n\r\nfunction DirectorForm(clearForm, directorFormFunc, directorData, rerenderTable) {\r\n    const [openSuccessAlert, setopenSuccessAlert] = useState<boolean>(false);\r\n    const [directorTypes, setDirectorTypes] = useState<DirectorTypeModel[]>([]);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n        // reset(companyTypeData);\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        reset(directorData);\r\n        clearForm();\r\n    }\r\n    const handleAlertClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        setopenSuccessAlert(false);\r\n    };\r\n   \r\n    const showModal = () => {\r\n        setOpen(true);\r\n        reset(directorData);\r\n    }\r\n    const resetForm = () => {\r\n        reset(directorData);\r\n        clearForm();\r\n    }\r\n    useEffect(() => {\r\n        directorFormFunc.current = handleOpen\r\n        reset(directorData);\r\n        loadDropdowns();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        reset(directorData);\r\n    }, [directorData, directorFormFunc]);\r\n\r\n    const loadDropdowns = () => {\r\n        dropdowns.getDirectorTypes().then(x => setDirectorTypes(x));\r\n        //dropdowns.getDirectorTypes().then(x => setDirectorTypes(x));\r\n        //dropdowns.getDirectorTypes().then(x => setDirectorTypes(x));\r\n    }\r\n    const validationSchema = Yup.object().shape({\r\n        companyTypeName: Yup.string()\r\n            .required('Director is required')\r\n            .min(2, 'Director must be at least 2 characters')\r\n            .max(20, 'Director must not exceed 20 characters'),\r\n    });\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { errors }\r\n    } = useForm<DirectorModel>({\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n    const onSubmit = (data: DirectorModel) => {\r\n        handleFormSubmit(data);\r\n        //console.log(JSON.stringify(data, null, 2));\r\n    };\r\n    const handleFormSubmit = (director: DirectorModel) => {\r\n        setLoading(true);\r\n        let _url = 'director/AddDirector';\r\n        if (director.DirectorID != undefined) {\r\n            _url = 'director/EditDirector';\r\n        }\r\n        post(_url, director).then(\r\n            (response: any) => {\r\n                // history.push(\"/profile\");\r\n                if (response.data.status == 'success') {\r\n                    setMessage('Director Successfully Saved!');\r\n                    setopenSuccessAlert(true);\r\n                    handleClose();\r\n                    rerenderTable();\r\n                }\r\n            },\r\n            (error: any) => {\r\n                const resMessage =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setLoading(false);\r\n                setMessage(resMessage);\r\n            }\r\n        ); \r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button sx={{ margin: 1 }} variant=\"contained\" color=\"primary\" onClick={handleOpen}>Open modal</Button>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={style}>\r\n                    <Container maxWidth=\"md\">\r\n                        <div className=\"register-form\">\r\n                            <form onSubmit={handleSubmit(onSubmit)}>\r\n                                <Grid\r\n                                    container\r\n                                    direction=\"row\"\r\n                                    justifyContent=\"center\"\r\n                                    alignItems=\"stretch\"\r\n                                    spacing={1}\r\n                                >\r\n                                    <Grid item xs={12}>\r\n                                        <Card>\r\n                                            <CardHeader title=\"Enter Company Type Detail\" />\r\n                                            <Divider />\r\n                                            <CardContent>\r\n                                                <Box\r\n                                                    component=\"form\"\r\n                                                    sx={{\r\n                                                        '& .MuiTextField-root': { my: 1, width: '25ch' },\r\n                                                    }}\r\n                                                    noValidate\r\n                                                    autoComplete=\"off\"\r\n                                                >\r\n                                                    <div>\r\n                                                        <TextField\r\n                                                            style={{ width: '100%' }}\r\n                                                            required\r\n                                                            id=\"outlined-required\"\r\n                                                            label=\"DirectorName\"\r\n                                                            {...register('DirectorName')}\r\n                                                            className={`form-control ${errors.DirectorName ? 'is-invalid' : ''}`}\r\n                                                        />\r\n                                                        <Autocomplete\r\n                                                            disablePortal\r\n                                                            id=\"drpDirectorType\"\r\n                                                            options={directorTypes}\r\n                                                            sx={{ width: 300 }}\r\n                                                            renderInput={(params) => <TextField {...params} label=\"Director Type\" />}\r\n                                                        />\r\n                                                        <TextField\r\n                                                            style={{ width: '100%' }}\r\n                                                            required\r\n                                                            id=\"outlined-required\"\r\n                                                            label=\"CompanyType\"\r\n                                                            {...register('DirectorName')}\r\n                                                            className={`form-control ${errors.DirectorName ? 'is-invalid' : ''}`}\r\n                                                        />\r\n                                                        <TextField\r\n                                                            style={{ width: '100%' }}\r\n                                                            required\r\n                                                            id=\"outlined-required\"\r\n                                                            label=\"CompanyType\"\r\n                                                            {...register('DirectorName')}\r\n                                                            className={`form-control ${errors.DirectorName ? 'is-invalid' : ''}`}\r\n                                                        />\r\n                                                    </div>\r\n                                                    <div>\r\n                                                        <TextField style={{ width: '100%' }} required\r\n                                                            id=\"outlined-password-input\" label=\"Remarks\" type=\"remarks\" multiline rows={2} maxRows={4} autoComplete=\"current-password\"\r\n                                                            {...register('Remarks')}\r\n                                                            className={`form-control ${errors.Remarks ? 'is-invalid' : ''}`}\r\n                                                        />\r\n                                                    </div>\r\n                                                </Box>\r\n                                            </CardContent>\r\n                                            <Button type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"primary\"> Save</Button>\r\n                                            <Button type=\"button\"\r\n                                                onClick={() => resetForm()} sx={{ margin: 1 }} variant=\"contained\" color=\"secondary\">\r\n                                                Reset\r\n                                            </Button>\r\n\r\n                                        </Card>\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                            </form>\r\n                        </div>\r\n                    </Container>\r\n                </Box>\r\n            </Modal>\r\n          \r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DirectorForm;\r\n"]},"metadata":{},"sourceType":"module"}