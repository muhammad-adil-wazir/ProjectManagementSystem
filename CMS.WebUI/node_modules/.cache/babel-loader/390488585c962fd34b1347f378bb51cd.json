{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\LFMS\\\\LFMS.WebUI\\\\src\\\\content\\\\pages\\\\Components\\\\IDType\\\\IDTypeForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { post } from \"../../../../services/common.service\";\nimport { Button, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box, Modal, Snackbar, Alert } from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport { object, string } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst label = {\n  inputProps: {\n    'aria-label': 'Switch demo'\n  }\n};\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 600,\n  bgcolor: 'background.paper',\n  boxShadow: 24,\n  p: 4\n};\nexport const IDTypeForm = _ref => {\n  _s();\n\n  let {\n    clearForm,\n    iDTypeFormFunc,\n    iDTypeData,\n    rerenderIDTypeTable,\n    AddButtonLabel\n  } = _ref;\n  const [loading, setLoading] = useState(false);\n  const [openSuccessAlert, setOpenSuccessAlert] = useState(false);\n  const [openErrorAlert, setOpenErrorAlert] = useState(false);\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleAlertClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpenSuccessAlert(false);\n    setOpenErrorAlert(false);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    reset(initialValues);\n    clearForm();\n  };\n\n  const initialValues = {\n    IDTypeName: \"\",\n    Remarks: \"\"\n  };\n\n  const showModal = () => {\n    setOpen(true);\n    reset(initialValues);\n  };\n\n  const resetForm = () => {\n    reset(initialValues);\n    clearForm();\n  };\n\n  useEffect(() => {\n    iDTypeFormFunc.current = handleOpen;\n    reset(iDTypeData);\n  }, []);\n  useEffect(() => {\n    reset(iDTypeData);\n  }, [iDTypeData, iDTypeFormFunc]);\n  const validationSchema = object({\n    IDTypeName: string().nonempty('ID Type is required').max(200, 'ID Type must be less than 200 characters'),\n    Remarks: string().nonempty('Remark is required')\n  });\n  const {\n    register,\n    formState: {\n      errors,\n      isSubmitSuccessful\n    },\n    reset,\n    handleSubmit,\n    setValue\n  } = useForm({\n    resolver: zodResolver(validationSchema)\n  });\n  useEffect(() => {\n    if (isSubmitSuccessful) {\n      reset();\n    }\n  }, [isSubmitSuccessful]);\n\n  const onSubmitHandler = values => {\n    handleFormSubmit(values);\n  };\n\n  const handleFormSubmit = formValue => {\n    setLoading(true);\n    let _url = 'master/AddIDType';\n\n    if (formValue.ID != null && formValue.ID > 0) {\n      _url = 'master/EditIDType';\n    }\n\n    post(_url, formValue).then(response => {\n      if (response.data.status == 'success') {\n        setOpenSuccessAlert(true);\n        setSuccessMessage('successfully saved');\n        handleClose();\n        rerenderIDTypeTable();\n      }\n    }, error => {\n      const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n      setLoading(false);\n      setOpenErrorAlert(true);\n      setErrorMessage(resMessage);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Snackbar, {\n      open: openSuccessAlert,\n      autoHideDuration: 5000,\n      onClose: handleAlertClose,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleAlertClose,\n        variant: \"filled\",\n        severity: \"success\",\n        sx: {\n          width: '100%'\n        },\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: openErrorAlert,\n      autoHideDuration: 5000,\n      onClose: handleAlertClose,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleAlertClose,\n        variant: \"filled\",\n        severity: \"error\",\n        sx: {\n          width: '100%'\n        },\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      sx: {\n        margin: 1\n      },\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: showModal,\n      children: [\" \", AddButtonLabel]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"modal-modal-title\",\n      \"aria-describedby\": \"modal-modal-description\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: style,\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          maxWidth: \"md\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"register-form\",\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              component: \"form\",\n              noValidate: true,\n              autoComplete: \"off\",\n              onSubmit: handleSubmit(onSubmitHandler),\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                direction: \"row\",\n                justifyContent: \"center\",\n                alignItems: \"stretch\",\n                spacing: 1,\n                children: /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(Card, {\n                    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n                      title: \"Enter ID Type Detail\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 166,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 167,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                      children: /*#__PURE__*/_jsxDEV(Box, {\n                        sx: {\n                          '& .MuiTextField-root': {\n                            my: 1,\n                            width: '25ch'\n                          }\n                        },\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          children: /*#__PURE__*/_jsxDEV(TextField, {\n                            style: {\n                              width: '100%'\n                            },\n                            required: true,\n                            id: \"outlined-required\",\n                            label: \"ID Type\",\n                            ...register('IDTypeName'),\n                            fullWidth: true,\n                            error: !!errors['IDTypeName'],\n                            helperText: errors['IDTypeName'] ? errors['IDTypeName'].message : ''\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 175,\n                            columnNumber: 57\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 174,\n                          columnNumber: 53\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: /*#__PURE__*/_jsxDEV(TextField, {\n                            style: {\n                              width: '100%'\n                            },\n                            required: true,\n                            id: \"outlined-password-input\",\n                            label: \"Remarks\",\n                            type: \"remarks\",\n                            multiline: true,\n                            rows: 2,\n                            maxRows: 4,\n                            autoComplete: \"current-password\",\n                            ...register('Remarks'),\n                            fullWidth: true,\n                            error: !!errors['Remarks'],\n                            helperText: errors['Remarks'] ? errors['Remarks'].message : ''\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 187,\n                            columnNumber: 57\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 186,\n                          columnNumber: 53\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 169,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 168,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      type: \"submit\",\n                      sx: {\n                        margin: 1\n                      },\n                      variant: \"contained\",\n                      color: \"primary\",\n                      children: \" Save\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 197,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      type: \"button\",\n                      onClick: () => resetForm(),\n                      sx: {\n                        margin: 1\n                      },\n                      variant: \"contained\",\n                      color: \"secondary\",\n                      children: \"Reset\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 198,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      type: \"submit\",\n                      sx: {\n                        margin: 1\n                      },\n                      variant: \"contained\",\n                      color: \"error\",\n                      onClick: handleClose,\n                      children: \" Close\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 202,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 165,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(IDTypeForm, \"akkWZWKMEzK6/0zeTljBDR8ROis=\", false, function () {\n  return [useForm];\n});\n\n_c = IDTypeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"IDTypeForm\");","map":{"version":3,"sources":["E:/Projects/LFMS/LFMS.WebUI/src/content/pages/Components/IDType/IDTypeForm.tsx"],"names":["useEffect","useState","post","Button","Container","Grid","Card","CardHeader","CardContent","Divider","TextField","Box","Modal","Snackbar","Alert","useForm","object","string","zodResolver","label","inputProps","style","position","top","left","transform","width","bgcolor","boxShadow","p","IDTypeForm","clearForm","iDTypeFormFunc","iDTypeData","rerenderIDTypeTable","AddButtonLabel","loading","setLoading","openSuccessAlert","setOpenSuccessAlert","openErrorAlert","setOpenErrorAlert","successMessage","setSuccessMessage","errorMessage","setErrorMessage","open","setOpen","handleOpen","handleAlertClose","event","reason","handleClose","reset","initialValues","IDTypeName","Remarks","showModal","resetForm","current","validationSchema","nonempty","max","register","formState","errors","isSubmitSuccessful","handleSubmit","setValue","resolver","onSubmitHandler","values","handleFormSubmit","formValue","_url","ID","then","response","data","status","error","resMessage","message","toString","margin","my"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { post } from \"../../../../services/common.service\";\r\nimport { Button, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box, Modal, Snackbar, Alert } from '@mui/material';\r\nimport { useForm, SubmitHandler } from 'react-hook-form';\r\nimport { object, string, TypeOf } from 'zod';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\n\r\nconst label = { inputProps: { 'aria-label': 'Switch demo' } };\r\n\r\nconst style = {\r\n    position: 'absolute' as 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 600,\r\n    bgcolor: 'background.paper',\r\n    boxShadow: 24,\r\n    p: 4,\r\n};\r\nexport type IDTypeModel = {\r\n    ID?: number;\r\n    IDTypeName: string;\r\n    Remarks: string;\r\n};\r\nexport const IDTypeForm: React.FC<any> = ({ clearForm, iDTypeFormFunc, iDTypeData, rerenderIDTypeTable, AddButtonLabel }) => {\r\n\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [openSuccessAlert, setOpenSuccessAlert] = useState<boolean>(false);\r\n    const [openErrorAlert, setOpenErrorAlert] = useState<boolean>(false);\r\n    const [successMessage, setSuccessMessage] = useState<string>(\"\");\r\n    const [errorMessage, setErrorMessage] = useState<string>(\"\");\r\n    const [open, setOpen] = useState(false);\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n    const handleAlertClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSuccessAlert(false);\r\n        setOpenErrorAlert(false);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        reset(initialValues);\r\n        clearForm();\r\n    }\r\n    const initialValues: IDTypeModel = {\r\n        IDTypeName: \"\",\r\n        Remarks: \"\",\r\n    };\r\n    const showModal = () => {\r\n        setOpen(true);\r\n        reset(initialValues);\r\n    }\r\n    const resetForm = () => {\r\n        reset(initialValues);\r\n        clearForm();\r\n    }\r\n    useEffect(() => {\r\n        iDTypeFormFunc.current = handleOpen\r\n        reset(iDTypeData);\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        reset(iDTypeData);\r\n    }, [iDTypeData, iDTypeFormFunc]);\r\n\r\n\r\n    const validationSchema = object({\r\n        IDTypeName: string()\r\n            .nonempty('ID Type is required')\r\n            .max(200, 'ID Type must be less than 200 characters'),\r\n        Remarks: string().nonempty('Remark is required')\r\n    });\r\n\r\n    type RegisterInput = TypeOf<typeof validationSchema>;\r\n\r\n    const {\r\n        register,\r\n        formState: { errors, isSubmitSuccessful },\r\n        reset,\r\n        handleSubmit,\r\n        setValue\r\n    } = useForm<RegisterInput>({\r\n        resolver: zodResolver(validationSchema)\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (isSubmitSuccessful) {\r\n            reset();\r\n        }\r\n    }, [isSubmitSuccessful]);\r\n\r\n    const onSubmitHandler: SubmitHandler<RegisterInput> = (values) => {\r\n        handleFormSubmit(values);\r\n    };\r\n    const handleFormSubmit = (formValue: IDTypeModel) => {\r\n        setLoading(true);\r\n        let _url = 'master/AddIDType';\r\n        if (formValue.ID != null && formValue.ID > 0) {\r\n            _url = 'master/EditIDType';\r\n        }\r\n\r\n        post(_url, formValue).then(\r\n            (response: any) => {\r\n                if (response.data.status == 'success') {\r\n                    setOpenSuccessAlert(true);\r\n                    setSuccessMessage('successfully saved');\r\n                    handleClose();\r\n                    rerenderIDTypeTable();\r\n                }\r\n            },\r\n            (error: any) => {\r\n                const resMessage =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setLoading(false);\r\n                setOpenErrorAlert(true);\r\n                setErrorMessage(resMessage);\r\n            }\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Snackbar open={openSuccessAlert} autoHideDuration={5000} onClose={handleAlertClose}>\r\n                <Alert onClose={handleAlertClose} variant=\"filled\" severity=\"success\" sx={{ width: '100%' }}>\r\n                    {successMessage}\r\n                </Alert>\r\n            </Snackbar>\r\n\r\n            <Snackbar open={openErrorAlert} autoHideDuration={5000} onClose={handleAlertClose}>\r\n                <Alert onClose={handleAlertClose} variant=\"filled\" severity=\"error\" sx={{ width: '100%' }}>\r\n                    {errorMessage}\r\n                </Alert>\r\n            </Snackbar>\r\n\r\n            <Button sx={{ margin: 1 }} variant=\"contained\" color=\"primary\" onClick={showModal}> {AddButtonLabel}</Button>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={style}>\r\n                    <Container maxWidth=\"md\">\r\n                        <div className=\"register-form\">\r\n                            <Box component='form'\r\n                                noValidate\r\n                                autoComplete='off'\r\n                                onSubmit={handleSubmit(onSubmitHandler)}>\r\n                                <Grid\r\n                                    container\r\n                                    direction=\"row\"\r\n                                    justifyContent=\"center\"\r\n                                    alignItems=\"stretch\"\r\n                                    spacing={1}\r\n                                >\r\n                                    <Grid item xs={12}>\r\n                                        <Card>\r\n                                            <CardHeader title=\"Enter ID Type Detail\" />\r\n                                            <Divider />\r\n                                            <CardContent>\r\n                                                <Box\r\n                                                    sx={{\r\n                                                        '& .MuiTextField-root': { my: 1, width: '25ch' },\r\n                                                    }}\r\n                                                >\r\n                                                    <div>\r\n                                                        <TextField\r\n                                                            style={{ width: '100%' }}\r\n                                                            required\r\n                                                            id=\"outlined-required\"\r\n                                                            label=\"ID Type\"\r\n                                                            {...register('IDTypeName')}\r\n                                                            fullWidth\r\n                                                            error={!!errors['IDTypeName']}\r\n                                                            helperText={errors['IDTypeName'] ? errors['IDTypeName'].message : ''}\r\n                                                        />\r\n                                                    </div>\r\n                                                    <div>\r\n                                                        <TextField style={{ width: '100%' }} required\r\n                                                            id=\"outlined-password-input\" label=\"Remarks\" type=\"remarks\" multiline rows={2} maxRows={4} autoComplete=\"current-password\"\r\n                                                            {...register('Remarks')}\r\n                                                            fullWidth\r\n                                                            error={!!errors['Remarks']}\r\n                                                            helperText={errors['Remarks'] ? errors['Remarks'].message : ''}\r\n                                                        />\r\n                                                    </div>\r\n                                                </Box>\r\n                                            </CardContent>\r\n                                            <Button type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"primary\"> Save</Button>\r\n                                            <Button type=\"button\"\r\n                                                onClick={() => resetForm()} sx={{ margin: 1 }} variant=\"contained\" color=\"secondary\">\r\n                                                Reset\r\n                                            </Button>\r\n                                            <Button type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"error\" onClick={handleClose}> Close</Button>\r\n                                        </Card>\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                            </Box>\r\n                        </div>\r\n                    </Container>\r\n                </Box>\r\n            </Modal>\r\n\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}