{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\LFMS\\\\LFMS.WebUI\\\\src\\\\content\\\\pages\\\\Components\\\\Users\\\\UserForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { Post } from \"../../../../services/common.service\";\nimport { dropdowns } from '../../../../services/dropdowns.service';\nimport { Button, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box, Modal, Snackbar, Alert, Autocomplete, Chip } from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport { object, string } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 800,\n  bgcolor: 'background.paper',\n  boxShadow: 24,\n  p: 4\n};\nexport const UserForm = _ref => {\n  _s();\n\n  let {\n    clearForm,\n    userFormFunc,\n    userData,\n    rerenderUserTable,\n    AddButtonLabel\n  } = _ref;\n  const [loading, setLoading] = useState(false);\n  const [roles, setRoles] = useState([]);\n  const [selectedRole, setSelectedRole] = useState();\n  const [locations, setLocations] = useState([]);\n  const [selectedLocations, setSelectedLocations] = useState([]);\n  const [selectedLocation, setSelectedLocation] = useState();\n  const [openSuccessAlert, setopenSuccessAlert] = useState(false);\n  const [openErrorAlert, setopenErrorAlert] = useState(false);\n  const [messageErorr, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    reset(initialValues);\n    clearForm();\n  };\n\n  const handleAlertClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setopenSuccessAlert(false);\n    setopenErrorAlert(false);\n  };\n\n  const initialValues = {\n    UserName: \"\",\n    PersonName: \"\",\n    Password: \"\",\n    Email: \"\",\n    RoleID: 0,\n    RoleName: \"\",\n    Remarks: \"\"\n  };\n\n  const showModal = () => {\n    setOpen(true);\n    reset(initialValues);\n  };\n\n  const resetForm = () => {\n    reset(initialValues);\n    clearForm();\n  };\n\n  useEffect(() => {\n    userFormFunc.current = handleOpen;\n    reset(userData);\n    loadDropdowns();\n  }, []);\n  useEffect(() => {\n    reset(userData);\n  }, [userData, userFormFunc]);\n  const validationSchema = object({\n    UserName: string().nonempty('User Name is required').max(200, 'User Name must be less than 200 characters'),\n    Password: string().nonempty('Password is required').max(200, 'Password must be less than 200 characters'),\n    PersonName: string().nonempty('Person Name is required').max(200, 'Person Name must be less than 200 characters'),\n    RoleName: string().nonempty('Role Name is required').max(200, 'Role Name must be less than 200 characters'),\n    Remarks: string().nonempty('Remark is required')\n  });\n  const {\n    register,\n    formState: {\n      errors,\n      isSubmitSuccessful\n    },\n    reset,\n    handleSubmit,\n    setValue\n  } = useForm({\n    resolver: zodResolver(validationSchema)\n  });\n  useEffect(() => {\n    if (isSubmitSuccessful) {\n      reset();\n    }\n  }, [isSubmitSuccessful]);\n\n  const onSubmitHandler = values => {\n    handleFormSubmit(values);\n  };\n\n  const handleFormSubmit = formValue => {\n    setLoading(true);\n    let _url = 'master/AddUser';\n\n    if (formValue.UserID != null && formValue.UserID > 0) {\n      _url = 'master/EditUser';\n    }\n\n    Post(_url, formValue).then(response => {\n      if (response.data.status == 'success') {\n        setopenSuccessAlert(true);\n        setSuccessMessage('successfully saved');\n        handleClose();\n        rerenderUserTable();\n      }\n    }, error => {\n      const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n      setLoading(false);\n      setopenErrorAlert(true);\n      setErrorMessage(resMessage);\n    });\n  };\n\n  const loadDropdowns = () => {\n    dropdowns.getAllRoles().then(x => setRoles(x));\n    dropdowns.getAllLocations().then(x => setLocations(x));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Snackbar, {\n      open: openSuccessAlert,\n      autoHideDuration: 5000,\n      onClose: handleAlertClose,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleAlertClose,\n        variant: \"filled\",\n        severity: \"success\",\n        sx: {\n          width: '100%'\n        },\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: openErrorAlert,\n      autoHideDuration: 5000,\n      onClose: handleAlertClose,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleAlertClose,\n        variant: \"filled\",\n        severity: \"error\",\n        sx: {\n          width: '100%'\n        },\n        children: messageErorr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      sx: {\n        margin: 1,\n        height: '53px'\n      },\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: showModal,\n      children: [\" \", AddButtonLabel]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"modal-modal-title\",\n      \"aria-describedby\": \"modal-modal-description\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: style,\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          maxWidth: \"md\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"register-form\",\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              component: \"form\",\n              noValidate: true,\n              autoComplete: \"off\",\n              onSubmit: handleSubmit(onSubmitHandler),\n              children: /*#__PURE__*/_jsxDEV(Card, {\n                children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n                  title: \"Enter User Type Detail\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                  children: /*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      '& .MuiTextField-root': {\n                        my: 1,\n                        width: '25ch'\n                      }\n                    },\n                    children: /*#__PURE__*/_jsxDEV(Grid, {\n                      container: true,\n                      direction: \"row\",\n                      justifyContent: \"center\",\n                      alignItems: \"stretch\",\n                      spacing: 1,\n                      children: [/*#__PURE__*/_jsxDEV(Grid, {\n                        item: true,\n                        xs: 6,\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          children: /*#__PURE__*/_jsxDEV(TextField, {\n                            style: {\n                              width: '100%'\n                            },\n                            required: true,\n                            id: \"outlined-required\",\n                            label: \"User Name\",\n                            ...register('UserName'),\n                            fullWidth: true,\n                            error: !!errors['UserName'],\n                            helperText: errors['UserName'] ? errors['UserName'].message : ''\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 190,\n                            columnNumber: 53\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 189,\n                          columnNumber: 49\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: /*#__PURE__*/_jsxDEV(TextField, {\n                            style: {\n                              width: '100%'\n                            },\n                            required: true,\n                            id: \"outlined-required\",\n                            label: \"Password\",\n                            ...register('Password'),\n                            fullWidth: true,\n                            error: !!errors['Password'],\n                            helperText: errors['Password'] ? errors['Password'].message : ''\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 202,\n                            columnNumber: 57\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 201,\n                          columnNumber: 53\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: /*#__PURE__*/_jsxDEV(TextField, {\n                            style: {\n                              width: '100%'\n                            },\n                            required: true,\n                            id: \"outlined-required\",\n                            label: \"Email\",\n                            ...register('Email'),\n                            fullWidth: true,\n                            error: !!errors['Email'],\n                            helperText: errors['Email'] ? errors['Email'].message : ''\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 214,\n                            columnNumber: 57\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 213,\n                          columnNumber: 53\n                        }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n                          onChange: (event, newValue) => {\n                            setSelectedRole(newValue);\n                          },\n                          value: selectedRole,\n                          disablePortal: true,\n                          id: \"drpRole\",\n                          options: roles,\n                          getOptionLabel: role => role.RoleName,\n                          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                            style: {\n                              width: '100%'\n                            },\n                            ...params,\n                            label: \"Role\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 234,\n                            columnNumber: 78\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 225,\n                          columnNumber: 49\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 188,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                        item: true,\n                        xs: 6,\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          children: /*#__PURE__*/_jsxDEV(TextField, {\n                            style: {\n                              width: '100%'\n                            },\n                            required: true,\n                            id: \"outlined-required\",\n                            label: \"Person Name\",\n                            ...register('PersonName'),\n                            fullWidth: true,\n                            error: !!errors['PersonName'],\n                            helperText: errors['PersonName'] ? errors['PersonName'].message : ''\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 239,\n                            columnNumber: 57\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 238,\n                          columnNumber: 53\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                            value: selectedLocations,\n                            onChange: (event, newValue) => {\n                              setSelectedLocations(newValue);\n                            },\n                            multiple: true,\n                            id: \"tags-filled\",\n                            options: locations.map(option => option.LocationName),\n                            freeSolo: true,\n                            renderTags: (value, getTagProps) => value.map((option, index) => /*#__PURE__*/_jsxDEV(Chip, {\n                              variant: \"outlined\",\n                              label: option,\n                              ...getTagProps({\n                                index\n                              })\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 262,\n                              columnNumber: 65\n                            }, this)),\n                            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                              variant: \"filled\",\n                              label: \"Users\",\n                              placeholder: \"Search\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 270,\n                              columnNumber: 61\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 251,\n                            columnNumber: 53\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 250,\n                          columnNumber: 49\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: /*#__PURE__*/_jsxDEV(TextField, {\n                            style: {\n                              width: '100%'\n                            },\n                            required: true,\n                            id: \"outlined-password-input\",\n                            label: \"Remarks\",\n                            type: \"remarks\",\n                            multiline: true,\n                            rows: 4,\n                            maxRows: 4,\n                            autoComplete: \"current-password\",\n                            ...register('Remarks'),\n                            fullWidth: true,\n                            error: !!errors['Remarks'],\n                            helperText: errors['Remarks'] ? errors['Remarks'].message : ''\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 280,\n                            columnNumber: 53\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 279,\n                          columnNumber: 49\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 237,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 187,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 186,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  sx: {\n                    margin: 1\n                  },\n                  variant: \"contained\",\n                  color: \"primary\",\n                  children: \" Save\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 292,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"button\",\n                  onClick: () => resetForm(),\n                  sx: {\n                    margin: 1\n                  },\n                  variant: \"contained\",\n                  color: \"secondary\",\n                  children: \"Reset\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 293,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  sx: {\n                    margin: 1\n                  },\n                  variant: \"contained\",\n                  color: \"error\",\n                  onClick: handleClose,\n                  children: \" Close\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 297,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(UserForm, \"j12fchcL1d8Ay4DeuOVAw8SCMq0=\", false, function () {\n  return [useForm];\n});\n\n_c = UserForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserForm\");","map":{"version":3,"sources":["E:/Projects/LFMS/LFMS.WebUI/src/content/pages/Components/Users/UserForm.tsx"],"names":["useEffect","useState","Post","dropdowns","Button","Container","Grid","Card","CardHeader","CardContent","Divider","TextField","Box","Modal","Snackbar","Alert","Autocomplete","Chip","useForm","object","string","zodResolver","style","position","top","left","transform","width","bgcolor","boxShadow","p","UserForm","clearForm","userFormFunc","userData","rerenderUserTable","AddButtonLabel","loading","setLoading","roles","setRoles","selectedRole","setSelectedRole","locations","setLocations","selectedLocations","setSelectedLocations","selectedLocation","setSelectedLocation","openSuccessAlert","setopenSuccessAlert","openErrorAlert","setopenErrorAlert","messageErorr","setErrorMessage","successMessage","setSuccessMessage","open","setOpen","handleOpen","handleClose","reset","initialValues","handleAlertClose","event","reason","UserName","PersonName","Password","Email","RoleID","RoleName","Remarks","showModal","resetForm","current","loadDropdowns","validationSchema","nonempty","max","register","formState","errors","isSubmitSuccessful","handleSubmit","setValue","resolver","onSubmitHandler","values","handleFormSubmit","formValue","_url","UserID","then","response","data","status","error","resMessage","message","toString","getAllRoles","x","getAllLocations","margin","height","my","newValue","role","params","map","option","LocationName","value","getTagProps","index"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { Post, Get, Delete } from \"../../../../services/common.service\";\r\nimport { dropdowns } from '../../../../services/dropdowns.service';\r\nimport { Button, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box, Modal, Snackbar, Alert, Autocomplete, Chip } from '@mui/material';\r\nimport { useForm, SubmitHandler } from 'react-hook-form';\r\nimport { object, string, TypeOf } from 'zod';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { RoleModel, LocationModel } from '../../../../types/security.type';\r\n\r\nconst style = {\r\n    position: 'absolute' as 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 800,\r\n    bgcolor: 'background.paper',\r\n    boxShadow: 24,\r\n    p: 4,\r\n};\r\nexport type UserModel = {\r\n    UserID?: number;\r\n    UserName: string;\r\n    PersonName: string;\r\n    Password: string;\r\n    Email: string;\r\n    RoleID?: number;\r\n    RoleName: string;\r\n    Remarks: string;\r\n};\r\nexport const UserForm: React.FC<any> = ({ clearForm, userFormFunc, userData, rerenderUserTable, AddButtonLabel }) => {\r\n\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [roles, setRoles] = useState<RoleModel[]>([]);\r\n    const [selectedRole, setSelectedRole] = useState<RoleModel>();\r\n    const [locations, setLocations] = useState<LocationModel[]>([]);\r\n    const [selectedLocations, setSelectedLocations] = useState<string[]>([]);\r\n    const [selectedLocation, setSelectedLocation] = useState<LocationModel>();\r\n    const [openSuccessAlert, setopenSuccessAlert] = useState<boolean>(false);\r\n    const [openErrorAlert, setopenErrorAlert] = useState<boolean>(false);\r\n    const [messageErorr, setErrorMessage] = useState<string>(\"\");\r\n    const [successMessage, setSuccessMessage] = useState<string>(\"\");\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        reset(initialValues);\r\n        clearForm();\r\n    }\r\n    const handleAlertClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setopenSuccessAlert(false);\r\n        setopenErrorAlert(false);\r\n    };\r\n    const initialValues: UserModel = {\r\n        UserName: \"\",\r\n        PersonName: \"\",\r\n        Password: \"\",\r\n        Email: \"\",\r\n        RoleID: 0,\r\n        RoleName: \"\",\r\n        Remarks: \"\",\r\n    };\r\n    const showModal = () => {\r\n        setOpen(true);\r\n        reset(initialValues);\r\n    }\r\n    const resetForm = () => {\r\n        reset(initialValues);\r\n        clearForm();\r\n    }\r\n    useEffect(() => {\r\n        userFormFunc.current = handleOpen\r\n        reset(userData);\r\n        loadDropdowns();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        reset(userData);\r\n    }, [userData, userFormFunc]);\r\n\r\n    const validationSchema = object({\r\n        UserName: string()\r\n            .nonempty('User Name is required')\r\n            .max(200, 'User Name must be less than 200 characters'),\r\n        Password: string()\r\n            .nonempty('Password is required')\r\n            .max(200, 'Password must be less than 200 characters'),\r\n        PersonName: string()\r\n            .nonempty('Person Name is required')\r\n            .max(200, 'Person Name must be less than 200 characters'),\r\n        RoleName: string()\r\n            .nonempty('Role Name is required')\r\n            .max(200, 'Role Name must be less than 200 characters'),\r\n        Remarks: string().nonempty('Remark is required')\r\n    });\r\n\r\n    const {\r\n        register,\r\n        formState: { errors, isSubmitSuccessful },\r\n        reset,\r\n        handleSubmit,\r\n        setValue\r\n    } = useForm<UserModel>({\r\n        resolver: zodResolver(validationSchema)\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (isSubmitSuccessful) {\r\n            reset();\r\n        }\r\n    }, [isSubmitSuccessful]);\r\n\r\n    const onSubmitHandler: SubmitHandler<UserModel> = (values) => {\r\n        handleFormSubmit(values);\r\n    };\r\n    const handleFormSubmit = (formValue: UserModel) => {\r\n        setLoading(true);\r\n        let _url = 'master/AddUser';\r\n        if (formValue.UserID != null && formValue.UserID > 0) {\r\n            _url = 'master/EditUser';\r\n        }\r\n        Post(_url, formValue).then(\r\n            (response: any) => {\r\n                if (response.data.status == 'success') {\r\n                    setopenSuccessAlert(true);\r\n                    setSuccessMessage('successfully saved');\r\n                    handleClose();\r\n                    rerenderUserTable();\r\n                }\r\n            },\r\n            (error: any) => {\r\n                const resMessage =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setLoading(false);\r\n                setopenErrorAlert(true);\r\n                setErrorMessage(resMessage);\r\n            }\r\n        );\r\n    };\r\n    const loadDropdowns = () => {\r\n        dropdowns.getAllRoles().then(x => setRoles(x));\r\n        dropdowns.getAllLocations().then(x => setLocations(x));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Snackbar open={openSuccessAlert} autoHideDuration={5000} onClose={handleAlertClose}>\r\n                <Alert onClose={handleAlertClose} variant=\"filled\" severity=\"success\" sx={{ width: '100%' }}>\r\n                    {successMessage}\r\n                </Alert>\r\n            </Snackbar>\r\n\r\n            <Snackbar open={openErrorAlert} autoHideDuration={5000} onClose={handleAlertClose}>\r\n                <Alert onClose={handleAlertClose} variant=\"filled\" severity=\"error\" sx={{ width: '100%' }}>\r\n                    {messageErorr}\r\n                </Alert>\r\n            </Snackbar>\r\n            <Button sx={{ margin: 1, height: '53px' }} variant=\"contained\" color=\"primary\" onClick={showModal}> {AddButtonLabel}</Button>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={style}>\r\n                    <Container maxWidth=\"md\">\r\n                        <div className=\"register-form\">\r\n                            <Box component='form'\r\n                                noValidate\r\n                                autoComplete='off'\r\n                                onSubmit={handleSubmit(onSubmitHandler)}>\r\n                               \r\n                            <Card>\r\n                                        <CardHeader title=\"Enter User Type Detail\" />\r\n                                        <Divider />\r\n                                        <CardContent>\r\n                                            <Box sx={{ '& .MuiTextField-root': { my: 1, width: '25ch' },}} >\r\n                                            <Grid container direction=\"row\" justifyContent=\"center\" alignItems=\"stretch\" spacing={1}>\r\n                                                <Grid item xs={6}>\r\n                                                <div>\r\n                                                    <TextField\r\n                                                        style={{ width: '100%' }}\r\n                                                        required\r\n                                                        id=\"outlined-required\"\r\n                                                        label=\"User Name\"\r\n                                                        {...register('UserName')}\r\n                                                        fullWidth\r\n                                                        error={!!errors['UserName']}\r\n                                                        helperText={errors['UserName'] ? errors['UserName'].message : ''}\r\n                                                    />\r\n                                                    </div>\r\n                                                    <div>\r\n                                                        <TextField\r\n                                                            style={{ width: '100%' }}\r\n                                                            required\r\n                                                            id=\"outlined-required\"\r\n                                                            label=\"Password\"\r\n                                                            {...register('Password')}\r\n                                                            fullWidth\r\n                                                            error={!!errors['Password']}\r\n                                                            helperText={errors['Password'] ? errors['Password'].message : ''}\r\n                                                        />\r\n                                                    </div>\r\n                                                    <div>\r\n                                                        <TextField\r\n                                                            style={{ width: '100%' }}\r\n                                                            required\r\n                                                            id=\"outlined-required\"\r\n                                                            label=\"Email\"\r\n                                                            {...register('Email')}\r\n                                                            fullWidth\r\n                                                            error={!!errors['Email']}\r\n                                                            helperText={errors['Email'] ? errors['Email'].message : ''}\r\n                                                        />\r\n                                                    </div>\r\n                                                <Autocomplete\r\n                                                    onChange={(event, newValue) => {\r\n                                                        setSelectedRole(newValue!);\r\n                                                    }}\r\n                                                    value={selectedRole}\r\n                                                    disablePortal\r\n                                                    id=\"drpRole\"\r\n                                                    options={roles}\r\n                                                    getOptionLabel={role => role.RoleName}\r\n                                                    renderInput={(params) => <TextField style={{ width: '100%' }} {...params} label=\"Role\" />}\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={6}>\r\n                                                    <div>\r\n                                                        <TextField\r\n                                                            style={{ width: '100%' }}\r\n                                                            required\r\n                                                            id=\"outlined-required\"\r\n                                                            label=\"Person Name\"\r\n                                                            {...register('PersonName')}\r\n                                                            fullWidth\r\n                                                            error={!!errors['PersonName']}\r\n                                                            helperText={errors['PersonName'] ? errors['PersonName'].message : ''}\r\n                                                        />\r\n                                                    </div>\r\n                                                <div >\r\n                                                    <Autocomplete\r\n                                                        value={selectedLocations}\r\n                                                        onChange={(event, newValue) => {\r\n                                                            setSelectedLocations(newValue);\r\n                                                        }}\r\n                                                        multiple\r\n                                                        id=\"tags-filled\"\r\n                                                        options={locations.map((option) => option.LocationName)}\r\n                                                        freeSolo\r\n                                                        renderTags={(value: string[], getTagProps) =>\r\n                                                            value.map((option: string, index: number) => (\r\n                                                                <Chip\r\n                                                                    variant=\"outlined\"\r\n                                                                    label={option}\r\n                                                                    {...getTagProps({ index })}\r\n                                                                />\r\n                                                            ))\r\n                                                        }\r\n                                                        renderInput={(params) => (\r\n                                                            <TextField\r\n                                                                {...params}\r\n                                                                variant=\"filled\"\r\n                                                                label=\"Users\"\r\n                                                                placeholder=\"Search\"\r\n                                                            />\r\n                                                        )}\r\n                                                    />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <TextField style={{ width: '100%' }} required\r\n                                                        id=\"outlined-password-input\" label=\"Remarks\" type=\"remarks\" multiline rows={4} maxRows={4} autoComplete=\"current-password\"\r\n                                                        {...register('Remarks')}\r\n                                                        fullWidth\r\n                                                        error={!!errors['Remarks']}\r\n                                                        helperText={errors['Remarks'] ? errors['Remarks'].message : ''}\r\n                                                    />\r\n                                                    </div>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            </Box>\r\n                                        </CardContent>\r\n                                        <Button type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"primary\"> Save</Button>\r\n                                        <Button type=\"button\"\r\n                                            onClick={() => resetForm()} sx={{ margin: 1 }} variant=\"contained\" color=\"secondary\">\r\n                                            Reset\r\n                                        </Button>\r\n                                        <Button type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"error\" onClick={handleClose}> Close</Button>\r\n                            </Card>\r\n                      \r\n\r\n                            </Box>\r\n                        </div>\r\n                    </Container>\r\n                </Box>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}