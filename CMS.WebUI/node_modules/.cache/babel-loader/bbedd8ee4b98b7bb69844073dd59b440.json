{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\LFMS\\\\LFMS.WebUI\\\\src\\\\content\\\\pages\\\\Components\\\\Users\\\\UserForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { Post, Get } from \"../../../../services/common.service\";\nimport { dropdowns } from '../../../../services/dropdowns.service';\nimport { Button, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box, Modal, Snackbar, Alert, Autocomplete } from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport { object, string, number } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 800,\n  bgcolor: 'background.paper',\n  boxShadow: 24,\n  p: 4\n};\nexport const UserForm = _ref => {\n  _s();\n\n  let {\n    clearForm,\n    userFormFunc,\n    userData,\n    rerenderUserTable,\n    AddButtonLabel\n  } = _ref;\n  const [loading, setLoading] = useState(false);\n  const [roles, setRoles] = useState([]);\n  const [selectedRole, setSelectedRole] = useState();\n  const [locations, setLocations] = useState([]);\n  const [selectedLocations, setSelectedLocations] = useState([]);\n  const [selectedLocation, setSelectedLocation] = useState();\n  const [openSuccessAlert, setopenSuccessAlert] = useState(false);\n  const [openErrorAlert, setopenErrorAlert] = useState(false);\n  const [messageErorr, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    reset(initialValues);\n    clearForm();\n  };\n\n  const validationSchema = object({\n    UserID: number().optional(),\n    UserName: string().nonempty('User Name is required').max(200, 'User Name must be less than 200 characters'),\n    Password: string().nonempty('Password is required').max(200, 'Password must be less than 200 characters'),\n    PersonName: string().nonempty('Person Name is required').max(200, 'Person Name must be less than 200 characters'),\n    Email: string().nonempty('Email is required').max(200, 'Email must be less than 200 characters') //Role: object()\n    //.nonempty('Role Name is required')\n    //.max(200, 'Role Name must be less than 200 characters'),\n    //Remarks: string().nonempty('Remark is required')\n\n  });\n\n  const handleAlertClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setopenSuccessAlert(false);\n    setopenErrorAlert(false);\n  };\n\n  const initialValues = {\n    UserName: \"\",\n    PersonName: \"\",\n    Password: \"\",\n    Email: \"\",\n    RoleID: 0,\n    RoleName: \"\",\n    Remarks: \"\",\n    UserLocations: []\n  };\n\n  const showModal = () => {\n    setOpen(true);\n    reset(initialValues);\n  };\n\n  const resetForm = () => {\n    reset(initialValues);\n    clearForm();\n  };\n\n  useEffect(() => {\n    userFormFunc.current = handleOpen;\n    reset(userData);\n    loadDropdowns();\n  }, []);\n  useEffect(() => {\n    setSelectedRole({\n      RoleID: userData.RoleID,\n      RoleName: userData.RoleName\n    });\n\n    let _userLocations = locations.filter(x => userData.UserLocations.includes(x.LocationID));\n\n    setSelectedLocations(_userLocations);\n    reset(userData);\n  }, [userData, userFormFunc]);\n  const {\n    register,\n    formState: {\n      errors,\n      isSubmitSuccessful\n    },\n    reset,\n    handleSubmit,\n    setValue\n  } = useForm({\n    resolver: zodResolver(validationSchema)\n  });\n  useEffect(() => {\n    if (isSubmitSuccessful) {\n      reset();\n    }\n  }, [isSubmitSuccessful]);\n\n  const onSubmitHandler = values => {\n    values.RoleID = selectedRole === null || selectedRole === void 0 ? void 0 : selectedRole.RoleID;\n    handleFormSubmit(values);\n  };\n\n  const handleFormSubmit = formValue => {\n    var _UserID;\n\n    let _url = 'Security/AddUser';\n\n    if (formValue.UserID != null && formValue.UserID > 0) {\n      _url = 'Security/EditUser';\n    }\n\n    let _userID = (_UserID = formValue.UserID) !== null && _UserID !== void 0 ? _UserID : -1;\n\n    setLoading(true);\n    Get('master/IsNameExists?table=[User]&column=UserName&id=UserID&idValue=' + _userID + '&columnValue=' + formValue.UserName).then(response => {\n      if (response.data.status == 'success') {\n        let _user = {\n          'User': formValue,\n          'UserLocations': selectedLocations === null || selectedLocations === void 0 ? void 0 : selectedLocations.map(x => x.LocationID)\n        };\n        Post(_url, _user).then(response => {\n          if (response.data.status == 'success') {\n            setopenSuccessAlert(true);\n            setSuccessMessage('successfully saved');\n            handleClose();\n            rerenderUserTable();\n          }\n        }, error => {\n          const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n          setLoading(false);\n          setopenErrorAlert(true);\n          setErrorMessage(resMessage);\n        });\n      } else {\n        alert('Record Already Exists!');\n      }\n    }, error => {\n      const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n      setLoading(false);\n    });\n  };\n\n  const loadDropdowns = () => {\n    dropdowns.getAllRoles().then(x => setRoles(x));\n    dropdowns.getAllLocations().then(x => setLocations(x));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Snackbar, {\n      open: openSuccessAlert,\n      autoHideDuration: 5000,\n      onClose: handleAlertClose,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleAlertClose,\n        variant: \"filled\",\n        severity: \"success\",\n        sx: {\n          width: '100%'\n        },\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: openErrorAlert,\n      autoHideDuration: 5000,\n      onClose: handleAlertClose,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleAlertClose,\n        variant: \"filled\",\n        severity: \"error\",\n        sx: {\n          width: '100%'\n        },\n        children: messageErorr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      sx: {\n        margin: 1,\n        height: '53px'\n      },\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: showModal,\n      children: [\" \", AddButtonLabel]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"modal-modal-title\",\n      \"aria-describedby\": \"modal-modal-description\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: style,\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          maxWidth: \"md\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"register-form\",\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              component: \"form\",\n              noValidate: true,\n              autoComplete: \"off\",\n              onSubmit: handleSubmit(onSubmitHandler),\n              children: /*#__PURE__*/_jsxDEV(Card, {\n                children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n                  title: \"Enter User Type Detail\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                  children: /*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      '& .MuiTextField-root': {\n                        my: 1,\n                        width: '25ch'\n                      }\n                    },\n                    children: /*#__PURE__*/_jsxDEV(Grid, {\n                      container: true,\n                      direction: \"row\",\n                      justifyContent: \"center\",\n                      alignItems: \"stretch\",\n                      spacing: 1,\n                      children: [/*#__PURE__*/_jsxDEV(Grid, {\n                        item: true,\n                        xs: 6,\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          children: /*#__PURE__*/_jsxDEV(TextField, {\n                            style: {\n                              width: '100%'\n                            },\n                            required: true,\n                            id: \"outlined-required\",\n                            label: \"User Name\",\n                            ...register('UserName'),\n                            fullWidth: true,\n                            error: !!errors['UserName'],\n                            helperText: errors['UserName'] ? errors['UserName'].message : ''\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 218,\n                            columnNumber: 49\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 217,\n                          columnNumber: 45\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: /*#__PURE__*/_jsxDEV(TextField, {\n                            style: {\n                              width: '100%'\n                            },\n                            required: true,\n                            id: \"outlined-required\",\n                            label: \"Password\",\n                            ...register('Password'),\n                            fullWidth: true,\n                            error: !!errors['Password'],\n                            helperText: errors['Password'] ? errors['Password'].message : ''\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 223,\n                            columnNumber: 53\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 222,\n                          columnNumber: 49\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: /*#__PURE__*/_jsxDEV(TextField, {\n                            style: {\n                              width: '100%'\n                            },\n                            required: true,\n                            id: \"outlined-required\",\n                            label: \"Email\",\n                            ...register('Email'),\n                            fullWidth: true,\n                            error: !!errors['Email'],\n                            helperText: errors['Email'] ? errors['Email'].message : ''\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 235,\n                            columnNumber: 53\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 234,\n                          columnNumber: 49\n                        }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n                          multiple: true,\n                          id: \"tags-outlined\",\n                          options: locations,\n                          onChange: (event, newValue) => {\n                            setSelectedLocations(newValue);\n                          },\n                          value: selectedLocations,\n                          getOptionLabel: option => option.LocationName,\n                          filterSelectedOptions: true,\n                          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                            style: {\n                              width: '100%'\n                            },\n                            label: \"Locations\",\n                            placeholder: \"Locations\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 252,\n                            columnNumber: 57\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 244,\n                          columnNumber: 53\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 216,\n                        columnNumber: 45\n                      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                        item: true,\n                        xs: 6,\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          children: /*#__PURE__*/_jsxDEV(TextField, {\n                            style: {\n                              width: '100%'\n                            },\n                            required: true,\n                            id: \"outlined-required\",\n                            label: \"Person Name\",\n                            ...register('PersonName'),\n                            fullWidth: true,\n                            error: !!errors['PersonName'],\n                            helperText: errors['PersonName'] ? errors['PersonName'].message : ''\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 258,\n                            columnNumber: 53\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 257,\n                          columnNumber: 49\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                            onChange: (event, newValue) => {\n                              setSelectedRole(newValue);\n                            },\n                            value: selectedRole,\n                            disablePortal: true,\n                            style: {\n                              width: '100%'\n                            },\n                            id: \"drpRole\",\n                            options: roles,\n                            getOptionLabel: role => role.RoleName,\n                            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                              style: {\n                                width: '100%'\n                              },\n                              ...params,\n                              label: \"Role\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 277,\n                              columnNumber: 86\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 270,\n                            columnNumber: 57\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 269,\n                          columnNumber: 45\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: /*#__PURE__*/_jsxDEV(TextField, {\n                            style: {\n                              width: '100%'\n                            },\n                            required: true,\n                            id: \"outlined-password-input\",\n                            label: \"Remarks\",\n                            type: \"remarks\",\n                            multiline: true,\n                            rows: 4.5,\n                            maxRows: 4.5,\n                            autoComplete: \"current-password\",\n                            ...register('Remarks'),\n                            fullWidth: true,\n                            error: !!errors['Remarks'],\n                            helperText: errors['Remarks'] ? errors['Remarks'].message : ''\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 281,\n                            columnNumber: 49\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 280,\n                          columnNumber: 45\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 256,\n                        columnNumber: 45\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 215,\n                      columnNumber: 41\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 214,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 213,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  sx: {\n                    margin: 1\n                  },\n                  variant: \"contained\",\n                  color: \"primary\",\n                  children: \" Save\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 293,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"button\",\n                  onClick: () => resetForm(),\n                  sx: {\n                    margin: 1\n                  },\n                  variant: \"contained\",\n                  color: \"secondary\",\n                  children: \"Reset\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 294,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  sx: {\n                    margin: 1\n                  },\n                  variant: \"contained\",\n                  color: \"error\",\n                  onClick: handleClose,\n                  children: \" Close\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 298,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(UserForm, \"j12fchcL1d8Ay4DeuOVAw8SCMq0=\", false, function () {\n  return [useForm];\n});\n\n_c = UserForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserForm\");","map":{"version":3,"sources":["E:/Projects/LFMS/LFMS.WebUI/src/content/pages/Components/Users/UserForm.tsx"],"names":["useEffect","useState","Post","Get","dropdowns","Button","Container","Grid","Card","CardHeader","CardContent","Divider","TextField","Box","Modal","Snackbar","Alert","Autocomplete","useForm","object","string","number","zodResolver","style","position","top","left","transform","width","bgcolor","boxShadow","p","UserForm","clearForm","userFormFunc","userData","rerenderUserTable","AddButtonLabel","loading","setLoading","roles","setRoles","selectedRole","setSelectedRole","locations","setLocations","selectedLocations","setSelectedLocations","selectedLocation","setSelectedLocation","openSuccessAlert","setopenSuccessAlert","openErrorAlert","setopenErrorAlert","messageErorr","setErrorMessage","successMessage","setSuccessMessage","open","setOpen","handleOpen","handleClose","reset","initialValues","validationSchema","UserID","optional","UserName","nonempty","max","Password","PersonName","Email","handleAlertClose","event","reason","RoleID","RoleName","Remarks","UserLocations","showModal","resetForm","current","loadDropdowns","_userLocations","filter","x","includes","LocationID","register","formState","errors","isSubmitSuccessful","handleSubmit","setValue","resolver","onSubmitHandler","values","handleFormSubmit","formValue","_url","_userID","then","response","data","status","_user","map","error","resMessage","message","toString","alert","getAllRoles","getAllLocations","margin","height","my","newValue","option","LocationName","params","role"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { Post, Get, Delete } from \"../../../../services/common.service\";\r\nimport { dropdowns } from '../../../../services/dropdowns.service';\r\nimport { Button, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box, Modal, Snackbar, Alert, Autocomplete, Chip } from '@mui/material';\r\nimport { useForm, SubmitHandler } from 'react-hook-form';\r\nimport { object, string, number, TypeOf } from 'zod';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { RoleModel, LocationModel } from '../../../../types/security.type';\r\n\r\nconst style = {\r\n    position: 'absolute' as 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 800,\r\n    bgcolor: 'background.paper',\r\n    boxShadow: 24,\r\n    p: 4,\r\n};\r\nexport type UserModel = {\r\n    UserID?: number;\r\n    UserName: string;\r\n    PersonName: string;\r\n    Password: string;\r\n    Email: string;\r\n    RoleID?: number;\r\n    RoleName: string;\r\n    Remarks: string;\r\n    UserLocations: number[];\r\n};\r\nexport const UserForm: React.FC<any> = ({ clearForm, userFormFunc, userData, rerenderUserTable, AddButtonLabel }) => {\r\n\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [roles, setRoles] = useState<RoleModel[]>([]);\r\n    const [selectedRole, setSelectedRole] = useState<RoleModel>();\r\n    const [locations, setLocations] = useState<LocationModel[]>([]);\r\n    const [selectedLocations, setSelectedLocations] = useState<LocationModel[] | undefined>([]);\r\n    const [selectedLocation, setSelectedLocation] = useState<LocationModel>();\r\n    const [openSuccessAlert, setopenSuccessAlert] = useState<boolean>(false);\r\n    const [openErrorAlert, setopenErrorAlert] = useState<boolean>(false);\r\n    const [messageErorr, setErrorMessage] = useState<string>(\"\");\r\n    const [successMessage, setSuccessMessage] = useState<string>(\"\");\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        reset(initialValues);\r\n        clearForm();\r\n    }\r\n    const validationSchema = object({\r\n        UserID: number().optional(),\r\n        UserName: string()\r\n            .nonempty('User Name is required')\r\n            .max(200, 'User Name must be less than 200 characters'),\r\n        Password: string()\r\n            .nonempty('Password is required')\r\n            .max(200, 'Password must be less than 200 characters'),\r\n        PersonName: string()\r\n            .nonempty('Person Name is required')\r\n            .max(200, 'Person Name must be less than 200 characters'),\r\n        Email: string()\r\n            .nonempty('Email is required')\r\n            .max(200, 'Email must be less than 200 characters'),\r\n        //Role: object()\r\n        //.nonempty('Role Name is required')\r\n        //.max(200, 'Role Name must be less than 200 characters'),\r\n        //Remarks: string().nonempty('Remark is required')\r\n    });\r\n    const handleAlertClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setopenSuccessAlert(false);\r\n        setopenErrorAlert(false);\r\n    };\r\n    const initialValues: UserModel = {\r\n        UserName: \"\",\r\n        PersonName: \"\",\r\n        Password: \"\",\r\n        Email: \"\",\r\n        RoleID: 0,\r\n        RoleName: \"\",\r\n        Remarks: \"\",\r\n        UserLocations:[]\r\n    };\r\n    const showModal = () => {\r\n        setOpen(true);\r\n        reset(initialValues);\r\n    }\r\n    const resetForm = () => {\r\n        reset(initialValues);\r\n        clearForm();\r\n    }\r\n    useEffect(() => {\r\n        userFormFunc.current = handleOpen\r\n        reset(userData);\r\n        loadDropdowns();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setSelectedRole({ RoleID: userData.RoleID, RoleName: userData.RoleName });\r\n        let _userLocations: LocationModel[] = locations.filter(x => userData.UserLocations.includes(x.LocationID));\r\n        setSelectedLocations(_userLocations);\r\n        reset(userData);\r\n    }, [userData, userFormFunc]);\r\n\r\n    \r\n    const {\r\n        register,\r\n        formState: { errors, isSubmitSuccessful },\r\n        reset,\r\n        handleSubmit,\r\n        setValue\r\n    } = useForm<UserModel>({\r\n        resolver: zodResolver(validationSchema)\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (isSubmitSuccessful) {\r\n            reset();\r\n        }\r\n    }, [isSubmitSuccessful]);\r\n\r\n    const onSubmitHandler: SubmitHandler<UserModel> = (values) => {\r\n        values.RoleID = selectedRole?.RoleID;\r\n        handleFormSubmit(values);\r\n    };\r\n    const handleFormSubmit = (formValue: UserModel) => {\r\n        let _url = 'Security/AddUser';\r\n        if (formValue.UserID != null && formValue.UserID > 0) {\r\n            _url = 'Security/EditUser';\r\n        }\r\n        let _userID = formValue!.UserID ?? -1;\r\n        setLoading(true);\r\n        Get('master/IsNameExists?table=[User]&column=UserName&id=UserID&idValue=' + _userID + '&columnValue=' + formValue!.UserName).then(\r\n            (response: any) => {\r\n                if (response.data.status == 'success') {\r\n                    let _user = { 'User': formValue, 'UserLocations': selectedLocations?.map(x => x.LocationID) };\r\n                    Post(_url, _user).then(\r\n                        (response: any) => {\r\n                            if (response.data.status == 'success') {\r\n                                setopenSuccessAlert(true);\r\n                                setSuccessMessage('successfully saved');\r\n                                handleClose();\r\n                                rerenderUserTable();\r\n                            }\r\n                        },\r\n                        (error: any) => {\r\n                            const resMessage =\r\n                                (error.response &&\r\n                                    error.response.data &&\r\n                                    error.response.data.message) ||\r\n                                error.message ||\r\n                                error.toString();\r\n                            setLoading(false);\r\n                            setopenErrorAlert(true);\r\n                            setErrorMessage(resMessage);\r\n                        }\r\n                    );\r\n                }\r\n                else {\r\n                    alert('Record Already Exists!');\r\n                }\r\n            },\r\n            (error: any) => {\r\n                const resMessage =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setLoading(false);\r\n            }\r\n        );\r\n    };\r\n    const loadDropdowns = () => {\r\n        dropdowns.getAllRoles().then(x => setRoles(x));\r\n        dropdowns.getAllLocations().then(x => setLocations(x));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Snackbar open={openSuccessAlert} autoHideDuration={5000} onClose={handleAlertClose}>\r\n                <Alert onClose={handleAlertClose} variant=\"filled\" severity=\"success\" sx={{ width: '100%' }}>\r\n                    {successMessage}\r\n                </Alert>\r\n            </Snackbar>\r\n            <Snackbar open={openErrorAlert} autoHideDuration={5000} onClose={handleAlertClose}>\r\n                <Alert onClose={handleAlertClose} variant=\"filled\" severity=\"error\" sx={{ width: '100%' }}>\r\n                    {messageErorr}\r\n                </Alert>\r\n            </Snackbar>\r\n            <Button sx={{ margin: 1, height: '53px' }} variant=\"contained\" color=\"primary\" onClick={showModal}> {AddButtonLabel}</Button>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={style}>\r\n                    <Container maxWidth=\"md\">\r\n                        <div className=\"register-form\">\r\n                            <Box component='form'\r\n                                noValidate\r\n                                autoComplete='off'\r\n                                onSubmit={handleSubmit(onSubmitHandler)}>\r\n                                <Card>\r\n                                    <CardHeader title=\"Enter User Type Detail\" />\r\n                                    <Divider />\r\n                                    <CardContent>\r\n                                        <Box sx={{ '& .MuiTextField-root': { my: 1, width: '25ch' },}} >\r\n                                        <Grid container direction=\"row\" justifyContent=\"center\" alignItems=\"stretch\" spacing={1}>\r\n                                            <Grid item xs={6}>\r\n                                            <div>\r\n                                                <TextField style={{ width: '100%' }} required\r\n                                                    id=\"outlined-required\" label=\"User Name\"  {...register('UserName')} fullWidth\r\n                                                    error={!!errors['UserName']} helperText={errors['UserName'] ? errors['UserName'].message : ''} />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <TextField\r\n                                                        style={{ width: '100%' }}\r\n                                                        required\r\n                                                        id=\"outlined-required\"\r\n                                                        label=\"Password\"\r\n                                                        {...register('Password')}\r\n                                                        fullWidth\r\n                                                        error={!!errors['Password']}\r\n                                                        helperText={errors['Password'] ? errors['Password'].message : ''}\r\n                                                    />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <TextField style={{ width: '100%' }} required\r\n                                                        id=\"outlined-required\"\r\n                                                        label=\"Email\"\r\n                                                        {...register('Email')}\r\n                                                        fullWidth\r\n                                                        error={!!errors['Email']}\r\n                                                        helperText={errors['Email'] ? errors['Email'].message : ''}\r\n                                                    />\r\n                                                </div>\r\n                                                    <Autocomplete multiple id=\"tags-outlined\" options={locations}\r\n                                                        onChange={(event, newValue) => {\r\n                                                            setSelectedLocations(newValue!);\r\n                                                        }}\r\n                                                        value={selectedLocations}\r\n                                                    getOptionLabel={(option: LocationModel) => option.LocationName}\r\n                                                    filterSelectedOptions\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField {...params} style={{ width: '100%' }} label=\"Locations\" placeholder=\"Locations\" />\r\n                                                    )}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <div>\r\n                                                    <TextField\r\n                                                        style={{ width: '100%' }}\r\n                                                        required\r\n                                                        id=\"outlined-required\"\r\n                                                        label=\"Person Name\"\r\n                                                        {...register('PersonName')}\r\n                                                        fullWidth\r\n                                                        error={!!errors['PersonName']}\r\n                                                        helperText={errors['PersonName'] ? errors['PersonName'].message : ''}\r\n                                                    />\r\n                                                </div>\r\n                                            <div >\r\n                                                        <Autocomplete\r\n                                                            onChange={(event, newValue) => {\r\n                                                                setSelectedRole(newValue!);\r\n                                                            }}\r\n                                                            value={selectedRole}\r\n                                                            disablePortal style={{ width: '100%' }} id=\"drpRole\" options={roles}\r\n                                                            getOptionLabel={role => role.RoleName} \r\n                                                            renderInput={(params) => <TextField style={{ width: '100%' }}  {...params} label=\"Role\" />}\r\n                                                    />\r\n                                            </div>\r\n                                            <div>\r\n                                                <TextField style={{ width: '100%' }} required\r\n                                                    id=\"outlined-password-input\" label=\"Remarks\" type=\"remarks\" multiline rows={4.5} maxRows={4.5} autoComplete=\"current-password\"\r\n                                                    {...register('Remarks')}\r\n                                                    fullWidth\r\n                                                    error={!!errors['Remarks']}\r\n                                                    helperText={errors['Remarks'] ? errors['Remarks'].message : ''}\r\n                                                />\r\n                                                </div>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        </Box>\r\n                                    </CardContent>\r\n                                    <Button type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"primary\"> Save</Button>\r\n                                    <Button type=\"button\"\r\n                                        onClick={() => resetForm()} sx={{ margin: 1 }} variant=\"contained\" color=\"secondary\">\r\n                                        Reset\r\n                                    </Button>\r\n                                    <Button type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"error\" onClick={handleClose}> Close</Button>\r\n                            </Card>\r\n                      \r\n\r\n                            </Box>\r\n                        </div>\r\n                    </Container>\r\n                </Box>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}