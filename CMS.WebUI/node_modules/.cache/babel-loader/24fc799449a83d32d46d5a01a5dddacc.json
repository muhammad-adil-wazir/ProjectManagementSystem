{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\LFMS\\\\LFMS.WebUI\\\\src\\\\content\\\\pages\\\\Components\\\\Users\\\\UserForm.tsx\",\n    _s = $RefreshSig$();\n\n////import { Helmet } from 'react-helmet-async';\nimport { useEffect, useState } from 'react';\nimport * as Yup from \"yup\";\nimport { Post } from \"../../../../services/common.service\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { Button, Container, Grid, Card, CardHeader, CardContent, Divider, Autocomplete } from '@mui/material';\nimport Footer from '../../../../components/Footer';\nimport { dropdowns } from '../../../../services/dropdowns.service';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport { useForm } from 'react-hook-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst label = {\n  inputProps: {\n    'aria-label': 'Switch demo'\n  }\n};\nexport function UserForm(_ref) {\n  _s();\n\n  let {\n    user\n  } = _ref;\n  const [designations, setDesignations] = useState([]);\n  const [selectedDesignation, setSelectedDesignation] = useState();\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const initialValues = {\n    username: \"\",\n    password: \"\"\n  };\n  useEffect(() => {\n    //directorFormFunc.current = handleOpen\n    //reset(directorData);\n    dropdowns.getAllDirectorTypes().then(x => setDirectorTypes(x));\n    dropdowns.getAllDesignations().then(x => setDesignations(x));\n  }, []);\n  const validationSchema = Yup.object().shape({\n    UserName: Yup.string().required('Username is required').min(2, 'Username must be at least 6 characters').max(20, 'Username must not exceed 20 characters')\n  });\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(validationSchema)\n  });\n\n  const onSubmit = data => {\n    setMessage(\"gbghihiou\");\n    setLoading(true);\n    Post('token', data).then(response => {\n      // history.push(\"/profile\");\n      if (response.data.token) {\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      }\n\n      window.location.href = '/';\n    }, error => {\n      const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n      setLoading(false);\n      setMessage(resMessage);\n    }); //console.log(JSON.stringify(data, null, 2));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"sm\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"register-form\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit(onSubmit),\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            justifyContent: \"center\",\n            alignItems: \"stretch\",\n            spacing: 6,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Card, {\n                sx: {\n                  px: 12\n                },\n                children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n                  title: \"Enter User Detailss\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                  children: /*#__PURE__*/_jsxDEV(Box, {\n                    component: \"form\",\n                    sx: {\n                      '& .MuiTextField-root': {\n                        m: 1,\n                        width: '25ch'\n                      }\n                    },\n                    noValidate: true,\n                    autoComplete: \"off\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      children: /*#__PURE__*/_jsxDEV(TextField, {\n                        style: {\n                          width: '100%'\n                        },\n                        value: user.UserName,\n                        required: true,\n                        id: \"outlined-required\",\n                        label: \"Username\",\n                        ...register('UserName'),\n                        className: `form-control ${errors.UserName ? 'is-invalid' : ''}`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 110,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 109,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: /*#__PURE__*/_jsxDEV(TextField, {\n                        style: {\n                          width: '100%'\n                        },\n                        required: true,\n                        id: \"outlined-password-input\",\n                        label: \"PersonName\",\n                        type: \"text\",\n                        ...register('PersonName'),\n                        className: `form-control ${errors.PersonName ? 'is-invalid' : ''}`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 120,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 119,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: /*#__PURE__*/_jsxDEV(TextField, {\n                        style: {\n                          width: '100%'\n                        },\n                        required: true,\n                        id: \"outlined-password-input\",\n                        label: \"Email\",\n                        type: \"text\",\n                        ...register('Email'),\n                        className: `form-control ${errors.Email ? 'is-invalid' : ''}`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 129,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 128,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: /*#__PURE__*/_jsxDEV(TextField, {\n                        style: {\n                          width: '100%'\n                        },\n                        required: true,\n                        id: \"outlined-password-input\",\n                        label: \"Role\",\n                        type: \"text\",\n                        ...register('RoleID'),\n                        className: `form-control ${errors.RoleID ? 'is-invalid' : ''}`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 138,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 137,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: classes.root,\n                      children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                        value: value,\n                        onChange: (event, newValue) => {\n                          setValue(newValue);\n                        },\n                        multiple: true,\n                        id: \"tags-filled\",\n                        options: userList.map(option => option.name),\n                        freeSolo: true,\n                        renderTags: (value, getTagProps) => value.map((option, index) => /*#__PURE__*/_jsxDEV(Chip, {\n                          variant: \"outlined\",\n                          label: option,\n                          ...getTagProps({\n                            index\n                          })\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 158,\n                          columnNumber: 61\n                        }, this)),\n                        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                          variant: \"filled\",\n                          label: \"Users\",\n                          placeholder: \"Search\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 166,\n                          columnNumber: 57\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 147,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 146,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 101,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  sx: {\n                    margin: 1\n                  },\n                  variant: \"contained\",\n                  color: \"primary\",\n                  children: \"Login\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"button\",\n                  onClick: () => reset(),\n                  sx: {\n                    margin: 1\n                  },\n                  variant: \"contained\",\n                  color: \"secondary\",\n                  children: \"Reset\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n} //export default UserForm;\n\n_s(UserForm, \"37EQOl4sSlWpJcBjUHU+1o0dqos=\", false, function () {\n  return [useForm];\n});\n\n_c = UserForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserForm\");","map":{"version":3,"sources":["E:/Projects/LFMS/LFMS.WebUI/src/content/pages/Components/Users/UserForm.tsx"],"names":["useEffect","useState","Yup","Post","yupResolver","Button","Container","Grid","Card","CardHeader","CardContent","Divider","Autocomplete","Footer","dropdowns","Box","TextField","useForm","label","inputProps","UserForm","user","designations","setDesignations","selectedDesignation","setSelectedDesignation","loading","setLoading","message","setMessage","initialValues","username","password","getAllDirectorTypes","then","x","setDirectorTypes","getAllDesignations","validationSchema","object","shape","UserName","string","required","min","max","register","handleSubmit","reset","formState","errors","resolver","onSubmit","data","response","token","localStorage","setItem","JSON","stringify","window","location","href","error","resMessage","toString","px","m","width","PersonName","Email","RoleID","classes","root","value","event","newValue","setValue","userList","map","option","name","getTagProps","index","params","margin"],"mappings":"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","sourcesContent":["////import { Helmet } from 'react-helmet-async';\r\nimport PageTitle from '../../../../components/PageTitle';\r\nimport { useEffect, useState } from 'react';\r\nimport * as Yup from \"yup\";\r\nimport { Post } from \"../../../../services/common.service\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nimport PageTitleWrapper from '../../../../components/PageTitleWrapper';\r\nimport { Button, IconButton, Container, Grid, Card, CardHeader, CardContent, Divider, Autocomplete } from '@mui/material';\r\nimport Footer from '../../../../components/Footer';\r\nimport { dropdowns } from '../../../../services/dropdowns.service';\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport { useForm } from 'react-hook-form';\r\nimport { LocationModel, RoleModel } from '../../../../types/security.type';\r\n\r\nconst label = { inputProps: { 'aria-label': 'Switch demo' } };\r\nexport type UserModel = {\r\n    UserName: string;\r\n    PersonName: string;\r\n    Email: string;\r\n    Password: string;\r\n    RoleID: string;\r\n};\r\nexport function UserForm({ user }) {\r\n    const [designations, setDesignations] = useState<RoleModel[]>([]);\r\n    const [selectedDesignation, setSelectedDesignation] = useState<RoleModel>();\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    const initialValues: {\r\n        username: string;\r\n        password: string;\r\n    } = {\r\n        username: \"\",\r\n        password: \"\",\r\n    };\r\n    useEffect(() => {\r\n        //directorFormFunc.current = handleOpen\r\n        //reset(directorData);\r\n        dropdowns.getAllDirectorTypes().then(x => setDirectorTypes(x));\r\n        dropdowns.getAllDesignations().then(x => setDesignations(x));\r\n    }, [])\r\n    const validationSchema = Yup.object().shape({\r\n        UserName: Yup.string()\r\n            .required('Username is required')\r\n            .min(2, 'Username must be at least 6 characters')\r\n            .max(20, 'Username must not exceed 20 characters'),\r\n    });\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { errors }\r\n    } = useForm<UserModel>({\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n    const onSubmit = (data: UserModel) => {\r\n        setMessage(\"gbghihiou\");\r\n        setLoading(true);\r\n        Post('token', data).then(\r\n            (response: any) => {\r\n                // history.push(\"/profile\");\r\n                if (response.data.token) {\r\n                    localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n                }\r\n                window.location.href = '/';\r\n            },\r\n            (error: any) => {\r\n                const resMessage =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setLoading(false);\r\n                setMessage(resMessage);\r\n            }\r\n        );\r\n        //console.log(JSON.stringify(data, null, 2));\r\n    };\r\n    return (\r\n        <>\r\n\r\n\r\n            <Container maxWidth=\"sm\">\r\n                <div className=\"register-form\">\r\n                    <form onSubmit={handleSubmit(onSubmit)}>\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justifyContent=\"center\"\r\n                            alignItems=\"stretch\"\r\n                            spacing={6}\r\n                        >\r\n                            <Grid item xs={12} >\r\n                                <Card sx={{ px: 12 }}>\r\n                                    <CardHeader title=\"Enter User Detailss\" />\r\n                                    <Divider />\r\n                                    <CardContent>\r\n                                        <Box\r\n                                            component=\"form\"\r\n                                            sx={{\r\n                                                '& .MuiTextField-root': { m: 1, width: '25ch' },\r\n                                            }}\r\n                                            noValidate\r\n                                            autoComplete=\"off\"\r\n                                        >\r\n                                            <div>\r\n                                                <TextField\r\n                                                    style={{ width: '100%' }} value={user.UserName}\r\n                                                    required\r\n                                                    id=\"outlined-required\"\r\n                                                    label=\"Username\"\r\n                                                    {...register('UserName')}\r\n                                                    className={`form-control ${errors.UserName ? 'is-invalid' : ''}`}\r\n                                                />\r\n                                            </div>\r\n                                            <div>\r\n                                                <TextField style={{ width: '100%' }} required\r\n                                                    id=\"outlined-password-input\"\r\n                                                    label=\"PersonName\"\r\n                                                    type=\"text\"\r\n                                                    {...register('PersonName')}\r\n                                                    className={`form-control ${errors.PersonName ? 'is-invalid' : ''}`}\r\n                                                />\r\n                                            </div>\r\n                                            <div>\r\n                                                <TextField style={{ width: '100%' }} required\r\n                                                    id=\"outlined-password-input\"\r\n                                                    label=\"Email\"\r\n                                                    type=\"text\"\r\n                                                    {...register('Email')}\r\n                                                    className={`form-control ${errors.Email ? 'is-invalid' : ''}`}\r\n                                                />\r\n                                            </div>\r\n                                            <div>\r\n                                                <TextField style={{ width: '100%' }} required\r\n                                                    id=\"outlined-password-input\"\r\n                                                    label=\"Role\"\r\n                                                    type=\"text\"\r\n                                                    {...register('RoleID')}\r\n                                                    className={`form-control ${errors.RoleID ? 'is-invalid' : ''}`}\r\n                                                />\r\n                                            </div>\r\n                                            <div className={classes.root}>\r\n                                                <Autocomplete\r\n                                                    value={value}\r\n                                                    onChange={(event, newValue) => {\r\n                                                        setValue(newValue);\r\n                                                    }}\r\n                                                    multiple\r\n                                                    id=\"tags-filled\"\r\n                                                    options={userList.map((option) => option.name)}\r\n                                                    freeSolo\r\n                                                    renderTags={(value: string[], getTagProps) =>\r\n                                                        value.map((option: string, index: number) => (\r\n                                                            <Chip\r\n                                                                variant=\"outlined\"\r\n                                                                label={option}\r\n                                                                {...getTagProps({ index })}\r\n                                                            />\r\n                                                        ))\r\n                                                    }\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            variant=\"filled\"\r\n                                                            label=\"Users\"\r\n                                                            placeholder=\"Search\"\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                            </div>\r\n                                        </Box>\r\n                                    </CardContent>\r\n                                    <Button type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"primary\">\r\n                                        Login\r\n                                    </Button>\r\n                                    <Button type=\"button\"\r\n                                        onClick={() => reset()} sx={{ margin: 1 }} variant=\"contained\" color=\"secondary\">\r\n                                        Reset\r\n                                    </Button>\r\n\r\n                                </Card>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </div>\r\n                <Footer />\r\n            </Container>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n//export default UserForm;\r\n"]},"metadata":{},"sourceType":"module"}