{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\LFMS\\\\LFMS.WebUI\\\\src\\\\content\\\\pages\\\\Components\\\\Director\\\\DirectorForm.tsx\",\n    _s = $RefreshSig$();\n\n////import { Helmet } from 'react-helmet-async';\nimport { useEffect, useState } from 'react';\nimport * as Yup from \"yup\";\nimport { post } from \"../../../../services/common.service\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { Button, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box, Modal, Autocomplete, Tabs, Tab, AppBar, useTheme } from '@mui/material';\nimport SwipeableViews from 'react-swipeable-views';\nimport { useForm } from 'react-hook-form';\nimport { dropdowns } from '../../../../services/dropdowns.service';\nimport { TabPanel, switchTab } from '../../../../components/TabPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst label = {\n  inputProps: {\n    'aria-label': 'Switch demo'\n  }\n};\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 1000,\n  bgcolor: 'background.paper',\n  //border: '2px solid #000',\n  boxShadow: 24\n};\nexport const DirectorForm = _ref => {\n  _s();\n\n  let {\n    clearForm,\n    directorFormFunc,\n    directorData,\n    rerenderTable\n  } = _ref;\n  const [openSuccessAlert, setopenSuccessAlert] = useState(false);\n  const [directorTypes, setDirectorTypes] = useState([]);\n  const [selectedDirectorType, setSelectedDirectorType] = useState();\n  const [designations, setDesignations] = useState([]);\n  const [selectedDesignation, setSelectedDesignation] = useState();\n  const [nationalities, setNationalities] = useState([]);\n  const [selectedNationality, setSelectedNationality] = useState();\n  const [idTypes, setIDTypes] = useState([]);\n  const [selectedIdType, setselectedIdType] = useState();\n  const [placeOfBirths, setPlaceOfBirths] = useState([]);\n  const [selectedPlaceOfBirth, setSelectedPlaceOfBirth] = useState();\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [open, setOpen] = useState(false);\n  const theme = useTheme();\n\n  const handleOpen = () => {\n    setOpen(true); // reset(companyTypeData);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    reset(directorData);\n    clearForm();\n  };\n\n  const handleAlertClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setopenSuccessAlert(false);\n  };\n\n  const showModal = () => {\n    setOpen(true);\n    reset(directorData);\n  };\n\n  const resetForm = () => {\n    reset(directorData);\n    clearForm();\n  };\n\n  const changeTab = index => {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`\n    };\n  };\n\n  useEffect(() => {\n    directorFormFunc.current = handleOpen;\n    reset(directorData);\n    loadDropdowns();\n  }, []);\n  useEffect(() => {\n    reset(directorData);\n  }, [directorData, directorFormFunc]);\n\n  const loadDropdowns = () => {\n    dropdowns.getAllDirectorTypes().then(x => setDirectorTypes(x));\n    dropdowns.getAllDesignations().then(x => setDesignations(x));\n    dropdowns.getAllNationalities().then(x => setNationalities(x));\n    dropdowns.getAllPlaceOfBirths().then(x => setPlaceOfBirths(x));\n  };\n\n  const validationSchema = Yup.object().shape({\n    CompanyNumber: Yup.string().required('Director is required').min(2, 'Director must be at least 2 characters').max(20, 'Director must not exceed 20 characters'),\n    PlaceOfBirthID: Yup.string().required('Director is required')\n  });\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(validationSchema)\n  });\n\n  const onClickBack = () => {\n    setSelectedTabIndex(0);\n    switchTab(0); //switchTab(1);\n    //handleFormSubmit(data);\n    //console.log(JSON.stringify(data, null, 2));\n  };\n\n  const onSubmit = data => {\n    var _PlaceOfBirthID;\n\n    //data.PlaceOfBirthID == 0;// selectedPlaceOfBirth?.PlaceOfBirthID;\n    let abc = data;\n    abc.PlaceOfBirthID = (_PlaceOfBirthID = selectedPlaceOfBirth.PlaceOfBirthID) !== null && _PlaceOfBirthID !== void 0 ? _PlaceOfBirthID : 0;\n    console.log(abc);\n    setSelectedTabIndex(1);\n    switchTab(1); //handleFormSubmit(data);\n    //console.log(JSON.stringify(data, null, 2));\n  };\n\n  const handleFormSubmit = director => {\n    setLoading(true);\n    let _url = 'director/AddDirector';\n\n    if (director.DirectorID != undefined) {\n      _url = 'director/EditDirector';\n    }\n\n    post(_url, director).then(response => {\n      // history.push(\"/profile\");\n      if (response.data.status == 'success') {\n        setMessage('Director Successfully Saved!');\n        setopenSuccessAlert(true);\n        handleClose();\n        rerenderTable();\n      }\n    }, error => {\n      const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n      setLoading(false);\n      setMessage(resMessage);\n    });\n  };\n\n  const handleTabChange = (event, newValue) => {\n    setSelectedTabIndex(newValue);\n  };\n\n  const handleChangeIndex = index => {\n    setSelectedTabIndex(index);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      sx: {\n        margin: 1\n      },\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleOpen,\n      children: \"Open modal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"modal-modal-title\",\n      \"aria-describedby\": \"modal-modal-description\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        noValidate: true,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: style,\n          children: /*#__PURE__*/_jsxDEV(Container, {\n            maxWidth: \"md\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"register-form\",\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                direction: \"row\",\n                justifyContent: \"center\",\n                alignItems: \"stretch\",\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(Card, {\n                    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n                      title: \"Enter Director Detail\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 195,\n                      columnNumber: 41\n                    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 196,\n                      columnNumber: 41\n                    }, this), /*#__PURE__*/_jsxDEV(AppBar, {\n                      position: \"static\",\n                      children: /*#__PURE__*/_jsxDEV(Tabs, {\n                        value: selectedTabIndex,\n                        onChange: handleTabChange,\n                        indicatorColor: \"secondary\",\n                        textColor: \"inherit\",\n                        variant: \"fullWidth\",\n                        \"aria-label\": \"full width tabs example\",\n                        children: [/*#__PURE__*/_jsxDEV(Tab, {\n                          label: \"Details\",\n                          ...switchTab(0)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 206,\n                          columnNumber: 49\n                        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n                          label: \"Uploads\",\n                          ...switchTab(1)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 207,\n                          columnNumber: 49\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 198,\n                        columnNumber: 45\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 197,\n                      columnNumber: 41\n                    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                      children: /*#__PURE__*/_jsxDEV(Box, {\n                        component: \"div\",\n                        sx: {\n                          '& .MuiTextField-root': {\n                            my: 1,\n                            width: '25ch'\n                          }\n                        },\n                        children: /*#__PURE__*/_jsxDEV(SwipeableViews, {\n                          axis: theme.direction === 'rtl' ? 'x-reverse' : 'x',\n                          index: selectedTabIndex,\n                          onChangeIndex: handleChangeIndex,\n                          children: [/*#__PURE__*/_jsxDEV(TabPanel, {\n                            value: selectedTabIndex,\n                            index: 0,\n                            dir: theme.direction,\n                            children: /*#__PURE__*/_jsxDEV(Grid, {\n                              container: true,\n                              direction: \"row\",\n                              justifyContent: \"center\",\n                              alignItems: \"stretch\",\n                              spacing: 1,\n                              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                                item: true,\n                                xs: 4,\n                                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                                  children: [/*#__PURE__*/_jsxDEV(TextField, {\n                                    style: {\n                                      width: '100%'\n                                    },\n                                    required: true,\n                                    id: \"outlined-required\",\n                                    label: \"DirectorName\",\n                                    ...register('DirectorName'),\n                                    className: `form-control ${errors.DirectorName ? 'is-invalid' : ''}`\n                                  }, void 0, false, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 232,\n                                    columnNumber: 69\n                                  }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n                                    disablePortal: true,\n                                    style: {\n                                      width: '100%'\n                                    },\n                                    id: \"drpDirectorType\",\n                                    options: directorTypes,\n                                    getOptionLabel: directorTypes => directorTypes.DirectorTypeName,\n                                    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                                      style: {\n                                        width: '100%'\n                                      },\n                                      ...params,\n                                      label: \"Director Type\"\n                                    }, void 0, false, {\n                                      fileName: _jsxFileName,\n                                      lineNumber: 245,\n                                      columnNumber: 98\n                                    }, this)\n                                  }, void 0, false, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 240,\n                                    columnNumber: 69\n                                  }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n                                    disablePortal: true,\n                                    style: {\n                                      width: '100%'\n                                    },\n                                    id: \"drpDesignation\",\n                                    options: designations,\n                                    getOptionLabel: designations => designations.DesignationName,\n                                    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                                      style: {\n                                        width: '100%'\n                                      },\n                                      ...params,\n                                      label: \"Designation\"\n                                    }, void 0, false, {\n                                      fileName: _jsxFileName,\n                                      lineNumber: 252,\n                                      columnNumber: 98\n                                    }, this)\n                                  }, void 0, false, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 247,\n                                    columnNumber: 69\n                                  }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n                                    disablePortal: true,\n                                    style: {\n                                      width: '100%'\n                                    },\n                                    id: \"drpNationality\",\n                                    options: nationalities,\n                                    getOptionLabel: nationalities => nationalities.NationalityName,\n                                    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                                      style: {\n                                        width: '100%'\n                                      },\n                                      ...params,\n                                      label: \"Nationality\"\n                                    }, void 0, false, {\n                                      fileName: _jsxFileName,\n                                      lineNumber: 259,\n                                      columnNumber: 98\n                                    }, this)\n                                  }, void 0, false, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 254,\n                                    columnNumber: 69\n                                  }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                                    style: {\n                                      width: '100%'\n                                    },\n                                    required: true,\n                                    id: \"outlined-required\",\n                                    label: \"Company Name\",\n                                    ...register('CompanyName'),\n                                    className: `form-control ${errors.CompanyName ? 'is-invalid' : ''}`\n                                  }, void 0, false, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 261,\n                                    columnNumber: 69\n                                  }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                                    style: {\n                                      width: '100%'\n                                    },\n                                    required: true,\n                                    id: \"outlined-required\",\n                                    label: \"CompanyNumber\",\n                                    ...register('CompanyNumber'),\n                                    className: `form-control ${errors.CompanyNumber ? 'is-invalid' : ''}`\n                                  }, void 0, false, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 270,\n                                    columnNumber: 73\n                                  }, this)]\n                                }, void 0, true, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 231,\n                                  columnNumber: 65\n                                }, this)\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 230,\n                                columnNumber: 61\n                              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                                item: true,\n                                xs: 4,\n                                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                                  children: [/*#__PURE__*/_jsxDEV(TextField, {\n                                    style: {\n                                      width: '100%'\n                                    },\n                                    required: true,\n                                    id: \"outlined-required\",\n                                    label: \"Email\",\n                                    ...register('Email'),\n                                    className: `form-control ${errors.Email ? 'is-invalid' : ''}`\n                                  }, void 0, false, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 282,\n                                    columnNumber: 73\n                                  }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n                                    disablePortal: true,\n                                    style: {\n                                      width: '100%'\n                                    },\n                                    id: \"drpIDType\",\n                                    options: idTypes,\n                                    getOptionLabel: idType => idType.IDTypeName,\n                                    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                                      style: {\n                                        width: '100%'\n                                      },\n                                      ...params,\n                                      label: \"ID Type\"\n                                    }, void 0, false, {\n                                      fileName: _jsxFileName,\n                                      lineNumber: 295,\n                                      columnNumber: 102\n                                    }, this)\n                                  }, void 0, false, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 290,\n                                    columnNumber: 73\n                                  }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                                    style: {\n                                      width: '100%'\n                                    },\n                                    required: true,\n                                    id: \"outlined-required\",\n                                    label: \"ID Number\",\n                                    ...register('IDNumber'),\n                                    className: `form-control ${errors.IDNumber ? 'is-invalid' : ''}`\n                                  }, void 0, false, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 297,\n                                    columnNumber: 73\n                                  }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                                    type: \"date\",\n                                    style: {\n                                      width: '100%'\n                                    },\n                                    required: true,\n                                    id: \"outlined-required\",\n                                    ...register('AppointmentDate'),\n                                    className: `form-control ${errors.AppointmentDate ? 'is-invalid' : ''}`\n                                  }, void 0, false, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 305,\n                                    columnNumber: 73\n                                  }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                                    multiline: true,\n                                    rows: 4.5,\n                                    maxRows: 4.5,\n                                    style: {\n                                      width: '100%'\n                                    },\n                                    type: \"text\",\n                                    required: true,\n                                    id: \"outlined-required\",\n                                    label: \"Permanant Address\",\n                                    ...register('PermanentAddress'),\n                                    className: `form-control ${errors.PermanentAddress ? 'is-invalid' : ''}`\n                                  }, void 0, false, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 313,\n                                    columnNumber: 73\n                                  }, this)]\n                                }, void 0, true, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 281,\n                                  columnNumber: 69\n                                }, this)\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 280,\n                                columnNumber: 61\n                              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                                item: true,\n                                xs: 4,\n                                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                                  children: [/*#__PURE__*/_jsxDEV(TextField, {\n                                    style: {\n                                      width: '100%'\n                                    },\n                                    required: true,\n                                    id: \"outlined-required\",\n                                    label: \"Contact Number\",\n                                    ...register('ContactNumber'),\n                                    className: `form-control ${errors.ContactNumber ? 'is-invalid' : ''}`\n                                  }, void 0, false, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 325,\n                                    columnNumber: 73\n                                  }, this), /*#__PURE__*/_jsxDEV(Autocomplete, { ...register('PlaceOfBirthID'),\n                                    onChange: (event, newValue) => {\n                                      setSelectedPlaceOfBirth(newValue);\n                                    },\n                                    value: selectedPlaceOfBirth,\n                                    disablePortal: true,\n                                    style: {\n                                      width: '100%'\n                                    },\n                                    id: \"drpPlaceOfBirth\",\n                                    options: placeOfBirths,\n                                    getOptionLabel: placeOfBirths => placeOfBirths.PlaceOfBirthName,\n                                    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                                      style: {\n                                        width: '100%'\n                                      },\n                                      ...params,\n                                      label: \"Place of Birth\",\n                                      required: true\n                                    }, void 0, false, {\n                                      fileName: _jsxFileName,\n                                      lineNumber: 343,\n                                      columnNumber: 102\n                                    }, this)\n                                  }, void 0, false, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 333,\n                                    columnNumber: 73\n                                  }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                                    type: \"date\",\n                                    style: {\n                                      width: '100%'\n                                    },\n                                    required: true,\n                                    id: \"outlined-required\",\n                                    label: \"DOB\",\n                                    ...register('DOB'),\n                                    className: `form-control ${errors.DOB ? 'is-invalid' : ''}`\n                                  }, void 0, false, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 347,\n                                    columnNumber: 69\n                                  }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                                    type: \"date\",\n                                    style: {\n                                      width: '100%'\n                                    },\n                                    required: true,\n                                    id: \"outlined-required\",\n                                    label: \"Cessation Date\",\n                                    ...register('CessationDate'),\n                                    className: `form-control ${errors.CessationDate ? 'is-invalid' : ''}`\n                                  }, void 0, false, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 355,\n                                    columnNumber: 73\n                                  }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                                    multiline: true,\n                                    rows: 4.5,\n                                    maxRows: 4.5,\n                                    style: {\n                                      width: '100%'\n                                    },\n                                    type: \"text\",\n                                    required: true,\n                                    id: \"outlined-required\",\n                                    label: \"Comunication Address\",\n                                    ...register('ComunicationAddress'),\n                                    className: `form-control ${errors.ComunicationAddress ? 'is-invalid' : ''}`\n                                  }, void 0, false, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 364,\n                                    columnNumber: 73\n                                  }, this)]\n                                }, void 0, true, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 324,\n                                  columnNumber: 65\n                                }, this)\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 323,\n                                columnNumber: 61\n                              }, this)]\n                            }, void 0, true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 223,\n                              columnNumber: 57\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 222,\n                            columnNumber: 53\n                          }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n                            value: selectedTabIndex,\n                            index: 1,\n                            dir: theme.direction\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 376,\n                            columnNumber: 53\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 217,\n                          columnNumber: 49\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 211,\n                        columnNumber: 45\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 210,\n                      columnNumber: 41\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 194,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 193,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: [/*#__PURE__*/_jsxDEV(Button, {\n                    style: {\n                      display: selectedTabIndex == 1 ? 'none' : undefined\n                    },\n                    type: \"submit\",\n                    sx: {\n                      margin: 1\n                    },\n                    variant: \"contained\",\n                    color: \"primary\",\n                    children: \" Next\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 385,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    style: {\n                      display: selectedTabIndex == 0 ? 'none' : undefined\n                    },\n                    type: \"submit\",\n                    sx: {\n                      margin: 1\n                    },\n                    variant: \"contained\",\n                    color: \"primary\",\n                    children: \" Save\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 386,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    onClick: () => onClickBack(),\n                    sx: {\n                      margin: 1\n                    },\n                    style: {\n                      display: selectedTabIndex == 0 ? 'none' : undefined\n                    },\n                    type: \"button\",\n                    variant: \"contained\",\n                    color: \"primary\",\n                    children: \" Back\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 387,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    type: \"button\",\n                    onClick: () => resetForm(),\n                    sx: {\n                      margin: 1\n                    },\n                    variant: \"contained\",\n                    color: \"secondary\",\n                    children: \"Reset\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 388,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 384,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(DirectorForm, \"kCV+ao84GVcVI6xGGMKKcIL1EYc=\", false, function () {\n  return [useTheme, useForm];\n});\n\n_c = DirectorForm;\nexport default DirectorForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"DirectorForm\");","map":{"version":3,"sources":["E:/Projects/LFMS/LFMS.WebUI/src/content/pages/Components/Director/DirectorForm.tsx"],"names":["useEffect","useState","Yup","post","yupResolver","Button","Container","Grid","Card","CardHeader","CardContent","Divider","TextField","Box","Modal","Autocomplete","Tabs","Tab","AppBar","useTheme","SwipeableViews","useForm","dropdowns","TabPanel","switchTab","label","inputProps","style","position","top","left","transform","width","bgcolor","boxShadow","DirectorForm","clearForm","directorFormFunc","directorData","rerenderTable","openSuccessAlert","setopenSuccessAlert","directorTypes","setDirectorTypes","selectedDirectorType","setSelectedDirectorType","designations","setDesignations","selectedDesignation","setSelectedDesignation","nationalities","setNationalities","selectedNationality","setSelectedNationality","idTypes","setIDTypes","selectedIdType","setselectedIdType","placeOfBirths","setPlaceOfBirths","selectedPlaceOfBirth","setSelectedPlaceOfBirth","selectedTabIndex","setSelectedTabIndex","loading","setLoading","message","setMessage","open","setOpen","theme","handleOpen","handleClose","reset","handleAlertClose","event","reason","showModal","resetForm","changeTab","index","id","current","loadDropdowns","getAllDirectorTypes","then","x","getAllDesignations","getAllNationalities","getAllPlaceOfBirths","validationSchema","object","shape","CompanyNumber","string","required","min","max","PlaceOfBirthID","register","handleSubmit","formState","errors","resolver","onClickBack","onSubmit","data","abc","console","log","handleFormSubmit","director","_url","DirectorID","undefined","response","status","error","resMessage","toString","handleTabChange","newValue","handleChangeIndex","margin","my","direction","DirectorName","DirectorTypeName","params","DesignationName","NationalityName","CompanyName","Email","idType","IDTypeName","IDNumber","AppointmentDate","PermanentAddress","ContactNumber","PlaceOfBirthName","DOB","CessationDate","ComunicationAddress","display"],"mappings":";;;AAAA;AAEA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,IAAT,QAAoB,qCAApB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AAGA,SAASC,MAAT,EAA6BC,SAA7B,EAAwCC,IAAxC,EAA8CC,IAA9C,EAAoDC,UAApD,EAAgEC,WAAhE,EAA6EC,OAA7E,EAAsFC,SAAtF,EAAiGC,GAAjG,EAAsGC,KAAtG,EAAyHC,YAAzH,EAAuIC,IAAvI,EAA6IC,GAA7I,EAAkJC,MAAlJ,EAA0JC,QAA1J,QAA0K,eAA1K;AAEA,OAAOC,cAAP,MAA2B,uBAA3B;AAGA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,SAASC,SAAT,QAA0B,wCAA1B;AAGA,SAASC,QAAT,EAAkCC,SAAlC,QAAmD,iCAAnD;;;AAEA,MAAMC,KAAK,GAAG;AAAEC,EAAAA,UAAU,EAAE;AAAE,kBAAc;AAAhB;AAAd,CAAd;AAEA,MAAMC,KAAK,GAAG;AACVC,EAAAA,QAAQ,EAAE,UADA;AAEVC,EAAAA,GAAG,EAAE,KAFK;AAGVC,EAAAA,IAAI,EAAE,KAHI;AAIVC,EAAAA,SAAS,EAAE,uBAJD;AAKVC,EAAAA,KAAK,EAAE,IALG;AAMVC,EAAAA,OAAO,EAAE,kBANC;AAOV;AACAC,EAAAA,SAAS,EAAE;AARD,CAAd;AAYA,OAAO,MAAMC,YAA2B,GAAG,QAAiE;AAAA;;AAAA,MAAhE;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,gBAAb;AAA+BC,IAAAA,YAA/B;AAA6CC,IAAAA;AAA7C,GAAgE;AACxG,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CxC,QAAQ,CAAU,KAAV,CAAxD;AAEA,QAAM,CAACyC,aAAD,EAAgBC,gBAAhB,IAAoC1C,QAAQ,CAAsB,EAAtB,CAAlD;AACA,QAAM,CAAC2C,oBAAD,EAAuBC,uBAAvB,IAAkD5C,QAAQ,EAAhE;AACA,QAAM,CAAC6C,YAAD,EAAeC,eAAf,IAAkC9C,QAAQ,CAAqB,EAArB,CAAhD;AACA,QAAM,CAAC+C,mBAAD,EAAsBC,sBAAtB,IAAgDhD,QAAQ,EAA9D;AACA,QAAM,CAACiD,aAAD,EAAgBC,gBAAhB,IAAoClD,QAAQ,CAAqB,EAArB,CAAlD;AACA,QAAM,CAACmD,mBAAD,EAAsBC,sBAAtB,IAAgDpD,QAAQ,EAA9D;AACA,QAAM,CAACqD,OAAD,EAAUC,UAAV,IAAwBtD,QAAQ,CAAgB,EAAhB,CAAtC;AACA,QAAM,CAACuD,cAAD,EAAiBC,iBAAjB,IAAsCxD,QAAQ,EAApD;AACA,QAAM,CAACyD,aAAD,EAAgBC,gBAAhB,IAAoC1D,QAAQ,CAAsB,EAAtB,CAAlD;AACA,QAAM,CAAC2D,oBAAD,EAAuBC,uBAAvB,IAAkD5D,QAAQ,EAAhE;AACA,QAAM,CAAC6D,gBAAD,EAAmBC,mBAAnB,IAA0C9D,QAAQ,CAAC,CAAD,CAAxD;AACA,QAAM,CAAC+D,OAAD,EAAUC,UAAV,IAAwBhE,QAAQ,CAAU,KAAV,CAAtC;AACA,QAAM,CAACiE,OAAD,EAAUC,UAAV,IAAwBlE,QAAQ,CAAS,EAAT,CAAtC;AACA,QAAM,CAACmE,IAAD,EAAOC,OAAP,IAAkBpE,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAMqE,KAAK,GAAGnD,QAAQ,EAAtB;;AAEA,QAAMoD,UAAU,GAAG,MAAM;AACrBF,IAAAA,OAAO,CAAC,IAAD,CAAP,CADqB,CAErB;AACH,GAHD;;AAIA,QAAMG,WAAW,GAAG,MAAM;AACtBH,IAAAA,OAAO,CAAC,KAAD,CAAP;AACAI,IAAAA,KAAK,CAACnC,YAAD,CAAL;AACAF,IAAAA,SAAS;AACZ,GAJD;;AAKA,QAAMsC,gBAAgB,GAAG,CAACC,KAAD,EAAuCC,MAAvC,KAA2D;AAChF,QAAIA,MAAM,KAAK,WAAf,EAA4B;AACxB;AACH;;AAEDnC,IAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACH,GAND;;AAQA,QAAMoC,SAAS,GAAG,MAAM;AACpBR,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAI,IAAAA,KAAK,CAACnC,YAAD,CAAL;AACH,GAHD;;AAIA,QAAMwC,SAAS,GAAG,MAAM;AACpBL,IAAAA,KAAK,CAACnC,YAAD,CAAL;AACAF,IAAAA,SAAS;AACZ,GAHD;;AAIA,QAAM2C,SAAS,GAAIC,KAAD,IAAmB;AACjC,WAAO;AACHC,MAAAA,EAAE,EAAG,cAAaD,KAAM,EADrB;AAEH,uBAAkB,mBAAkBA,KAAM;AAFvC,KAAP;AAIH,GALD;;AAMAhF,EAAAA,SAAS,CAAC,MAAM;AACZqC,IAAAA,gBAAgB,CAAC6C,OAAjB,GAA2BX,UAA3B;AACAE,IAAAA,KAAK,CAACnC,YAAD,CAAL;AACA6C,IAAAA,aAAa;AAChB,GAJQ,EAIN,EAJM,CAAT;AAMAnF,EAAAA,SAAS,CAAC,MAAM;AACZyE,IAAAA,KAAK,CAACnC,YAAD,CAAL;AACH,GAFQ,EAEN,CAACA,YAAD,EAAeD,gBAAf,CAFM,CAAT;;AAIA,QAAM8C,aAAa,GAAG,MAAM;AACxB7D,IAAAA,SAAS,CAAC8D,mBAAV,GAAgCC,IAAhC,CAAqCC,CAAC,IAAI3C,gBAAgB,CAAC2C,CAAD,CAA1D;AACAhE,IAAAA,SAAS,CAACiE,kBAAV,GAA+BF,IAA/B,CAAoCC,CAAC,IAAIvC,eAAe,CAACuC,CAAD,CAAxD;AACAhE,IAAAA,SAAS,CAACkE,mBAAV,GAAgCH,IAAhC,CAAqCC,CAAC,IAAInC,gBAAgB,CAACmC,CAAD,CAA1D;AACAhE,IAAAA,SAAS,CAACmE,mBAAV,GAAgCJ,IAAhC,CAAqCC,CAAC,IAAI3B,gBAAgB,CAAC2B,CAAD,CAA1D;AACH,GALD;;AAMA,QAAMI,gBAAgB,GAAGxF,GAAG,CAACyF,MAAJ,GAAaC,KAAb,CAAmB;AACxCC,IAAAA,aAAa,EAAE3F,GAAG,CAAC4F,MAAJ,GACVC,QADU,CACD,sBADC,EAEVC,GAFU,CAEN,CAFM,EAEH,wCAFG,EAGVC,GAHU,CAGN,EAHM,EAGF,wCAHE,CADyB;AAKxCC,IAAAA,cAAc,EAAEhG,GAAG,CAAC4F,MAAJ,GACXC,QADW,CACF,sBADE;AALwB,GAAnB,CAAzB;AASA,QAAM;AACFI,IAAAA,QADE;AAEFC,IAAAA,YAFE;AAGF3B,IAAAA,KAHE;AAIF4B,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AAJT,MAKFjF,OAAO,CAAgB;AACvBkF,IAAAA,QAAQ,EAAEnG,WAAW,CAACsF,gBAAD;AADE,GAAhB,CALX;;AAQA,QAAMc,WAAW,GAAG,MAAM;AACtBzC,IAAAA,mBAAmB,CAAC,CAAD,CAAnB;AACAvC,IAAAA,SAAS,CAAC,CAAD,CAAT,CAFsB,CAGtB;AACA;AACA;AACH,GAND;;AAOA,QAAMiF,QAAQ,GAAIC,IAAD,IAAyB;AAAA;;AACtC;AACA,QAAIC,GAAG,GAAGD,IAAV;AACAC,IAAAA,GAAG,CAACT,cAAJ,sBAAqBtC,oBAAoB,CAAEsC,cAA3C,6DAA6D,CAA7D;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA5C,IAAAA,mBAAmB,CAAC,CAAD,CAAnB;AACAvC,IAAAA,SAAS,CAAC,CAAD,CAAT,CANsC,CAQtC;AACA;AACH,GAVD;;AAWA,QAAMsF,gBAAgB,GAAIC,QAAD,IAA6B;AAClD9C,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,QAAI+C,IAAI,GAAG,sBAAX;;AACA,QAAID,QAAQ,CAACE,UAAT,IAAuBC,SAA3B,EAAsC;AAClCF,MAAAA,IAAI,GAAG,uBAAP;AACH;;AACD7G,IAAAA,IAAI,CAAC6G,IAAD,EAAOD,QAAP,CAAJ,CAAqB1B,IAArB,CACK8B,QAAD,IAAmB;AACf;AACA,UAAIA,QAAQ,CAACT,IAAT,CAAcU,MAAd,IAAwB,SAA5B,EAAuC;AACnCjD,QAAAA,UAAU,CAAC,8BAAD,CAAV;AACA1B,QAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACA+B,QAAAA,WAAW;AACXjC,QAAAA,aAAa;AAChB;AACJ,KATL,EAUK8E,KAAD,IAAgB;AACZ,YAAMC,UAAU,GACXD,KAAK,CAACF,QAAN,IACGE,KAAK,CAACF,QAAN,CAAeT,IADlB,IAEGW,KAAK,CAACF,QAAN,CAAeT,IAAf,CAAoBxC,OAFxB,IAGAmD,KAAK,CAACnD,OAHN,IAIAmD,KAAK,CAACE,QAAN,EALJ;AAMAtD,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,UAAU,CAACmD,UAAD,CAAV;AACH,KAnBL;AAqBH,GA3BD;;AA6BA,QAAME,eAAe,GAAG,CAAC7C,KAAD,EAA8B8C,QAA9B,KAAmD;AACvE1D,IAAAA,mBAAmB,CAAC0D,QAAD,CAAnB;AACH,GAFD;;AAGA,QAAMC,iBAAiB,GAAI1C,KAAD,IAAmB;AACzCjB,IAAAA,mBAAmB,CAACiB,KAAD,CAAnB;AACH,GAFD;;AAIA,sBACI;AAAA,4BACI,QAAC,MAAD;AAAQ,MAAA,EAAE,EAAE;AAAE2C,QAAAA,MAAM,EAAE;AAAV,OAAZ;AAA2B,MAAA,OAAO,EAAC,WAAnC;AAA+C,MAAA,KAAK,EAAC,SAArD;AAA+D,MAAA,OAAO,EAAEpD,UAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,KAAD;AACI,MAAA,IAAI,EAAEH,IADV;AAEI,MAAA,OAAO,EAAEI,WAFb;AAGI,yBAAgB,mBAHpB;AAII,0BAAiB,yBAJrB;AAAA,6BAMI;AAAM,QAAA,QAAQ,EAAE4B,YAAY,CAACK,QAAD,CAA5B;AAAwC,QAAA,UAAU,MAAlD;AAAA,+BACA,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE9E,KAAT;AAAA,iCACI,QAAC,SAAD;AAAW,YAAA,QAAQ,EAAC,IAApB;AAAA,mCACI;AAAK,cAAA,SAAS,EAAC,eAAf;AAAA,qCAEI,QAAC,IAAD;AACI,gBAAA,SAAS,MADb;AAEI,gBAAA,SAAS,EAAC,KAFd;AAGI,gBAAA,cAAc,EAAC,QAHnB;AAII,gBAAA,UAAU,EAAC,SAJf;AAAA,wCAOI,QAAC,IAAD;AAAM,kBAAA,IAAI,MAAV;AAAW,kBAAA,EAAE,EAAE,EAAf;AAAA,yCACI,QAAC,IAAD;AAAA,4CACI,QAAC,UAAD;AAAY,sBAAA,KAAK,EAAC;AAAlB;AAAA;AAAA;AAAA;AAAA,4BADJ,eAEI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,4BAFJ,eAGI,QAAC,MAAD;AAAQ,sBAAA,QAAQ,EAAC,QAAjB;AAAA,6CACI,QAAC,IAAD;AACI,wBAAA,KAAK,EAAEmC,gBADX;AAEI,wBAAA,QAAQ,EAAE0D,eAFd;AAGI,wBAAA,cAAc,EAAC,WAHnB;AAII,wBAAA,SAAS,EAAC,SAJd;AAKI,wBAAA,OAAO,EAAC,WALZ;AAMI,sCAAW,yBANf;AAAA,gDAQI,QAAC,GAAD;AAAK,0BAAA,KAAK,EAAC,SAAX;AAAA,6BAAyBhG,SAAS,CAAC,CAAD;AAAlC;AAAA;AAAA;AAAA;AAAA,gCARJ,eASI,QAAC,GAAD;AAAK,0BAAA,KAAK,EAAC,SAAX;AAAA,6BAAyBA,SAAS,CAAC,CAAD;AAAlC;AAAA;AAAA;AAAA;AAAA,gCATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,4BAHJ,eAgBI,QAAC,WAAD;AAAA,6CACI,QAAC,GAAD;AACI,wBAAA,SAAS,EAAC,KADd;AAEI,wBAAA,EAAE,EAAE;AACA,kDAAwB;AAAEoG,4BAAAA,EAAE,EAAE,CAAN;AAAS5F,4BAAAA,KAAK,EAAE;AAAhB;AADxB,yBAFR;AAAA,+CAMI,QAAC,cAAD;AACI,0BAAA,IAAI,EAAEsC,KAAK,CAACuD,SAAN,KAAoB,KAApB,GAA4B,WAA5B,GAA0C,GADpD;AAEI,0BAAA,KAAK,EAAE/D,gBAFX;AAGI,0BAAA,aAAa,EAAE4D,iBAHnB;AAAA,kDAKI,QAAC,QAAD;AAAU,4BAAA,KAAK,EAAE5D,gBAAjB;AAAmC,4BAAA,KAAK,EAAE,CAA1C;AAA6C,4BAAA,GAAG,EAAEQ,KAAK,CAACuD,SAAxD;AAAA,mDACI,QAAC,IAAD;AACI,8BAAA,SAAS,MADb;AAEI,8BAAA,SAAS,EAAC,KAFd;AAGI,8BAAA,cAAc,EAAC,QAHnB;AAII,8BAAA,UAAU,EAAC,SAJf;AAKI,8BAAA,OAAO,EAAE,CALb;AAAA,sDAOI,QAAC,IAAD;AAAM,gCAAA,IAAI,MAAV;AAAW,gCAAA,EAAE,EAAE,CAAf;AAAA,uDACI;AAAA,0DACI,QAAC,SAAD;AACI,oCAAA,KAAK,EAAE;AAAE7F,sCAAAA,KAAK,EAAE;AAAT,qCADX;AAEI,oCAAA,QAAQ,MAFZ;AAGI,oCAAA,EAAE,EAAC,mBAHP;AAII,oCAAA,KAAK,EAAC,cAJV;AAAA,uCAKQmE,QAAQ,CAAC,cAAD,CALhB;AAMI,oCAAA,SAAS,EAAG,gBAAeG,MAAM,CAACwB,YAAP,GAAsB,YAAtB,GAAqC,EAAG;AANvE;AAAA;AAAA;AAAA;AAAA,0CADJ,eASI,QAAC,YAAD;AACI,oCAAA,aAAa,MADjB;AACkB,oCAAA,KAAK,EAAE;AAAE9F,sCAAAA,KAAK,EAAE;AAAT,qCADzB;AAEI,oCAAA,EAAE,EAAC,iBAFP;AAGI,oCAAA,OAAO,EAAEU,aAHb;AAII,oCAAA,cAAc,EAAEA,aAAa,IAAIA,aAAa,CAACqF,gBAJnD;AAKI,oCAAA,WAAW,EAAGC,MAAD,iBAAY,QAAC,SAAD;AAAW,sCAAA,KAAK,EAAE;AAAEhG,wCAAAA,KAAK,EAAE;AAAT,uCAAlB;AAAA,yCAAyCgG,MAAzC;AAAiD,sCAAA,KAAK,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA;AAL7B;AAAA;AAAA;AAAA;AAAA,0CATJ,eAgBI,QAAC,YAAD;AACI,oCAAA,aAAa,MADjB;AACkB,oCAAA,KAAK,EAAE;AAAEhG,sCAAAA,KAAK,EAAE;AAAT,qCADzB;AAEI,oCAAA,EAAE,EAAC,gBAFP;AAGI,oCAAA,OAAO,EAAEc,YAHb;AAII,oCAAA,cAAc,EAAEA,YAAY,IAAIA,YAAY,CAACmF,eAJjD;AAKI,oCAAA,WAAW,EAAGD,MAAD,iBAAY,QAAC,SAAD;AAAW,sCAAA,KAAK,EAAE;AAAEhG,wCAAAA,KAAK,EAAE;AAAT,uCAAlB;AAAA,yCAAyCgG,MAAzC;AAAiD,sCAAA,KAAK,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA;AAL7B;AAAA;AAAA;AAAA;AAAA,0CAhBJ,eAuBI,QAAC,YAAD;AACI,oCAAA,aAAa,MADjB;AACkB,oCAAA,KAAK,EAAE;AAAEhG,sCAAAA,KAAK,EAAE;AAAT,qCADzB;AAEI,oCAAA,EAAE,EAAC,gBAFP;AAGI,oCAAA,OAAO,EAAEkB,aAHb;AAII,oCAAA,cAAc,EAAEA,aAAa,IAAIA,aAAa,CAACgF,eAJnD;AAKI,oCAAA,WAAW,EAAGF,MAAD,iBAAY,QAAC,SAAD;AAAW,sCAAA,KAAK,EAAE;AAAEhG,wCAAAA,KAAK,EAAE;AAAT,uCAAlB;AAAA,yCAAyCgG,MAAzC;AAAiD,sCAAA,KAAK,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA;AAL7B;AAAA;AAAA;AAAA;AAAA,0CAvBJ,eA8BI,QAAC,SAAD;AACI,oCAAA,KAAK,EAAE;AAAEhG,sCAAAA,KAAK,EAAE;AAAT,qCADX;AAEI,oCAAA,QAAQ,MAFZ;AAGI,oCAAA,EAAE,EAAC,mBAHP;AAII,oCAAA,KAAK,EAAC,cAJV;AAAA,uCAKQmE,QAAQ,CAAC,aAAD,CALhB;AAMI,oCAAA,SAAS,EAAG,gBAAeG,MAAM,CAAC6B,WAAP,GAAqB,YAArB,GAAoC,EAAG;AANtE;AAAA;AAAA;AAAA;AAAA,0CA9BJ,eAuCQ,QAAC,SAAD;AACI,oCAAA,KAAK,EAAE;AAAEnG,sCAAAA,KAAK,EAAE;AAAT,qCADX;AAEI,oCAAA,QAAQ,MAFZ;AAGI,oCAAA,EAAE,EAAC,mBAHP;AAII,oCAAA,KAAK,EAAC,eAJV;AAAA,uCAKQmE,QAAQ,CAAC,eAAD,CALhB;AAMI,oCAAA,SAAS,EAAG,gBAAeG,MAAM,CAACT,aAAP,GAAuB,YAAvB,GAAsC,EAAG;AANxE;AAAA;AAAA;AAAA;AAAA,0CAvCR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,sCAPJ,eAyDI,QAAC,IAAD;AAAM,gCAAA,IAAI,MAAV;AAAW,gCAAA,EAAE,EAAE,CAAf;AAAA,uDACQ;AAAA,0DACI,QAAC,SAAD;AACI,oCAAA,KAAK,EAAE;AAAE7D,sCAAAA,KAAK,EAAE;AAAT,qCADX;AAEI,oCAAA,QAAQ,MAFZ;AAGI,oCAAA,EAAE,EAAC,mBAHP;AAII,oCAAA,KAAK,EAAC,OAJV;AAAA,uCAKQmE,QAAQ,CAAC,OAAD,CALhB;AAMI,oCAAA,SAAS,EAAG,gBAAeG,MAAM,CAAC8B,KAAP,GAAe,YAAf,GAA8B,EAAG;AANhE;AAAA;AAAA;AAAA;AAAA,0CADJ,eASI,QAAC,YAAD;AACI,oCAAA,aAAa,MADjB;AACkB,oCAAA,KAAK,EAAE;AAAEpG,sCAAAA,KAAK,EAAE;AAAT,qCADzB;AAEI,oCAAA,EAAE,EAAC,WAFP;AAGI,oCAAA,OAAO,EAAEsB,OAHb;AAII,oCAAA,cAAc,EAAE+E,MAAM,IAAIA,MAAM,CAACC,UAJrC;AAKI,oCAAA,WAAW,EAAGN,MAAD,iBAAY,QAAC,SAAD;AAAW,sCAAA,KAAK,EAAE;AAAEhG,wCAAAA,KAAK,EAAE;AAAT,uCAAlB;AAAA,yCAAyCgG,MAAzC;AAAiD,sCAAA,KAAK,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA;AAL7B;AAAA;AAAA;AAAA;AAAA,0CATJ,eAgBI,QAAC,SAAD;AACI,oCAAA,KAAK,EAAE;AAAEhG,sCAAAA,KAAK,EAAE;AAAT,qCADX;AAEI,oCAAA,QAAQ,MAFZ;AAGI,oCAAA,EAAE,EAAC,mBAHP;AAII,oCAAA,KAAK,EAAC,WAJV;AAAA,uCAKQmE,QAAQ,CAAC,UAAD,CALhB;AAMI,oCAAA,SAAS,EAAG,gBAAeG,MAAM,CAACiC,QAAP,GAAkB,YAAlB,GAAiC,EAAG;AANnE;AAAA;AAAA;AAAA;AAAA,0CAhBJ,eAwBI,QAAC,SAAD;AAAW,oCAAA,IAAI,EAAC,MAAhB;AACI,oCAAA,KAAK,EAAE;AAAEvG,sCAAAA,KAAK,EAAE;AAAT,qCADX;AAEI,oCAAA,QAAQ,MAFZ;AAGI,oCAAA,EAAE,EAAC,mBAHP;AAAA,uCAKQmE,QAAQ,CAAC,iBAAD,CALhB;AAMI,oCAAA,SAAS,EAAG,gBAAeG,MAAM,CAACkC,eAAP,GAAyB,YAAzB,GAAwC,EAAG;AAN1E;AAAA;AAAA;AAAA;AAAA,0CAxBJ,eAgCI,QAAC,SAAD;AAAW,oCAAA,SAAS,MAApB;AAAqB,oCAAA,IAAI,EAAE,GAA3B;AAAgC,oCAAA,OAAO,EAAE,GAAzC;AACI,oCAAA,KAAK,EAAE;AAAExG,sCAAAA,KAAK,EAAE;AAAT,qCADX;AAC8B,oCAAA,IAAI,EAAC,MADnC;AAEI,oCAAA,QAAQ,MAFZ;AAGI,oCAAA,EAAE,EAAC,mBAHP;AAII,oCAAA,KAAK,EAAC,mBAJV;AAAA,uCAKQmE,QAAQ,CAAC,kBAAD,CALhB;AAMI,oCAAA,SAAS,EAAG,gBAAeG,MAAM,CAACmC,gBAAP,GAA0B,YAA1B,GAAyC,EAAG;AAN3E;AAAA;AAAA;AAAA;AAAA,0CAhCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADR;AAAA;AAAA;AAAA;AAAA,sCAzDJ,eAoGI,QAAC,IAAD;AAAM,gCAAA,IAAI,MAAV;AAAW,gCAAA,EAAE,EAAE,CAAf;AAAA,uDACI;AAAA,0DACQ,QAAC,SAAD;AACI,oCAAA,KAAK,EAAE;AAAEzG,sCAAAA,KAAK,EAAE;AAAT,qCADX;AAEI,oCAAA,QAAQ,MAFZ;AAGI,oCAAA,EAAE,EAAC,mBAHP;AAII,oCAAA,KAAK,EAAC,gBAJV;AAAA,uCAKQmE,QAAQ,CAAC,eAAD,CALhB;AAMI,oCAAA,SAAS,EAAG,gBAAeG,MAAM,CAACoC,aAAP,GAAuB,YAAvB,GAAsC,EAAG;AANxE;AAAA;AAAA;AAAA;AAAA,0CADR,eASQ,QAAC,YAAD,OACQvC,QAAQ,CAAC,gBAAD,CADhB;AAEI,oCAAA,QAAQ,EAAE,CAACxB,KAAD,EAAQ8C,QAAR,KAAqB;AAC3B5D,sCAAAA,uBAAuB,CAAC4D,QAAD,CAAvB;AACH,qCAJL;AAKI,oCAAA,KAAK,EAAE7D,oBALX;AAMA,oCAAA,aAAa,MANb;AAMc,oCAAA,KAAK,EAAE;AAAE5B,sCAAAA,KAAK,EAAE;AAAT,qCANrB;AAOA,oCAAA,EAAE,EAAC,iBAPH;AAQA,oCAAA,OAAO,EAAE0B,aART;AASA,oCAAA,cAAc,EAAEA,aAAa,IAAIA,aAAa,CAACiF,gBAT/C;AAUI,oCAAA,WAAW,EAAGX,MAAD,iBAAY,QAAC,SAAD;AAAW,sCAAA,KAAK,EAAE;AAAEhG,wCAAAA,KAAK,EAAE;AAAT,uCAAlB;AAAA,yCAAyCgG,MAAzC;AAAiD,sCAAA,KAAK,EAAC,gBAAvD;AACrB,sCAAA,QAAQ,EAAE;AADW;AAAA;AAAA;AAAA;AAAA;AAV7B;AAAA;AAAA;AAAA;AAAA,0CATR,eAuBI,QAAC,SAAD;AAAW,oCAAA,IAAI,EAAC,MAAhB;AACI,oCAAA,KAAK,EAAE;AAAEhG,sCAAAA,KAAK,EAAE;AAAT,qCADX;AAEI,oCAAA,QAAQ,MAFZ;AAGI,oCAAA,EAAE,EAAC,mBAHP;AAII,oCAAA,KAAK,EAAC,KAJV;AAAA,uCAKQmE,QAAQ,CAAC,KAAD,CALhB;AAMI,oCAAA,SAAS,EAAG,gBAAeG,MAAM,CAACsC,GAAP,GAAa,YAAb,GAA4B,EAAG;AAN9D;AAAA;AAAA;AAAA;AAAA,0CAvBJ,eA+BQ,QAAC,SAAD;AAAW,oCAAA,IAAI,EAAC,MAAhB;AACI,oCAAA,KAAK,EAAE;AAAE5G,sCAAAA,KAAK,EAAE;AAAT,qCADX;AAEI,oCAAA,QAAQ,MAFZ;AAGI,oCAAA,EAAE,EAAC,mBAHP;AAII,oCAAA,KAAK,EAAC,gBAJV;AAAA,uCAKQmE,QAAQ,CAAC,eAAD,CALhB;AAMI,oCAAA,SAAS,EAAG,gBAAeG,MAAM,CAACuC,aAAP,GAAuB,YAAvB,GAAsC,EAAG;AANxE;AAAA;AAAA;AAAA;AAAA,0CA/BR,eAwCQ,QAAC,SAAD;AAAW,oCAAA,SAAS,MAApB;AAAqB,oCAAA,IAAI,EAAE,GAA3B;AAAgC,oCAAA,OAAO,EAAE,GAAzC;AACI,oCAAA,KAAK,EAAE;AAAE7G,sCAAAA,KAAK,EAAE;AAAT,qCADX;AAC8B,oCAAA,IAAI,EAAC,MADnC;AAEI,oCAAA,QAAQ,MAFZ;AAGI,oCAAA,EAAE,EAAC,mBAHP;AAII,oCAAA,KAAK,EAAC,sBAJV;AAAA,uCAKQmE,QAAQ,CAAC,qBAAD,CALhB;AAMI,oCAAA,SAAS,EAAG,gBAAeG,MAAM,CAACwC,mBAAP,GAA6B,YAA7B,GAA4C,EAAG;AAN9E;AAAA;AAAA;AAAA;AAAA,0CAxCR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,sCApGJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kCALJ,eA+JI,QAAC,QAAD;AAAU,4BAAA,KAAK,EAAEhF,gBAAjB;AAAmC,4BAAA,KAAK,EAAE,CAA1C;AAA6C,4BAAA,GAAG,EAAEQ,KAAK,CAACuD;AAAxD;AAAA;AAAA;AAAA;AAAA,kCA/JJ;AAAA;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,4BAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,wBAPJ,eAsMQ,QAAC,IAAD;AAAM,kBAAA,IAAI,MAAV;AAAW,kBAAA,EAAE,EAAE,EAAf;AAAA,0CACI,QAAC,MAAD;AAAQ,oBAAA,KAAK,EAAE;AAAEkB,sBAAAA,OAAO,EAAEjF,gBAAgB,IAAI,CAApB,GAAwB,MAAxB,GAAiCoD;AAA5C,qBAAf;AAAwE,oBAAA,IAAI,EAAC,QAA7E;AAAsF,oBAAA,EAAE,EAAE;AAAES,sBAAAA,MAAM,EAAE;AAAV,qBAA1F;AAAyG,oBAAA,OAAO,EAAC,WAAjH;AAA6H,oBAAA,KAAK,EAAC,SAAnI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,eAEI,QAAC,MAAD;AAAQ,oBAAA,KAAK,EAAE;AAAEoB,sBAAAA,OAAO,EAAEjF,gBAAgB,IAAI,CAApB,GAAwB,MAAxB,GAAiCoD;AAA5C,qBAAf;AAAwE,oBAAA,IAAI,EAAC,QAA7E;AAAsF,oBAAA,EAAE,EAAE;AAAES,sBAAAA,MAAM,EAAE;AAAV,qBAA1F;AAAyG,oBAAA,OAAO,EAAC,WAAjH;AAA6H,oBAAA,KAAK,EAAC,SAAnI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFJ,eAGI,QAAC,MAAD;AAAQ,oBAAA,OAAO,EAAE,MAAMnB,WAAW,EAAlC;AAAsC,oBAAA,EAAE,EAAE;AAAEmB,sBAAAA,MAAM,EAAE;AAAV,qBAA1C;AAAyD,oBAAA,KAAK,EAAE;AAAEoB,sBAAAA,OAAO,EAAEjF,gBAAgB,IAAI,CAApB,GAAwB,MAAxB,GAAiCoD;AAA5C,qBAAhE;AAAyH,oBAAA,IAAI,EAAC,QAA9H;AAAuI,oBAAA,OAAO,EAAC,WAA/I;AAA2J,oBAAA,KAAK,EAAC,SAAjK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAHJ,eAIA,QAAC,MAAD;AAAQ,oBAAA,IAAI,EAAC,QAAb;AACI,oBAAA,OAAO,EAAE,MAAMpC,SAAS,EAD5B;AACgC,oBAAA,EAAE,EAAE;AAAE6C,sBAAAA,MAAM,EAAE;AAAV,qBADpC;AACmD,oBAAA,OAAO,EAAC,WAD3D;AACuE,oBAAA,KAAK,EAAC,WAD7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAJA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAtMR;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AA0OH,CAnXM;;GAAMxF,Y;UAiBKhB,Q,EA+DVE,O;;;KAhFKc,Y;AAqXb,eAAeA,YAAf","sourcesContent":["////import { Helmet } from 'react-helmet-async';\r\nimport PageTitle from '../../../../components/PageTitle';\r\nimport { useEffect, useState } from 'react';\r\nimport * as Yup from \"yup\";\r\nimport { post} from \"../../../../services/common.service\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nimport PageTitleWrapper from '../../../../components/PageTitleWrapper';\r\nimport { Button, IconButton, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box, Modal, Typography, Autocomplete, Tabs, Tab, AppBar, useTheme } from '@mui/material';\r\nimport Footer from '../../../../components/Footer';\r\nimport SwipeableViews from 'react-swipeable-views';\r\n\r\nimport Switch from '@mui/material/Switch';\r\nimport { useForm } from 'react-hook-form';\r\nimport { DirectorModel } from '../../../../types/director.type';\r\nimport { dropdowns } from '../../../../services/dropdowns.service';\r\nimport { DesignationModel, DirectorTypeModel, IDTypeModel, NationalityModel, PlaceOfBirthModel } from '../../../../types/master.type';\r\nimport Scrollbars from 'react-custom-scrollbars-2';\r\nimport { TabPanel, TabPanelProps, switchTab } from '../../../../components/TabPanel';\r\n\r\nconst label = { inputProps: { 'aria-label': 'Switch demo' } };\r\n\r\nconst style = {\r\n    position: 'absolute' as 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 1000,\r\n    bgcolor: 'background.paper',\r\n    //border: '2px solid #000',\r\n    boxShadow: 24,\r\n    \r\n};\r\n\r\nexport const DirectorForm: React.FC<any> = ({ clearForm, directorFormFunc, directorData, rerenderTable}) => {\r\n    const [openSuccessAlert, setopenSuccessAlert] = useState<boolean>(false);\r\n    \r\n    const [directorTypes, setDirectorTypes] = useState<DirectorTypeModel[]>([]);\r\n    const [selectedDirectorType, setSelectedDirectorType] = useState<DirectorTypeModel>();\r\n    const [designations, setDesignations] = useState<DesignationModel[]>([]);\r\n    const [selectedDesignation, setSelectedDesignation] = useState<DesignationModel>();\r\n    const [nationalities, setNationalities] = useState<NationalityModel[]>([]);\r\n    const [selectedNationality, setSelectedNationality] = useState<NationalityModel>();\r\n    const [idTypes, setIDTypes] = useState<IDTypeModel[]>([]);\r\n    const [selectedIdType, setselectedIdType] = useState<IDTypeModel>();\r\n    const [placeOfBirths, setPlaceOfBirths] = useState<PlaceOfBirthModel[]>([]);\r\n    const [selectedPlaceOfBirth, setSelectedPlaceOfBirth] = useState<PlaceOfBirthModel>();\r\n    const [selectedTabIndex, setSelectedTabIndex] = useState(0);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    const [open, setOpen] = useState(false);\r\n    const theme = useTheme();\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n        // reset(companyTypeData);\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        reset(directorData);\r\n        clearForm();\r\n    }\r\n    const handleAlertClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        setopenSuccessAlert(false);\r\n    };\r\n   \r\n    const showModal = () => {\r\n        setOpen(true);\r\n        reset(directorData);\r\n    }\r\n    const resetForm = () => {\r\n        reset(directorData);\r\n        clearForm();\r\n    }\r\n    const changeTab = (index: number) => {\r\n        return {\r\n            id: `simple-tab-${index}`,\r\n            'aria-controls': `simple-tabpanel-${index}`,\r\n        };\r\n    }\r\n    useEffect(() => {\r\n        directorFormFunc.current = handleOpen\r\n        reset(directorData);\r\n        loadDropdowns();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        reset(directorData);\r\n    }, [directorData, directorFormFunc]);\r\n\r\n    const loadDropdowns = () => {\r\n        dropdowns.getAllDirectorTypes().then(x => setDirectorTypes(x));\r\n        dropdowns.getAllDesignations().then(x => setDesignations(x));\r\n        dropdowns.getAllNationalities().then(x => setNationalities(x));\r\n        dropdowns.getAllPlaceOfBirths().then(x => setPlaceOfBirths(x));\r\n    }\r\n    const validationSchema = Yup.object().shape({\r\n        CompanyNumber: Yup.string()\r\n            .required('Director is required')\r\n            .min(2, 'Director must be at least 2 characters')\r\n            .max(20, 'Director must not exceed 20 characters'),\r\n        PlaceOfBirthID: Yup.string()\r\n            .required('Director is required')\r\n    });\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { errors }\r\n    } = useForm<DirectorModel>({\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n    const onClickBack = () => {\r\n        setSelectedTabIndex(0);\r\n        switchTab(0);\r\n        //switchTab(1);\r\n        //handleFormSubmit(data);\r\n        //console.log(JSON.stringify(data, null, 2));\r\n    };\r\n    const onSubmit = (data: DirectorModel) => {\r\n        //data.PlaceOfBirthID == 0;// selectedPlaceOfBirth?.PlaceOfBirthID;\r\n        let abc = data;\r\n        abc.PlaceOfBirthID = selectedPlaceOfBirth!.PlaceOfBirthID ?? 0;\r\n        console.log(abc);\r\n        setSelectedTabIndex(1);\r\n        switchTab(1);\r\n        \r\n        //handleFormSubmit(data);\r\n        //console.log(JSON.stringify(data, null, 2));\r\n    };\r\n    const handleFormSubmit = (director: DirectorModel) => {\r\n        setLoading(true);\r\n        let _url = 'director/AddDirector';\r\n        if (director.DirectorID != undefined) {\r\n            _url = 'director/EditDirector';\r\n        }\r\n        post(_url, director).then(\r\n            (response: any) => {\r\n                // history.push(\"/profile\");\r\n                if (response.data.status == 'success') {\r\n                    setMessage('Director Successfully Saved!');\r\n                    setopenSuccessAlert(true);\r\n                    handleClose();\r\n                    rerenderTable();\r\n                }\r\n            },\r\n            (error: any) => {\r\n                const resMessage =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setLoading(false);\r\n                setMessage(resMessage);\r\n            }\r\n        ); \r\n    };\r\n\r\n    const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n        setSelectedTabIndex(newValue);\r\n    };\r\n    const handleChangeIndex = (index: number) => {\r\n        setSelectedTabIndex(index);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button sx={{ margin: 1 }} variant=\"contained\" color=\"primary\" onClick={handleOpen}>Open modal</Button>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <form onSubmit={handleSubmit(onSubmit)} noValidate >\r\n                <Box sx={style}>\r\n                    <Container maxWidth=\"md\">\r\n                        <div className=\"register-form\">\r\n                            {/*   <form onSubmit={handleSubmit(onSubmit)} noValidate>*/}\r\n                            <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justifyContent=\"center\"\r\n                                alignItems=\"stretch\"\r\n                                \r\n                            >\r\n                                <Grid item xs={12}>\r\n                                    <Card>\r\n                                        <CardHeader title=\"Enter Director Detail\" />\r\n                                        <Divider />\r\n                                        <AppBar position=\"static\">\r\n                                            <Tabs\r\n                                                value={selectedTabIndex}\r\n                                                onChange={handleTabChange}\r\n                                                indicatorColor=\"secondary\"\r\n                                                textColor=\"inherit\"\r\n                                                variant=\"fullWidth\"\r\n                                                aria-label=\"full width tabs example\"\r\n                                            >\r\n                                                <Tab label=\"Details\" {...switchTab(0)} />\r\n                                                <Tab label=\"Uploads\" {...switchTab(1)} />\r\n                                            </Tabs>\r\n                                        </AppBar>\r\n                                        <CardContent>\r\n                                            <Box\r\n                                                component=\"div\"\r\n                                                sx={{\r\n                                                    '& .MuiTextField-root': { my: 1, width: '25ch' },\r\n                                                }}\r\n                                            >\r\n                                                <SwipeableViews\r\n                                                    axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                                                    index={selectedTabIndex}\r\n                                                    onChangeIndex={handleChangeIndex}\r\n                                                >\r\n                                                    <TabPanel value={selectedTabIndex} index={0} dir={theme.direction}>\r\n                                                        <Grid\r\n                                                            container\r\n                                                            direction=\"row\"\r\n                                                            justifyContent=\"center\"\r\n                                                            alignItems=\"stretch\"\r\n                                                            spacing={1}\r\n                                                        >\r\n                                                            <Grid item xs={4}>\r\n                                                                <div>\r\n                                                                    <TextField\r\n                                                                        style={{ width: '100%' }}\r\n                                                                        required\r\n                                                                        id=\"outlined-required\"\r\n                                                                        label=\"DirectorName\"\r\n                                                                        {...register('DirectorName')}\r\n                                                                        className={`form-control ${errors.DirectorName ? 'is-invalid' : ''}`}\r\n                                                                    />\r\n                                                                    <Autocomplete\r\n                                                                        disablePortal style={{ width: '100%' }}\r\n                                                                        id=\"drpDirectorType\"\r\n                                                                        options={directorTypes}\r\n                                                                        getOptionLabel={directorTypes => directorTypes.DirectorTypeName}\r\n                                                                        renderInput={(params) => <TextField style={{ width: '100%' }} {...params} label=\"Director Type\" />}\r\n                                                                    />\r\n                                                                    <Autocomplete\r\n                                                                        disablePortal style={{ width: '100%' }}\r\n                                                                        id=\"drpDesignation\"\r\n                                                                        options={designations}\r\n                                                                        getOptionLabel={designations => designations.DesignationName}\r\n                                                                        renderInput={(params) => <TextField style={{ width: '100%' }} {...params} label=\"Designation\" />}\r\n                                                                    />\r\n                                                                    <Autocomplete\r\n                                                                        disablePortal style={{ width: '100%' }}\r\n                                                                        id=\"drpNationality\"\r\n                                                                        options={nationalities}\r\n                                                                        getOptionLabel={nationalities => nationalities.NationalityName}\r\n                                                                        renderInput={(params) => <TextField style={{ width: '100%' }} {...params} label=\"Nationality\" />}\r\n                                                                    />\r\n                                                                    <TextField\r\n                                                                        style={{ width: '100%' }}\r\n                                                                        required\r\n                                                                        id=\"outlined-required\"\r\n                                                                        label=\"Company Name\"\r\n                                                                        {...register('CompanyName')}\r\n                                                                        className={`form-control ${errors.CompanyName ? 'is-invalid' : ''}`}\r\n                                                                        />\r\n                                                                   \r\n                                                                        <TextField\r\n                                                                            style={{ width: '100%' }}\r\n                                                                            required\r\n                                                                            id=\"outlined-required\"\r\n                                                                            label=\"CompanyNumber\"\r\n                                                                            {...register('CompanyNumber')}\r\n                                                                            className={`form-control ${errors.CompanyNumber ? 'is-invalid' : ''}`}\r\n                                                                        />\r\n                                                                </div>\r\n                                                                </Grid>\r\n                                                            <Grid item xs={4}>\r\n                                                                    <div>\r\n                                                                        <TextField\r\n                                                                            style={{ width: '100%' }}\r\n                                                                            required\r\n                                                                            id=\"outlined-required\"\r\n                                                                            label=\"Email\"\r\n                                                                            {...register('Email')}\r\n                                                                            className={`form-control ${errors.Email ? 'is-invalid' : ''}`}\r\n                                                                        />\r\n                                                                        <Autocomplete \r\n                                                                            disablePortal style={{ width: '100%' }}\r\n                                                                            id=\"drpIDType\"\r\n                                                                            options={idTypes}\r\n                                                                            getOptionLabel={idType => idType.IDTypeName}\r\n                                                                            renderInput={(params) => <TextField style={{ width: '100%' }} {...params} label=\"ID Type\" />}\r\n                                                                        />\r\n                                                                        <TextField\r\n                                                                            style={{ width: '100%' }}\r\n                                                                            required\r\n                                                                            id=\"outlined-required\"\r\n                                                                            label=\"ID Number\"\r\n                                                                            {...register('IDNumber')}\r\n                                                                            className={`form-control ${errors.IDNumber ? 'is-invalid' : ''}`}\r\n                                                                        />\r\n                                                                        <TextField type=\"date\"\r\n                                                                            style={{ width: '100%' }}\r\n                                                                            required\r\n                                                                            id=\"outlined-required\"\r\n                                                                            \r\n                                                                            {...register('AppointmentDate')}\r\n                                                                            className={`form-control ${errors.AppointmentDate ? 'is-invalid' : ''}`}\r\n                                                                        />\r\n                                                                        <TextField multiline rows={4.5} maxRows={4.5} \r\n                                                                            style={{ width: '100%' }} type=\"text\"\r\n                                                                            required\r\n                                                                            id=\"outlined-required\"\r\n                                                                            label=\"Permanant Address\"\r\n                                                                            {...register('PermanentAddress')}\r\n                                                                            className={`form-control ${errors.PermanentAddress ? 'is-invalid' : ''}`}\r\n                                                                        />\r\n                                                                    </div>\r\n                                                                </Grid>\r\n                                                            <Grid item xs={4}>\r\n                                                                <div>\r\n                                                                        <TextField\r\n                                                                            style={{ width: '100%' }}\r\n                                                                            required\r\n                                                                            id=\"outlined-required\"\r\n                                                                            label=\"Contact Number\"\r\n                                                                            {...register('ContactNumber')}\r\n                                                                            className={`form-control ${errors.ContactNumber ? 'is-invalid' : ''}`}\r\n                                                                        />\r\n                                                                        <Autocomplete\r\n                                                                            {...register('PlaceOfBirthID')}\r\n                                                                            onChange={(event, newValue) => {\r\n                                                                                setSelectedPlaceOfBirth(newValue!);\r\n                                                                            }}\r\n                                                                            value={selectedPlaceOfBirth}\r\n                                                                        disablePortal style={{ width: '100%' }}\r\n                                                                        id=\"drpPlaceOfBirth\"\r\n                                                                        options={placeOfBirths}\r\n                                                                        getOptionLabel={placeOfBirths => placeOfBirths.PlaceOfBirthName}\r\n                                                                            renderInput={(params) => <TextField style={{ width: '100%' }} {...params} label=\"Place of Birth\"\r\n                                                                                required={true}\r\n                                                                            />}\r\n                                                                    />\r\n                                                                    <TextField type=\"date\"\r\n                                                                        style={{ width: '100%' }}\r\n                                                                        required\r\n                                                                        id=\"outlined-required\"\r\n                                                                        label=\"DOB\"\r\n                                                                        {...register('DOB')}\r\n                                                                        className={`form-control ${errors.DOB ? 'is-invalid' : ''}`}\r\n                                                                        />\r\n                                                                        <TextField type=\"date\"\r\n                                                                            style={{ width: '100%' }}\r\n                                                                            required\r\n                                                                            id=\"outlined-required\"\r\n                                                                            label=\"Cessation Date\"\r\n                                                                            {...register('CessationDate')}\r\n                                                                            className={`form-control ${errors.CessationDate ? 'is-invalid' : ''}`}\r\n                                                                        />\r\n                                                                       \r\n                                                                        <TextField multiline rows={4.5} maxRows={4.5} \r\n                                                                            style={{ width: '100%' }} type=\"text\"\r\n                                                                            required\r\n                                                                            id=\"outlined-required\"\r\n                                                                            label=\"Comunication Address\"\r\n                                                                            {...register('ComunicationAddress')}\r\n                                                                            className={`form-control ${errors.ComunicationAddress ? 'is-invalid' : ''}`}\r\n                                                                        />\r\n                                                                </div>\r\n                                                            </Grid>\r\n                                                        </Grid>\r\n                                                        </TabPanel>\r\n                                                    <TabPanel value={selectedTabIndex} index={1} dir={theme.direction}>\r\n\r\n                                                    </TabPanel>\r\n                                                </SwipeableViews>\r\n                                            </Box>\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <Button style={{ display: selectedTabIndex == 1 ? 'none' : undefined }} type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"primary\"> Next</Button>\r\n                                        <Button style={{ display: selectedTabIndex == 0 ? 'none' : undefined }} type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"primary\"> Save</Button>\r\n                                        <Button onClick={() => onClickBack()} sx={{ margin: 1 }} style={{ display: selectedTabIndex == 0 ? 'none' : undefined }} type=\"button\" variant=\"contained\" color=\"primary\"> Back</Button>\r\n                                    <Button type=\"button\"\r\n                                        onClick={() => resetForm()} sx={{ margin: 1 }} variant=\"contained\" color=\"secondary\">\r\n                                        Reset\r\n                                    </Button>\r\n\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            {/*</form>*/}\r\n                        </div>\r\n                    </Container>\r\n                    </Box>\r\n                </form>\r\n            </Modal>\r\n\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DirectorForm;\r\n"]},"metadata":{},"sourceType":"module"}