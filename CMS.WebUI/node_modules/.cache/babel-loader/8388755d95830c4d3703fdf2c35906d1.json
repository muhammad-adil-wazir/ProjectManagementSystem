{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\LFMS\\\\LFMS.WebUI\\\\src\\\\content\\\\pages\\\\Components\\\\Role\\\\RoleForm.tsx\",\n    _s = $RefreshSig$();\n\n////import { Helmet } from 'react-helmet-async';\nimport { useEffect, useState } from 'react';\nimport * as Yup from \"yup\";\nimport { post } from \"../../../../services/common.service\";\nimport { Button, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box, Modal } from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst label = {\n  inputProps: {\n    'aria-label': 'Switch demo'\n  }\n};\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 600,\n  bgcolor: 'background.paper',\n  //border: '2px solid #000',\n  boxShadow: 24,\n  p: 4\n};\nexport const RoleForm = _ref => {\n  _s();\n\n  let {\n    clearForm,\n    roleFormFunc,\n    roleData,\n    rerenderTable\n  } = _ref;\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    reset(initialValues);\n    clearForm();\n  };\n\n  const initialValues = {\n    RoleName: \"\",\n    Remarks: \"\"\n  };\n\n  const showModal = () => {\n    setOpen(true);\n    reset(initialValues);\n  };\n\n  const resetForm = () => {\n    reset(initialValues);\n    clearForm();\n  };\n\n  useEffect(() => {\n    roleFormFunc.current = handleOpen;\n    reset(roleData);\n  }, []);\n  useEffect(() => {\n    reset(roleData);\n    setValue(\"RoleName\", roleData.RoleName);\n  }, [roleData, roleFormFunc]);\n  const validationSchema = Yup.object().shape({\n    roleName: Yup.string().required('Role is required').min(2, 'Role Name must be at least 6 characters').max(200, 'Role name must not exceed 200 characters'),\n    remarks: Yup.string().required('Remarks is required').min(2, 'Remarks must be at least 2 characters')\n  });\n  const {\n    register,\n    setValue,\n    handleSubmit,\n    reset,\n    formState: {\n      errors\n    }\n  } = useForm({\n    shouldUnregister: false\n  });\n\n  const onSubmit = data => {\n    handleFormSubmit(data);\n  };\n\n  const handleFormSubmit = formValue => {\n    const {\n      RoleName,\n      Remarks\n    } = formValue;\n    setMessage(\"gbghihiou\");\n    setLoading(true);\n    post('security/AddRole', formValue).then(response => {\n      if (response.data.status == 'success') {\n        alert('successfully saved');\n        handleClose();\n        rerenderTable();\n      }\n    }, error => {\n      const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n      setLoading(false);\n      setMessage(resMessage);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      sx: {\n        margin: 1\n      },\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: showModal,\n      children: \"Add Role Type\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"modal-modal-title\",\n      \"aria-describedby\": \"modal-modal-description\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        maxWidth: \"md\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"register-form\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit(onSubmit),\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              direction: \"row\",\n              justifyContent: \"center\",\n              alignItems: \"stretch\",\n              spacing: 1,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(Card, {\n                  children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n                    title: \"Enter Role Type Detail\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 137,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 138,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                    children: /*#__PURE__*/_jsxDEV(Box, {\n                      sx: {\n                        '& .MuiTextField-root': {\n                          my: 1,\n                          width: '25ch'\n                        }\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        children: /*#__PURE__*/_jsxDEV(TextField, {\n                          style: {\n                            width: '100%'\n                          },\n                          required: true,\n                          id: \"outlined-required\",\n                          label: \"Role Type\",\n                          ...register('RoleName'),\n                          className: `form-control ${errors.RoleName ? 'is-invalid' : ''}`\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 146,\n                          columnNumber: 57\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 145,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: /*#__PURE__*/_jsxDEV(TextField, {\n                          style: {\n                            width: '100%'\n                          },\n                          required: true,\n                          id: \"outlined-password-input\",\n                          label: \"Remarks\",\n                          type: \"remarks\",\n                          multiline: true,\n                          rows: 2,\n                          maxRows: 4,\n                          autoComplete: \"current-password\",\n                          ...register('Remarks'),\n                          className: `form-control ${errors.Remarks ? 'is-invalid' : ''}`\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 156,\n                          columnNumber: 57\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 155,\n                        columnNumber: 53\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 140,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 139,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    type: \"submit\",\n                    sx: {\n                      margin: 1\n                    },\n                    variant: \"contained\",\n                    color: \"primary\",\n                    children: \" Save\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 164,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    type: \"button\",\n                    onClick: () => resetForm(),\n                    sx: {\n                      margin: 1\n                    },\n                    variant: \"contained\",\n                    color: \"secondary\",\n                    children: \"Reset\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 165,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    type: \"submit\",\n                    sx: {\n                      margin: 1\n                    },\n                    variant: \"contained\",\n                    color: \"error\",\n                    onClick: handleClose,\n                    children: \" Close\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 169,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(RoleForm, \"jCkTiqlbsEFb8OnMQAthCJN0ATo=\", false, function () {\n  return [useForm];\n});\n\n_c = RoleForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RoleForm\");","map":{"version":3,"sources":["E:/Projects/LFMS/LFMS.WebUI/src/content/pages/Components/Role/RoleForm.tsx"],"names":["useEffect","useState","Yup","post","Button","Container","Grid","Card","CardHeader","CardContent","Divider","TextField","Box","Modal","useForm","label","inputProps","style","position","top","left","transform","width","bgcolor","boxShadow","p","RoleForm","clearForm","roleFormFunc","roleData","rerenderTable","loading","setLoading","message","setMessage","open","setOpen","handleOpen","handleClose","reset","initialValues","RoleName","Remarks","showModal","resetForm","current","setValue","validationSchema","object","shape","roleName","string","required","min","max","remarks","register","handleSubmit","formState","errors","shouldUnregister","onSubmit","data","handleFormSubmit","formValue","then","response","status","alert","error","resMessage","toString","margin","my"],"mappings":";;;AAAA;AAEA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,IAAT,QAAqB,qCAArB;AAIA,SAASC,MAAT,EAA6BC,SAA7B,EAAwCC,IAAxC,EAA8CC,IAA9C,EAAoDC,UAApD,EAAgEC,WAAhE,EAA6EC,OAA7E,EAAsFC,SAAtF,EAAiGC,GAAjG,EAAsGC,KAAtG,QAA+H,eAA/H;AAIA,SAASC,OAAT,QAAwB,iBAAxB;;;AAEA,MAAMC,KAAK,GAAG;AAAEC,EAAAA,UAAU,EAAE;AAAE,kBAAc;AAAhB;AAAd,CAAd;AAEA,MAAMC,KAAK,GAAG;AACVC,EAAAA,QAAQ,EAAE,UADA;AAEVC,EAAAA,GAAG,EAAE,KAFK;AAGVC,EAAAA,IAAI,EAAE,KAHI;AAIVC,EAAAA,SAAS,EAAE,uBAJD;AAKVC,EAAAA,KAAK,EAAE,GALG;AAMVC,EAAAA,OAAO,EAAE,kBANC;AAOV;AACAC,EAAAA,SAAS,EAAE,EARD;AASVC,EAAAA,CAAC,EAAE;AATO,CAAd;AAgBA,OAAO,MAAMC,QAAuB,GAAG,QAA0D;AAAA;;AAAA,MAAzD;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,QAA3B;AAAqCC,IAAAA;AAArC,GAAyD;AAE7F,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwB/B,QAAQ,CAAU,KAAV,CAAtC;AACA,QAAM,CAACgC,OAAD,EAAUC,UAAV,IAAwBjC,QAAQ,CAAS,EAAT,CAAtC;AACA,QAAM,CAACkC,IAAD,EAAOC,OAAP,IAAkBnC,QAAQ,CAAC,KAAD,CAAhC;;AACA,QAAMoC,UAAU,GAAG,MAAM;AACrBD,IAAAA,OAAO,CAAC,IAAD,CAAP;AACH,GAFD;;AAGA,QAAME,WAAW,GAAG,MAAM;AACtBF,IAAAA,OAAO,CAAC,KAAD,CAAP;AACAG,IAAAA,KAAK,CAACC,aAAD,CAAL;AACAb,IAAAA,SAAS;AACZ,GAJD;;AAKA,QAAMa,aAAwB,GAAG;AAC7BC,IAAAA,QAAQ,EAAE,EADmB;AAE7BC,IAAAA,OAAO,EAAE;AAFoB,GAAjC;;AAIA,QAAMC,SAAS,GAAG,MAAM;AACpBP,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAG,IAAAA,KAAK,CAACC,aAAD,CAAL;AACH,GAHD;;AAIA,QAAMI,SAAS,GAAG,MAAM;AACpBL,IAAAA,KAAK,CAACC,aAAD,CAAL;AACAb,IAAAA,SAAS;AACZ,GAHD;;AAIA3B,EAAAA,SAAS,CAAC,MAAM;AACZ4B,IAAAA,YAAY,CAACiB,OAAb,GAAuBR,UAAvB;AACAE,IAAAA,KAAK,CAACV,QAAD,CAAL;AAEH,GAJQ,EAIN,EAJM,CAAT;AAMA7B,EAAAA,SAAS,CAAC,MAAM;AACZuC,IAAAA,KAAK,CAACV,QAAD,CAAL;AACAiB,IAAAA,QAAQ,CAAC,UAAD,EAAajB,QAAQ,CAACY,QAAtB,CAAR;AACH,GAHQ,EAGN,CAACZ,QAAD,EAAWD,YAAX,CAHM,CAAT;AAMA,QAAMmB,gBAAgB,GAAG7C,GAAG,CAAC8C,MAAJ,GAAaC,KAAb,CAAmB;AACxCC,IAAAA,QAAQ,EAAEhD,GAAG,CAACiD,MAAJ,GACLC,QADK,CACI,kBADJ,EAELC,GAFK,CAED,CAFC,EAEE,yCAFF,EAGLC,GAHK,CAGD,GAHC,EAGI,0CAHJ,CAD8B;AAKxCC,IAAAA,OAAO,EAAErD,GAAG,CAACiD,MAAJ,GACJC,QADI,CACK,qBADL,EAEJC,GAFI,CAEA,CAFA,EAEG,uCAFH;AAL+B,GAAnB,CAAzB;AAUA,QAAM;AACFG,IAAAA,QADE;AACQV,IAAAA,QADR;AAEFW,IAAAA,YAFE;AAGFlB,IAAAA,KAHE;AAIFmB,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AAJT,MAKF7C,OAAO,CAAY;AACnB8C,IAAAA,gBAAgB,EAAE;AADC,GAAZ,CALX;;AAQA,QAAMC,QAAQ,GAAIC,IAAD,IAAqB;AAClCC,IAAAA,gBAAgB,CAACD,IAAD,CAAhB;AACH,GAFD;;AAGA,QAAMC,gBAAgB,GAAIC,SAAD,IAAsD;AAC3E,UAAM;AAAEvB,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAwBsB,SAA9B;AACA9B,IAAAA,UAAU,CAAC,WAAD,CAAV;AACAF,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA7B,IAAAA,IAAI,CAAC,kBAAD,EAAqB6D,SAArB,CAAJ,CAAoCC,IAApC,CACKC,QAAD,IAAmB;AACf,UAAIA,QAAQ,CAACJ,IAAT,CAAcK,MAAd,IAAwB,SAA5B,EAAuC;AACnCC,QAAAA,KAAK,CAAC,oBAAD,CAAL;AACA9B,QAAAA,WAAW;AACXR,QAAAA,aAAa;AAChB;AACJ,KAPL,EAQKuC,KAAD,IAAgB;AACZ,YAAMC,UAAU,GACXD,KAAK,CAACH,QAAN,IACGG,KAAK,CAACH,QAAN,CAAeJ,IADlB,IAEGO,KAAK,CAACH,QAAN,CAAeJ,IAAf,CAAoB7B,OAFxB,IAGAoC,KAAK,CAACpC,OAHN,IAIAoC,KAAK,CAACE,QAAN,EALJ;AAMAvC,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,UAAU,CAACoC,UAAD,CAAV;AACH,KAjBL;AAmBH,GAvBD;;AAyBA,sBACI;AAAA,4BACI,QAAC,MAAD;AAAQ,MAAA,EAAE,EAAE;AAAEE,QAAAA,MAAM,EAAE;AAAV,OAAZ;AAA2B,MAAA,OAAO,EAAC,WAAnC;AAA+C,MAAA,KAAK,EAAC,SAArD;AAA+D,MAAA,OAAO,EAAE7B,SAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,KAAD;AACI,MAAA,IAAI,EAAER,IADV;AAEI,MAAA,OAAO,EAAEG,WAFb;AAGI,yBAAgB,mBAHpB;AAII,0BAAiB,yBAJrB;AAAA,6BAMQ,QAAC,SAAD;AAAW,QAAA,QAAQ,EAAC,IAApB;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA,iCACI;AAAM,YAAA,QAAQ,EAAEmB,YAAY,CAACI,QAAD,CAA5B;AAAA,mCACI,QAAC,IAAD;AACI,cAAA,SAAS,MADb;AAEI,cAAA,SAAS,EAAC,KAFd;AAGI,cAAA,cAAc,EAAC,QAHnB;AAII,cAAA,UAAU,EAAC,SAJf;AAKI,cAAA,OAAO,EAAE,CALb;AAAA,qCAOI,QAAC,IAAD;AAAM,gBAAA,IAAI,MAAV;AAAW,gBAAA,EAAE,EAAE,EAAf;AAAA,uCACI,QAAC,IAAD;AAAA,0CACI,QAAC,UAAD;AAAY,oBAAA,KAAK,EAAC;AAAlB;AAAA;AAAA;AAAA;AAAA,0BADJ,eAEI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,0BAFJ,eAGI,QAAC,WAAD;AAAA,2CACI,QAAC,GAAD;AACI,sBAAA,EAAE,EAAE;AACA,gDAAwB;AAAEY,0BAAAA,EAAE,EAAE,CAAN;AAASnD,0BAAAA,KAAK,EAAE;AAAhB;AADxB,uBADR;AAAA,8CAKI;AAAA,+CACI,QAAC,SAAD;AACI,0BAAA,KAAK,EAAE;AAAEA,4BAAAA,KAAK,EAAE;AAAT,2BADX;AAEI,0BAAA,QAAQ,MAFZ;AAGI,0BAAA,EAAE,EAAC,mBAHP;AAIA,0BAAA,KAAK,EAAC,WAJN;AAAA,6BAKIkC,QAAQ,CAAC,UAAD,CALZ;AAMA,0BAAA,SAAS,EAAG,gBAAeG,MAAM,CAAClB,QAAP,GAAkB,YAAlB,GAAiC,EAAG;AAN/D;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,8BALJ,eAeI;AAAA,+CACI,QAAC,SAAD;AAAW,0BAAA,KAAK,EAAE;AAAEnB,4BAAAA,KAAK,EAAE;AAAT,2BAAlB;AAAqC,0BAAA,QAAQ,MAA7C;AACI,0BAAA,EAAE,EAAC,yBADP;AACiC,0BAAA,KAAK,EAAC,SADvC;AACiD,0BAAA,IAAI,EAAC,SADtD;AACgE,0BAAA,SAAS,MADzE;AAC0E,0BAAA,IAAI,EAAE,CADhF;AACmF,0BAAA,OAAO,EAAE,CAD5F;AAC+F,0BAAA,YAAY,EAAC,kBAD5G;AAAA,6BAEQkC,QAAQ,CAAC,SAAD,CAFhB;AAGI,0BAAA,SAAS,EAAG,gBAAeG,MAAM,CAACjB,OAAP,GAAiB,YAAjB,GAAgC,EAAG;AAHlE;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,8BAfJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,0BAHJ,eA4BI,QAAC,MAAD;AAAQ,oBAAA,IAAI,EAAC,QAAb;AAAsB,oBAAA,EAAE,EAAE;AAAE8B,sBAAAA,MAAM,EAAE;AAAV,qBAA1B;AAAyC,oBAAA,OAAO,EAAC,WAAjD;AAA6D,oBAAA,KAAK,EAAC,SAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BA5BJ,eA6BI,QAAC,MAAD;AAAQ,oBAAA,IAAI,EAAC,QAAb;AACI,oBAAA,OAAO,EAAE,MAAM5B,SAAS,EAD5B;AACgC,oBAAA,EAAE,EAAE;AAAE4B,sBAAAA,MAAM,EAAE;AAAV,qBADpC;AACmD,oBAAA,OAAO,EAAC,WAD3D;AACuE,oBAAA,KAAK,EAAC,WAD7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BA7BJ,eAiCI,QAAC,MAAD;AAAQ,oBAAA,IAAI,EAAC,QAAb;AAAsB,oBAAA,EAAE,EAAE;AAAEA,sBAAAA,MAAM,EAAE;AAAV,qBAA1B;AAAyC,oBAAA,OAAO,EAAC,WAAjD;AAA6D,oBAAA,KAAK,EAAC,OAAnE;AAA2E,oBAAA,OAAO,EAAElC,WAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAjCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AANR;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AAgEH,CAnJM;;GAAMZ,Q;UAoDLZ,O;;;KApDKY,Q","sourcesContent":["////import { Helmet } from 'react-helmet-async';\r\nimport PageTitle from '../../../../components/PageTitle';\r\nimport { useEffect, useState } from 'react';\r\nimport * as Yup from \"yup\";\r\nimport { post } from \"../../../../services/common.service\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nimport PageTitleWrapper from '../../../../components/PageTitleWrapper';\r\nimport { Button, IconButton, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box, Modal, Typography } from '@mui/material';\r\nimport Footer from '../../../../components/Footer';\r\n\r\nimport Switch from '@mui/material/Switch';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nconst label = { inputProps: { 'aria-label': 'Switch demo' } };\r\n\r\nconst style = {\r\n    position: 'absolute' as 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 600,\r\n    bgcolor: 'background.paper',\r\n    //border: '2px solid #000',\r\n    boxShadow: 24,\r\n    p: 4,\r\n};\r\nexport type RoleModel = {\r\n    RoleID?: number;\r\n    RoleName: string;\r\n    Remarks: string;\r\n};\r\nexport const RoleForm: React.FC<any> = ({ clearForm, roleFormFunc, roleData, rerenderTable }) => {\r\n\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    const [open, setOpen] = useState(false);\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        reset(initialValues);\r\n        clearForm();\r\n    }\r\n    const initialValues: RoleModel = {\r\n        RoleName: \"\",\r\n        Remarks: \"\",\r\n    };\r\n    const showModal = () => {\r\n        setOpen(true);\r\n        reset(initialValues);\r\n    }\r\n    const resetForm = () => {\r\n        reset(initialValues);\r\n        clearForm();\r\n    }\r\n    useEffect(() => {\r\n        roleFormFunc.current = handleOpen\r\n        reset(roleData);\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        reset(roleData);\r\n        setValue(\"RoleName\", roleData.RoleName);\r\n    }, [roleData, roleFormFunc]);\r\n\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        roleName: Yup.string()\r\n            .required('Role is required')\r\n            .min(2, 'Role Name must be at least 6 characters')\r\n            .max(200, 'Role name must not exceed 200 characters'),\r\n        remarks: Yup.string()\r\n            .required('Remarks is required')\r\n            .min(2, 'Remarks must be at least 2 characters')\r\n    });\r\n\r\n    const {\r\n        register, setValue,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { errors }\r\n    } = useForm<RoleModel>({\r\n        shouldUnregister: false,\r\n    });\r\n    const onSubmit = (data: RoleModel) => {\r\n        handleFormSubmit(data);\r\n    };\r\n    const handleFormSubmit = (formValue: { RoleName: string; Remarks: string }) => {\r\n        const { RoleName, Remarks } = formValue;\r\n        setMessage(\"gbghihiou\");\r\n        setLoading(true);\r\n        post('security/AddRole', formValue).then(\r\n            (response: any) => {\r\n                if (response.data.status == 'success') {\r\n                    alert('successfully saved');\r\n                    handleClose();\r\n                    rerenderTable();\r\n                }\r\n            },\r\n            (error: any) => {\r\n                const resMessage =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setLoading(false);\r\n                setMessage(resMessage);\r\n            }\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button sx={{ margin: 1 }} variant=\"contained\" color=\"primary\" onClick={showModal}>Add Role Type</Button>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                    <Container maxWidth=\"md\">\r\n                        <div className=\"register-form\">\r\n                            <form onSubmit={handleSubmit(onSubmit)}>\r\n                                <Grid\r\n                                    container\r\n                                    direction=\"row\"\r\n                                    justifyContent=\"center\"\r\n                                    alignItems=\"stretch\"\r\n                                    spacing={1}\r\n                                >\r\n                                    <Grid item xs={12}>\r\n                                        <Card>\r\n                                            <CardHeader title=\"Enter Role Type Detail\" />\r\n                                            <Divider />\r\n                                            <CardContent>\r\n                                                <Box\r\n                                                    sx={{\r\n                                                        '& .MuiTextField-root': { my: 1, width: '25ch' },\r\n                                                    }}\r\n                                                >\r\n                                                    <div>\r\n                                                        <TextField\r\n                                                            style={{ width: '100%' }}\r\n                                                            required\r\n                                                            id=\"outlined-required\"\r\n                                                        label=\"Role Type\"\r\n                                                        {...register('RoleName')}\r\n                                                        className={`form-control ${errors.RoleName ? 'is-invalid' : ''}`}\r\n                                                        />\r\n                                                    </div>\r\n                                                    <div>\r\n                                                        <TextField style={{ width: '100%' }} required\r\n                                                            id=\"outlined-password-input\" label=\"Remarks\" type=\"remarks\" multiline rows={2} maxRows={4} autoComplete=\"current-password\"\r\n                                                            {...register('Remarks')}\r\n                                                            className={`form-control ${errors.Remarks ? 'is-invalid' : ''}`}\r\n                                                        />\r\n                                                    </div>\r\n                                                </Box>\r\n                                            </CardContent>\r\n                                            <Button type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"primary\"> Save</Button>\r\n                                            <Button type=\"button\"\r\n                                                onClick={() => resetForm()} sx={{ margin: 1 }} variant=\"contained\" color=\"secondary\">\r\n                                                Reset\r\n                                            </Button>\r\n                                            <Button type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"error\" onClick={handleClose}> Close</Button>\r\n                                        </Card>\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                            </form>\r\n                        </div>\r\n                    </Container>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}