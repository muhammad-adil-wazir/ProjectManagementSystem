{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\LFMS\\\\LFMS.WebUI\\\\src\\\\content\\\\pages\\\\Components\\\\CompanyType\\\\CompanyTypeForm.tsx\",\n    _s = $RefreshSig$();\n\n////import { Helmet } from 'react-helmet-async';\nimport { useEffect, useState } from 'react';\nimport * as Yup from \"yup\";\nimport { post } from \"../../../../services/common.service\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { Button, Grid, TextField, Snackbar, Alert } from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst label = {\n  inputProps: {\n    'aria-label': 'Switch demo'\n  }\n};\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 600,\n  bgcolor: 'background.paper',\n  //border: '2px solid #000',\n  boxShadow: 24,\n  p: 4\n};\nexport const CompanyTypeForm = _ref => {\n  _s();\n\n  let {\n    clearForm,\n    companyTypeFormFunc,\n    companyTypeData,\n    rerenderTable\n  } = _ref;\n  const [openSuccessAlert, setopenSuccessAlert] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [showError, setShowError] = useState(false);\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => {\n    setOpen(true); // reset(companyTypeData);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    reset(initialValues);\n    clearForm();\n  };\n\n  const handleAlertClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setopenSuccessAlert(false);\n  };\n\n  const initialValues = {\n    CompanyTypeID: 0,\n    CompanyTypeName: \"\",\n    Remarks: \"\"\n  };\n\n  const showModal = () => {\n    setOpen(true);\n    reset(initialValues);\n  };\n\n  const resetForm = () => {\n    reset(initialValues);\n    clearForm();\n  };\n\n  useEffect(() => {\n    companyTypeFormFunc.current = handleOpen;\n    reset(companyTypeData);\n  }, []);\n  useEffect(() => {\n    reset(companyTypeData);\n  }, [companyTypeData, companyTypeFormFunc]);\n  const validationSchema = Yup.object().shape({\n    companyTypeName: Yup.string().required('Company Type is required').min(2, 'Company Type must be at least 2 characters').max(200, 'Company Type must not exceed 200 characters'),\n    remarks: Yup.string().required('Remarks is required').min(2, 'Remarks must be at least 2 characters')\n  });\n  const {\n    register,\n    setValue,\n    handleSubmit,\n    reset,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n    shouldUnregister: false\n  });\n\n  const onSubmit = data => {\n    debugger;\n    handleFormSubmit(data);\n    console.log(data); //console.log(JSON.stringify(data, null, 2));\n  };\n\n  const handleFormSubmit = formValue => {\n    const {\n      CompanyTypeName,\n      Remarks\n    } = formValue;\n    setMessage(\"gbghihiou\");\n    setLoading(true);\n    post('master/AddCompanyType', formValue).then(response => {\n      // history.push(\"/profile\");\n      if (response.data.status == 'success') {\n        setMessage('Company Type Successfully Saved!');\n        setopenSuccessAlert(true);\n        handleClose();\n        rerenderTable();\n      } //window.location.href = '/';\n\n    }, error => {\n      const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n      setLoading(false);\n      setMessage(resMessage);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Snackbar, {\n      open: openSuccessAlert,\n      autoHideDuration: 6000,\n      onClose: handleAlertClose,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleAlertClose,\n        variant: \"filled\",\n        severity: \"success\",\n        sx: {\n          width: '100%'\n        },\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      sx: {\n        margin: 1\n      },\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: showModal,\n      children: \"Add Company Type\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      noValidate: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"row\",\n        justifyContent: \"center\",\n        alignItems: \"stretch\",\n        spacing: 1,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              style: {\n                width: '100%'\n              },\n              required: true,\n              id: \"outlined-required\",\n              label: \"CompanyNumber\",\n              ...register('CompanyTypeName'),\n              className: `form-control ${errors.CompanyTypeName ? 'is-invalid' : ''}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              style: {\n                width: '100%'\n              },\n              type: \"text\",\n              required: true,\n              id: \"outlined-required\",\n              label: \"DOB\",\n              ...register('Remarks'),\n              className: `form-control ${errors.Remarks ? 'is-invalid' : ''}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        sx: {\n          margin: 1\n        },\n        variant: \"contained\",\n        color: \"primary\",\n        children: \" Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}; //export default CompanyTypeForm;\n\n_s(CompanyTypeForm, \"GHjkSOEqwAjzy2hp5lyg0mA6v38=\", false, function () {\n  return [useForm];\n});\n\n_c = CompanyTypeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompanyTypeForm\");","map":{"version":3,"sources":["E:/Projects/LFMS/LFMS.WebUI/src/content/pages/Components/CompanyType/CompanyTypeForm.tsx"],"names":["useEffect","useState","Yup","post","yupResolver","Button","Grid","TextField","Snackbar","Alert","useForm","label","inputProps","style","position","top","left","transform","width","bgcolor","boxShadow","p","CompanyTypeForm","clearForm","companyTypeFormFunc","companyTypeData","rerenderTable","openSuccessAlert","setopenSuccessAlert","loading","setLoading","message","setMessage","showError","setShowError","open","setOpen","handleOpen","handleClose","reset","initialValues","handleAlertClose","event","reason","CompanyTypeID","CompanyTypeName","Remarks","showModal","resetForm","current","validationSchema","object","shape","companyTypeName","string","required","min","max","remarks","register","setValue","handleSubmit","formState","errors","resolver","shouldUnregister","onSubmit","data","handleFormSubmit","console","log","formValue","then","response","status","error","resMessage","toString","margin"],"mappings":"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","sourcesContent":["////import { Helmet } from 'react-helmet-async';\r\nimport PageTitle from '../../../../components/PageTitle';\r\nimport { useEffect, useState } from 'react';\r\nimport * as Yup from \"yup\";\r\nimport { post} from \"../../../../services/common.service\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nimport PageTitleWrapper from '../../../../components/PageTitleWrapper';\r\nimport { Button, IconButton, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box, Modal, Typography, Snackbar, Alert } from '@mui/material';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nconst label = { inputProps: { 'aria-label': 'Switch demo' } };\r\n\r\nconst style = {\r\n    position: 'absolute' as 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 600,\r\n    bgcolor: 'background.paper',\r\n    //border: '2px solid #000',\r\n    boxShadow: 24,\r\n    p: 4,\r\n};\r\nexport type CompanyTypeModel = {\r\n    CompanyTypeID?: number;\r\n    CompanyTypeName: string;\r\n    Remarks: string;\r\n};\r\nexport const CompanyTypeForm: React.FC<any> = ({ clearForm, companyTypeFormFunc, companyTypeData, rerenderTable  }) => {\r\n\r\n    const [openSuccessAlert, setopenSuccessAlert] = useState<boolean>(false);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    const [showError, setShowError] = useState<boolean>(false);\r\n    const [open, setOpen] = useState(false);\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n       // reset(companyTypeData);\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        reset(initialValues);\r\n        clearForm();\r\n    }\r\n    const handleAlertClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        setopenSuccessAlert(false);\r\n    };\r\n    const initialValues: CompanyTypeModel = {\r\n        CompanyTypeID: 0,\r\n        CompanyTypeName: \"\",\r\n        Remarks: \"\",\r\n    };\r\n    const showModal = () => {\r\n        setOpen(true);\r\n        reset(initialValues);\r\n    }\r\n    const resetForm = () => {\r\n        reset(initialValues);\r\n        clearForm();\r\n    }\r\n    useEffect(() => {\r\n        companyTypeFormFunc.current = handleOpen\r\n        reset(companyTypeData);\r\n        \r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        reset(companyTypeData);\r\n    }, [companyTypeData, companyTypeFormFunc]);\r\n    \r\n  \r\n    const validationSchema = Yup.object().shape({\r\n        companyTypeName: Yup.string()\r\n            .required('Company Type is required')\r\n            .min(2, 'Company Type must be at least 2 characters')\r\n            .max(200, 'Company Type must not exceed 200 characters'),\r\n        remarks: Yup.string()\r\n            .required('Remarks is required')\r\n            .min(2, 'Remarks must be at least 2 characters')\r\n    });\r\n\r\n    const {\r\n        register, setValue,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { errors }\r\n    } = useForm<CompanyTypeModel>({\r\n        resolver: yupResolver(validationSchema),\r\n        shouldUnregister: false,\r\n    });\r\n    const onSubmit = (data: CompanyTypeModel) => {\r\n        debugger;\r\n        handleFormSubmit(data);\r\n        console.log(data);\r\n        //console.log(JSON.stringify(data, null, 2));\r\n    };\r\n    const handleFormSubmit = (formValue: { CompanyTypeName: string; Remarks: string }) => {\r\n        const { CompanyTypeName, Remarks } = formValue;\r\n        setMessage(\"gbghihiou\");\r\n        setLoading(true);\r\n        post('master/AddCompanyType', formValue).then(\r\n            (response: any) => {\r\n                // history.push(\"/profile\");\r\n                if (response.data.status == 'success') {\r\n                    setMessage('Company Type Successfully Saved!');\r\n                    setopenSuccessAlert(true);\r\n                    handleClose();\r\n                    rerenderTable();\r\n                }\r\n                //window.location.href = '/';\r\n            },\r\n            (error: any) => {\r\n                const resMessage =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setLoading(false);\r\n                setMessage(resMessage);\r\n            }\r\n        ); \r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n            <Snackbar open={openSuccessAlert} autoHideDuration={6000} onClose={handleAlertClose}>\r\n                <Alert onClose={handleAlertClose} variant=\"filled\" severity=\"success\" sx={{ width: '100%' }}>\r\n                    {message}\r\n                </Alert>\r\n            </Snackbar>\r\n            <Button sx={{ margin: 1 }} variant=\"contained\" color=\"primary\" onClick={showModal}>Add Company Type</Button>\r\n            <form onSubmit={handleSubmit(onSubmit)} noValidate >\r\n                <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"stretch\"\r\n                    spacing={1}\r\n                >\r\n                    <Grid item xs={4}>\r\n                        <div>\r\n                            <TextField\r\n                                style={{ width: '100%' }}\r\n                                required\r\n                                id=\"outlined-required\"\r\n                                label=\"CompanyNumber\"\r\n                                {...register('CompanyTypeName')}\r\n                                className={`form-control ${errors.CompanyTypeName ? 'is-invalid' : ''}`}\r\n                            />\r\n                            <TextField\r\n                                style={{ width: '100%' }} type=\"text\"\r\n                                required\r\n                                id=\"outlined-required\"\r\n                                label=\"DOB\"\r\n                                {...register('Remarks')}\r\n                                className={`form-control ${errors.Remarks ? 'is-invalid' : ''}`}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Button type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"primary\"> Next</Button>\r\n            </form>\r\n    \r\n          \r\n\r\n        </>\r\n    );\r\n}\r\n\r\n//export default CompanyTypeForm;\r\n"]},"metadata":{},"sourceType":"module"}