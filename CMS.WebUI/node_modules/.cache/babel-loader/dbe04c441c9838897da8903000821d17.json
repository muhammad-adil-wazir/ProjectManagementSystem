{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\Rebartek\\\\CMS.WEBUI\\\\src\\\\content\\\\pages\\\\Components\\\\Login\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport PageTitle from '../../../../components/PageTitle';\nimport { useState } from 'react';\nimport { Post } from \"../../../../services/common.service\";\nimport { logout } from \"../../../../services/auth.service\";\nimport { ProfileService } from '../../../../services/profile.service';\nimport { object, string } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport PageTitleWrapper from '../../../../components/PageTitleWrapper';\nimport { Button, Container, Grid, Card, CardHeader, CardContent, Divider } from '@mui/material';\nimport Footer from '../../../../components/Footer';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport { useForm } from 'react-hook-form';\nimport { useNavigate } from 'react-router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst label = {\n  inputProps: {\n    'aria-label': 'Switch demo'\n  }\n};\n\nfunction LoginForm() {\n  _s();\n\n  logout();\n  let navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [profile, setProfile] = useState();\n  const initialValues = {\n    username: \"\",\n    password: \"\"\n  };\n  const validationSchema = object({\n    username: string().nonempty('Username is required').min(2, 'Username must be at least 2 characters').max(20, 'Username must not exceed 20 characters'),\n    password: string().nonempty('Password is required').min(6, 'Password must be at least 6 characters').max(40, 'Password must not exceed 40 characters')\n  });\n  const {\n    register,\n    formState: {\n      errors\n    },\n    reset,\n    handleSubmit\n  } = useForm({\n    resolver: zodResolver(validationSchema)\n  });\n\n  const onSubmitHandler = values => {\n    handlePreLogin(values);\n  };\n\n  const handlePreLogin = formValue => {\n    const {\n      username,\n      password\n    } = formValue;\n    setMessage(\"\");\n    setLoading(true);\n    Post('user/login', formValue).then(response => {\n      // history.push(\"/profile\");\n      if (response.data.token) {\n        setProfile(response.data);\n        let profile = {\n          UserID: response.data.currentUser.UserID,\n          UserName: response.data.currentUser.UserName,\n          RoleID: response.data.currentUser.RoleID,\n          RoleName: response.data.currentUser.RoleName,\n          Token: response.data.token,\n          Expiration: new Date(response.data.expiration),\n          ConfigID: response.data.currentUser.ConfigID\n        };\n        ProfileService.setProfile(profile); //return navigate(\"/\");\n\n        /*localStorage.setItem(\"user\", JSON.stringify(response.data))*/\n\n        ;\n      } //window.location.href='/';\n\n    }, error => {\n      const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n      setLoading(false);\n      setMessage(resMessage);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"sm\",\n      children: [/*#__PURE__*/_jsxDEV(PageTitleWrapper, {\n        children: /*#__PURE__*/_jsxDEV(PageTitle, {\n          heading: \"Login\",\n          subHeading: \"Collage Management System\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"register-form\",\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          component: \"form\",\n          noValidate: true,\n          autoComplete: \"off\",\n          onSubmit: handleSubmit(onSubmitHandler),\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            justifyContent: \"center\",\n            alignItems: \"stretch\",\n            spacing: 6,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Card, {\n                sx: {\n                  px: 12\n                },\n                children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n                  title: \"Enter Credentials\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                  children: /*#__PURE__*/_jsxDEV(Box, {\n                    component: \"form\",\n                    sx: {\n                      '& .MuiTextField-root': {\n                        m: 1,\n                        width: '25ch'\n                      }\n                    },\n                    noValidate: true,\n                    autoComplete: \"off\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      children: /*#__PURE__*/_jsxDEV(TextField, {\n                        style: {\n                          width: '100%'\n                        },\n                        required: true,\n                        id: \"outlined-required\",\n                        label: \"Username\",\n                        ...register('username'),\n                        fullWidth: true,\n                        error: !!errors['username'],\n                        helperText: errors['username'] ? errors['username'].message : ''\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 136,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 135,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: /*#__PURE__*/_jsxDEV(TextField, {\n                        style: {\n                          width: '100%'\n                        },\n                        required: true,\n                        id: \"outlined-password-input\",\n                        label: \"Password\",\n                        type: \"password\",\n                        autoComplete: \"current-password\",\n                        ...register('password'),\n                        fullWidth: true,\n                        error: !!errors['password'],\n                        helperText: errors['password'] ? errors['password'].message : ''\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 147,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 146,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 127,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  sx: {\n                    margin: 1\n                  },\n                  variant: \"contained\",\n                  color: \"primary\",\n                  children: \"Submit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"button\",\n                  onClick: () => reset(),\n                  sx: {\n                    margin: 1\n                  },\n                  variant: \"contained\",\n                  color: \"secondary\",\n                  children: \"Reset\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(LoginForm, \"Rw1+1UTVm2m7ANocZyT8a9j1qSM=\", false, function () {\n  return [useNavigate, useForm];\n});\n\n_c = LoginForm;\nexport default LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["E:/Projects/Rebartek/CMS.WEBUI/src/content/pages/Components/Login/index.tsx"],"names":["PageTitle","useState","Post","logout","ProfileService","object","string","zodResolver","PageTitleWrapper","Button","Container","Grid","Card","CardHeader","CardContent","Divider","Footer","Box","TextField","useForm","useNavigate","label","inputProps","LoginForm","navigate","loading","setLoading","message","setMessage","profile","setProfile","initialValues","username","password","validationSchema","nonempty","min","max","register","formState","errors","reset","handleSubmit","resolver","onSubmitHandler","values","handlePreLogin","formValue","then","response","data","token","UserID","currentUser","UserName","RoleID","RoleName","Token","Expiration","Date","expiration","ConfigID","error","resMessage","toString","px","m","width","margin"],"mappings":"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","sourcesContent":["import PageTitle from '../../../../components/PageTitle';\r\nimport { useEffect, useState } from 'react';\r\nimport { Post } from \"../../../../services/common.service\";\r\nimport { logout } from \"../../../../services/auth.service\";\r\nimport { ProfileService } from '../../../../services/profile.service';\r\nimport { Profile } from '../../../../types/profile.type';\r\nimport { object, string, number, TypeOf } from 'zod';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport PageTitleWrapper from '../../../../components/PageTitleWrapper';\r\nimport { Button, IconButton, Container, Grid, Card, CardHeader, CardContent, Divider, Autocomplete } from '@mui/material';\r\nimport Footer from '../../../../components/Footer';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport { useForm, SubmitHandler } from 'react-hook-form';\r\nimport { useNavigate } from 'react-router';\r\nimport { dropdowns } from '../../../../services/dropdowns.service';\r\nimport { profile } from 'console';\r\n\r\nconst label = { inputProps: { 'aria-label': 'Switch demo' } };\r\n\r\nfunction LoginForm() {\r\n    logout();\r\n    let navigate = useNavigate();\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    const [profile, setProfile] = useState<any>();\r\n    const initialValues: {\r\n        username: string;\r\n        password: string;\r\n    } = {\r\n        username: \"\",\r\n        password: \"\",\r\n    };\r\n    type UserSubmitForm = {\r\n        username: string;\r\n        password: string;\r\n    };\r\n\r\n    const validationSchema = object({\r\n        username: string().nonempty('Username is required')\r\n            .min(2, 'Username must be at least 2 characters')\r\n            .max(20, 'Username must not exceed 20 characters'),\r\n        password: string()\r\n            .nonempty('Password is required')\r\n            .min(6, 'Password must be at least 6 characters')\r\n            .max(40, 'Password must not exceed 40 characters'),\r\n    });\r\n\r\n    const {\r\n        register,\r\n        formState: { errors },\r\n        reset,\r\n        handleSubmit,\r\n    } = useForm<UserSubmitForm>({\r\n        resolver: zodResolver(validationSchema)\r\n    });\r\n \r\n    const onSubmitHandler: SubmitHandler<UserSubmitForm> = (values) => {\r\n        handlePreLogin(values);\r\n    };\r\n\r\n    const handlePreLogin = (formValue: { username: string; password: string }) => {\r\n        const { username, password } = formValue;\r\n        setMessage(\"\");\r\n        setLoading(true);\r\n        Post('user/login', formValue).then(\r\n            (response: any) => {\r\n                // history.push(\"/profile\");\r\n                if (response.data.token) {\r\n                    setProfile(response.data);\r\n                    let profile: Profile = {\r\n                       UserID: response.data.currentUser.UserID,\r\n                       UserName: response.data.currentUser.UserName,\r\n                       RoleID: response.data.currentUser.RoleID,\r\n                       RoleName: response.data.currentUser.RoleName,\r\n                       Token: response.data.token,\r\n                       Expiration: new Date(response.data.expiration),\r\n                       ConfigID: response.data.currentUser.ConfigID\r\n                    };\r\n                    ProfileService.setProfile(profile);\r\n                    //return navigate(\"/\");\r\n                    /*localStorage.setItem(\"user\", JSON.stringify(response.data))*/;\r\n                }\r\n                //window.location.href='/';\r\n            },\r\n            (error: any) => {\r\n                const resMessage =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setLoading(false);\r\n                setMessage(resMessage);\r\n            }\r\n        );\r\n    };\r\n    \r\n    return (\r\n        <>\r\n            <Container maxWidth=\"sm\">\r\n                <PageTitleWrapper>\r\n                    <PageTitle\r\n                        heading=\"Login\"\r\n                        subHeading=\"Collage Management System\"\r\n                    />\r\n                </PageTitleWrapper>\r\n                <div className=\"register-form\">\r\n                    <Box \r\n                        component='form'\r\n                        noValidate\r\n                        autoComplete='off'\r\n                        onSubmit={handleSubmit(onSubmitHandler)}>\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justifyContent=\"center\"\r\n                            alignItems=\"stretch\"\r\n                            spacing={6}\r\n                        >\r\n                            <Grid item xs={12}>\r\n                                <Card sx={{ px: 12 }}>\r\n                                    <CardHeader title=\"Enter Credentials\" />\r\n                                    <Divider />\r\n                                    <CardContent>\r\n                                        <Box\r\n                                            component=\"form\"\r\n                                            sx={{\r\n                                                '& .MuiTextField-root': { m: 1, width: '25ch' },\r\n                                            }}\r\n                                            noValidate\r\n                                            autoComplete=\"off\"\r\n                                        >\r\n                                            <div>\r\n                                                <TextField\r\n                                                    style={{ width: '100%' }}\r\n                                                    required\r\n                                                    id=\"outlined-required\"\r\n                                                    label=\"Username\"\r\n                                                    {...register('username')} fullWidth\r\n                                                    error={!!errors['username']}\r\n                                                    helperText={errors['username'] ? errors['username'].message : ''}\r\n                                                />\r\n                                            </div>\r\n                                            <div>\r\n                                                <TextField style={{ width: '100%' }} required\r\n                                                    id=\"outlined-password-input\"\r\n                                                    label=\"Password\"\r\n                                                    type=\"password\"\r\n                                                    autoComplete=\"current-password\"\r\n                                                    {...register('password')} fullWidth\r\n                                                    error={!!errors['password']}\r\n                                                    helperText={errors['password'] ? errors['password'].message : ''}\r\n                                                />\r\n                                            </div>\r\n                                        </Box>\r\n                                    </CardContent>\r\n                                    <Button type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"primary\">\r\n                                        Submit\r\n                                    </Button>\r\n                                    <Button type=\"button\"\r\n                                        onClick={() => reset()} sx={{ margin: 1 }} variant=\"contained\" color=\"secondary\">\r\n                                        Reset\r\n                                    </Button>\r\n\r\n                                </Card>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Box>\r\n                </div>\r\n                <Footer />\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\nexport default LoginForm;\r\n"]},"metadata":{},"sourceType":"module"}