{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\LFMS\\\\LFMS.WebUI\\\\src\\\\content\\\\pages\\\\Components\\\\Director\\\\DirectorForm.tsx\",\n    _s = $RefreshSig$();\n\n////import { Helmet } from 'react-helmet-async';\nimport { useEffect, useState } from 'react';\nimport * as Yup from \"yup\";\nimport { post } from \"../../../../services/common.service\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { Button, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box, Modal, Typography, Autocomplete, Tabs, Tab, AppBar, useTheme } from '@mui/material';\nimport SwipeableViews from 'react-swipeable-views';\nimport { useForm } from 'react-hook-form';\nimport { dropdowns } from '../../../../services/dropdowns.service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst label = {\n  inputProps: {\n    'aria-label': 'Switch demo'\n  }\n};\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 1000,\n  bgcolor: 'background.paper',\n  //border: '2px solid #000',\n  boxShadow: 24,\n  p: 4\n};\n\nfunction switchTab(index) {\n  return {\n    id: `full-width-tab-${index}`,\n    'aria-controls': `full-width-tabpanel-${index}`\n  };\n}\n\nfunction TabPanel(props) {\n  const {\n    children,\n    value,\n    index,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: `full-width-tabpanel-${index}`,\n    \"aria-labelledby\": `full-width-tab-${index}`,\n    ...other,\n    children: value === index && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_c = TabPanel;\nexport const DirectorForm = _ref => {\n  _s();\n\n  let {\n    clearForm,\n    directorFormFunc,\n    directorData,\n    rerenderTable\n  } = _ref;\n  const [openSuccessAlert, setopenSuccessAlert] = useState(false);\n  const [directorTypes, setDirectorTypes] = useState([]);\n  const [designations, setDesignations] = useState([]);\n  const [nationalities, setNationalities] = useState([]);\n  const [idTypes, setIDTypes] = useState([]);\n  const [placeOfBirths, setPlaceOfBirths] = useState([]);\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [open, setOpen] = useState(false);\n  const theme = useTheme();\n\n  const handleOpen = () => {\n    setOpen(true); // reset(companyTypeData);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    reset(directorData);\n    clearForm();\n  };\n\n  const handleAlertClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setopenSuccessAlert(false);\n  };\n\n  const showModal = () => {\n    setOpen(true);\n    reset(directorData);\n  };\n\n  const resetForm = () => {\n    reset(directorData);\n    clearForm();\n  };\n\n  const changeTab = index => {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`\n    };\n  };\n\n  useEffect(() => {\n    directorFormFunc.current = handleOpen;\n    reset(directorData);\n    loadDropdowns();\n  }, []);\n  useEffect(() => {\n    reset(directorData);\n  }, [directorData, directorFormFunc]);\n\n  const loadDropdowns = () => {\n    dropdowns.getAllDirectorTypes().then(x => setDirectorTypes(x));\n    dropdowns.getAllDesignations().then(x => setDesignations(x));\n    dropdowns.getAllNationalities().then(x => setNationalities(x));\n    dropdowns.getAllPlaceOfBirths().then(x => setPlaceOfBirths(x));\n  };\n\n  const validationSchema = Yup.object().shape({\n    CompanyNumber: Yup.string().required('Director is required').min(2, 'Director must be at least 2 characters').max(20, 'Director must not exceed 20 characters')\n  });\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(validationSchema)\n  });\n\n  const onClickNext = () => {\n    setSelectedTabIndex(1);\n    switchTab(1); //switchTab(1);\n    //handleFormSubmit(data);\n    //console.log(JSON.stringify(data, null, 2));\n  };\n\n  const onSubmit = data => {\n    console.log(data);\n    setSelectedTabIndex(1);\n    switchTab(1); //handleFormSubmit(data);\n    //console.log(JSON.stringify(data, null, 2));\n  };\n\n  const handleFormSubmit = director => {\n    setLoading(true);\n    let _url = 'director/AddDirector';\n\n    if (director.DirectorID != undefined) {\n      _url = 'director/EditDirector';\n    }\n\n    post(_url, director).then(response => {\n      // history.push(\"/profile\");\n      if (response.data.status == 'success') {\n        setMessage('Director Successfully Saved!');\n        setopenSuccessAlert(true);\n        handleClose();\n        rerenderTable();\n      }\n    }, error => {\n      const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n      setLoading(false);\n      setMessage(resMessage);\n    });\n  };\n\n  const handleTabChange = (event, newValue) => {\n    setSelectedTabIndex(newValue);\n  };\n\n  const handleChangeIndex = index => {\n    setSelectedTabIndex(index);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      sx: {\n        margin: 1\n      },\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleOpen,\n      children: \"Open modal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"modal-modal-title\",\n      \"aria-describedby\": \"modal-modal-description\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: style,\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          maxWidth: \"md\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"register-form\",\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              direction: \"row\",\n              justifyContent: \"center\",\n              alignItems: \"stretch\",\n              spacing: 1,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(Card, {\n                  children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n                    title: \"Enter Company Type Detail\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 213,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 214,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(AppBar, {\n                    position: \"static\",\n                    children: /*#__PURE__*/_jsxDEV(Tabs, {\n                      value: selectedTabIndex,\n                      onChange: handleTabChange,\n                      indicatorColor: \"secondary\",\n                      textColor: \"inherit\",\n                      variant: \"fullWidth\",\n                      \"aria-label\": \"full width tabs example\",\n                      children: [/*#__PURE__*/_jsxDEV(Tab, {\n                        label: \"Details\",\n                        ...switchTab(0)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 224,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n                        label: \"Uploads\",\n                        ...switchTab(1)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 225,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 216,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 215,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 228,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                    children: /*#__PURE__*/_jsxDEV(Box, {\n                      component: \"div\",\n                      sx: {\n                        '& .MuiTextField-root': {\n                          my: 1,\n                          width: '25ch'\n                        }\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n                        onSubmit: handleSubmit(onSubmit),\n                        noValidate: true,\n                        children: [/*#__PURE__*/_jsxDEV(Grid, {\n                          container: true,\n                          direction: \"row\",\n                          justifyContent: \"center\",\n                          alignItems: \"stretch\",\n                          spacing: 1,\n                          children: [/*#__PURE__*/_jsxDEV(Grid, {\n                            item: true,\n                            xs: 4,\n                            children: /*#__PURE__*/_jsxDEV(\"div\", {\n                              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                                style: {\n                                  width: '100%'\n                                },\n                                required: true,\n                                id: \"outlined-required\",\n                                label: \"DirectorName\",\n                                ...register('DirectorName'),\n                                className: `form-control ${errors.DirectorName ? 'is-invalid' : ''}`\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 246,\n                                columnNumber: 65\n                              }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n                                disablePortal: true,\n                                style: {\n                                  width: '100%'\n                                },\n                                id: \"drpDirectorType\",\n                                options: directorTypes,\n                                getOptionLabel: directorTypes => directorTypes.DirectorTypeName,\n                                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                                  style: {\n                                    width: '100%'\n                                  },\n                                  ...params,\n                                  label: \"Director Type\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 259,\n                                  columnNumber: 94\n                                }, this)\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 254,\n                                columnNumber: 65\n                              }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n                                disablePortal: true,\n                                style: {\n                                  width: '100%'\n                                },\n                                id: \"drpDesignation\",\n                                options: designations,\n                                getOptionLabel: designations => designations.DesignationName,\n                                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                                  style: {\n                                    width: '100%'\n                                  },\n                                  ...params,\n                                  label: \"Designation\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 266,\n                                  columnNumber: 94\n                                }, this)\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 261,\n                                columnNumber: 65\n                              }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n                                disablePortal: true,\n                                style: {\n                                  width: '100%'\n                                },\n                                id: \"drpNationality\",\n                                options: nationalities,\n                                getOptionLabel: nationalities => nationalities.NationalityName,\n                                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                                  style: {\n                                    width: '100%'\n                                  },\n                                  ...params,\n                                  label: \"Nationality\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 273,\n                                  columnNumber: 94\n                                }, this)\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 268,\n                                columnNumber: 65\n                              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                                style: {\n                                  width: '100%'\n                                },\n                                required: true,\n                                id: \"outlined-required\",\n                                label: \"CompanyName\",\n                                ...register('CompanyName'),\n                                className: `form-control ${errors.CompanyName ? 'is-invalid' : ''}`\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 275,\n                                columnNumber: 65\n                              }, this)]\n                            }, void 0, true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 245,\n                              columnNumber: 61\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 244,\n                            columnNumber: 57\n                          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                            item: true,\n                            xs: 4,\n                            children: /*#__PURE__*/_jsxDEV(\"div\", {\n                              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                                style: {\n                                  width: '100%'\n                                },\n                                required: true,\n                                id: \"outlined-required\",\n                                label: \"CompanyNumber\",\n                                ...register('CompanyNumber'),\n                                className: `form-control ${errors.CompanyNumber ? 'is-invalid' : ''}`\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 287,\n                                columnNumber: 65\n                              }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n                                disablePortal: true,\n                                style: {\n                                  width: '100%'\n                                },\n                                id: \"drpPlaceOfBirth\",\n                                options: placeOfBirths,\n                                getOptionLabel: placeOfBirths => placeOfBirths.PlaceOfBirthName,\n                                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                                  style: {\n                                    width: '100%'\n                                  },\n                                  ...params,\n                                  label: \"Place of Birth\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 300,\n                                  columnNumber: 94\n                                }, this)\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 295,\n                                columnNumber: 65\n                              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                                style: {\n                                  width: '100%'\n                                },\n                                type: \"text\",\n                                required: true,\n                                id: \"outlined-required\",\n                                label: \"DOB\",\n                                ...register('DOB'),\n                                className: `form-control ${errors.DOB ? 'is-invalid' : ''}`\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 302,\n                                columnNumber: 65\n                              }, this)]\n                            }, void 0, true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 286,\n                              columnNumber: 61\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 285,\n                            columnNumber: 57\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 237,\n                          columnNumber: 53\n                        }, this), /*#__PURE__*/_jsxDEV(Button, {\n                          style: {\n                            display: selectedTabIndex == 1 ? 'none' : undefined\n                          },\n                          type: \"submit\",\n                          sx: {\n                            margin: 1\n                          },\n                          variant: \"contained\",\n                          color: \"primary\",\n                          children: \" Next\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 314,\n                          columnNumber: 53\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 236,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(SwipeableViews, {\n                        axis: theme.direction === 'rtl' ? 'x-reverse' : 'x',\n                        index: selectedTabIndex,\n                        onChangeIndex: handleChangeIndex,\n                        children: [/*#__PURE__*/_jsxDEV(TabPanel, {\n                          value: selectedTabIndex,\n                          index: 0,\n                          dir: theme.direction\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 321,\n                          columnNumber: 53\n                        }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n                          value: selectedTabIndex,\n                          index: 1,\n                          dir: theme.direction\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 324,\n                          columnNumber: 53\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 316,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 230,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 229,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  style: {\n                    display: selectedTabIndex == 1 ? 'none' : undefined\n                  },\n                  type: \"submit\",\n                  sx: {\n                    margin: 1\n                  },\n                  variant: \"contained\",\n                  color: \"primary\",\n                  children: \" Next\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 333,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"button\",\n                  onClick: () => resetForm(),\n                  sx: {\n                    margin: 1\n                  },\n                  variant: \"contained\",\n                  color: \"secondary\",\n                  children: \"Reset\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 335,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(DirectorForm, \"ofk+W7Yz1L5OViv1N49yf0g6k2A=\", false, function () {\n  return [useTheme, useForm];\n});\n\n_c2 = DirectorForm;\nexport default DirectorForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TabPanel\");\n$RefreshReg$(_c2, \"DirectorForm\");","map":{"version":3,"sources":["E:/Projects/LFMS/LFMS.WebUI/src/content/pages/Components/Director/DirectorForm.tsx"],"names":["useEffect","useState","Yup","post","yupResolver","Button","Container","Grid","Card","CardHeader","CardContent","Divider","TextField","Box","Modal","Typography","Autocomplete","Tabs","Tab","AppBar","useTheme","SwipeableViews","useForm","dropdowns","label","inputProps","style","position","top","left","transform","width","bgcolor","boxShadow","p","switchTab","index","id","TabPanel","props","children","value","other","DirectorForm","clearForm","directorFormFunc","directorData","rerenderTable","openSuccessAlert","setopenSuccessAlert","directorTypes","setDirectorTypes","designations","setDesignations","nationalities","setNationalities","idTypes","setIDTypes","placeOfBirths","setPlaceOfBirths","selectedTabIndex","setSelectedTabIndex","loading","setLoading","message","setMessage","open","setOpen","theme","handleOpen","handleClose","reset","handleAlertClose","event","reason","showModal","resetForm","changeTab","current","loadDropdowns","getAllDirectorTypes","then","x","getAllDesignations","getAllNationalities","getAllPlaceOfBirths","validationSchema","object","shape","CompanyNumber","string","required","min","max","register","handleSubmit","formState","errors","resolver","onClickNext","onSubmit","data","console","log","handleFormSubmit","director","_url","DirectorID","undefined","response","status","error","resMessage","toString","handleTabChange","newValue","handleChangeIndex","margin","my","DirectorName","DirectorTypeName","params","DesignationName","NationalityName","CompanyName","PlaceOfBirthName","DOB","display","direction"],"mappings":"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","sourcesContent":["////import { Helmet } from 'react-helmet-async';\r\nimport PageTitle from '../../../../components/PageTitle';\r\nimport { useEffect, useState } from 'react';\r\nimport * as Yup from \"yup\";\r\nimport { post} from \"../../../../services/common.service\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nimport PageTitleWrapper from '../../../../components/PageTitleWrapper';\r\nimport { Button, IconButton, Container, Grid, Card, CardHeader, CardContent, Divider, TextField, Box, Modal, Typography, Autocomplete, Tabs, Tab, AppBar, useTheme } from '@mui/material';\r\nimport Footer from '../../../../components/Footer';\r\nimport SwipeableViews from 'react-swipeable-views';\r\n\r\nimport Switch from '@mui/material/Switch';\r\nimport { useForm } from 'react-hook-form';\r\nimport { DirectorModel } from '../../../../types/director.type';\r\nimport { dropdowns } from '../../../../services/dropdowns.service';\r\nimport { DesignationModel, DirectorTypeModel, IDTypeModel, NationalityModel, PlaceOfBirthModel } from '../../../../types/master.type';\r\nimport Scrollbars from 'react-custom-scrollbars-2';\r\n\r\nconst label = { inputProps: { 'aria-label': 'Switch demo' } };\r\n\r\nconst style = {\r\n    position: 'absolute' as 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 1000,\r\n    bgcolor: 'background.paper',\r\n    //border: '2px solid #000',\r\n    boxShadow: 24,\r\n    p: 4,\r\n};\r\n\r\nfunction switchTab(index: number) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    dir?: string;\r\n    index: number;\r\n    value: number;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box sx={{ p: 3 }}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\nexport const DirectorForm: React.FC<any> = ({ clearForm, directorFormFunc, directorData, rerenderTable}) => {\r\n    const [openSuccessAlert, setopenSuccessAlert] = useState<boolean>(false);\r\n    const [directorTypes, setDirectorTypes] = useState<DirectorTypeModel[]>([]);\r\n    const [designations, setDesignations] = useState<DesignationModel[]>([]);\r\n    const [nationalities, setNationalities] = useState<NationalityModel[]>([]);\r\n    const [idTypes, setIDTypes] = useState<IDTypeModel[]>([]);\r\n    const [placeOfBirths, setPlaceOfBirths] = useState<PlaceOfBirthModel[]>([]);\r\n    const [selectedTabIndex, setSelectedTabIndex] = useState(0);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    const [open, setOpen] = useState(false);\r\n    const theme = useTheme();\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n        // reset(companyTypeData);\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        reset(directorData);\r\n        clearForm();\r\n    }\r\n    const handleAlertClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        setopenSuccessAlert(false);\r\n    };\r\n   \r\n    const showModal = () => {\r\n        setOpen(true);\r\n        reset(directorData);\r\n    }\r\n    const resetForm = () => {\r\n        reset(directorData);\r\n        clearForm();\r\n    }\r\n    const changeTab = (index: number) => {\r\n        return {\r\n            id: `simple-tab-${index}`,\r\n            'aria-controls': `simple-tabpanel-${index}`,\r\n        };\r\n    }\r\n    useEffect(() => {\r\n        directorFormFunc.current = handleOpen\r\n        reset(directorData);\r\n        loadDropdowns();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        reset(directorData);\r\n    }, [directorData, directorFormFunc]);\r\n\r\n    const loadDropdowns = () => {\r\n        dropdowns.getAllDirectorTypes().then(x => setDirectorTypes(x));\r\n        dropdowns.getAllDesignations().then(x => setDesignations(x));\r\n        dropdowns.getAllNationalities().then(x => setNationalities(x));\r\n        dropdowns.getAllPlaceOfBirths().then(x => setPlaceOfBirths(x));\r\n    }\r\n    const validationSchema = Yup.object().shape({\r\n        CompanyNumber: Yup.string()\r\n            .required('Director is required')\r\n            .min(2, 'Director must be at least 2 characters')\r\n            .max(20, 'Director must not exceed 20 characters'),\r\n    });\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { errors }\r\n    } = useForm<DirectorModel>({\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n    const onClickNext = () => {\r\n        setSelectedTabIndex(1);\r\n        switchTab(1);\r\n        //switchTab(1);\r\n        //handleFormSubmit(data);\r\n        //console.log(JSON.stringify(data, null, 2));\r\n    };\r\n    const onSubmit = (data: DirectorModel) => {\r\n        console.log(data);\r\n        setSelectedTabIndex(1);\r\n        switchTab(1);\r\n        //handleFormSubmit(data);\r\n        //console.log(JSON.stringify(data, null, 2));\r\n    };\r\n    const handleFormSubmit = (director: DirectorModel) => {\r\n        setLoading(true);\r\n        let _url = 'director/AddDirector';\r\n        if (director.DirectorID != undefined) {\r\n            _url = 'director/EditDirector';\r\n        }\r\n        post(_url, director).then(\r\n            (response: any) => {\r\n                // history.push(\"/profile\");\r\n                if (response.data.status == 'success') {\r\n                    setMessage('Director Successfully Saved!');\r\n                    setopenSuccessAlert(true);\r\n                    handleClose();\r\n                    rerenderTable();\r\n                }\r\n            },\r\n            (error: any) => {\r\n                const resMessage =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setLoading(false);\r\n                setMessage(resMessage);\r\n            }\r\n        ); \r\n    };\r\n\r\n    const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n        setSelectedTabIndex(newValue);\r\n    };\r\n    const handleChangeIndex = (index: number) => {\r\n        setSelectedTabIndex(index);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button sx={{ margin: 1 }} variant=\"contained\" color=\"primary\" onClick={handleOpen}>Open modal</Button>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={style}>\r\n                    <Container maxWidth=\"md\">\r\n                        <div className=\"register-form\">\r\n                            {/*   <form onSubmit={handleSubmit(onSubmit)} noValidate>*/}\r\n                            <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justifyContent=\"center\"\r\n                                alignItems=\"stretch\"\r\n                                spacing={1}\r\n                            >\r\n                                <Grid item xs={12}>\r\n                                    <Card>\r\n                                        <CardHeader title=\"Enter Company Type Detail\" />\r\n                                        <Divider />\r\n                                        <AppBar position=\"static\">\r\n                                            <Tabs\r\n                                                value={selectedTabIndex}\r\n                                                onChange={handleTabChange}\r\n                                                indicatorColor=\"secondary\"\r\n                                                textColor=\"inherit\"\r\n                                                variant=\"fullWidth\"\r\n                                                aria-label=\"full width tabs example\"\r\n                                            >\r\n                                                <Tab label=\"Details\" {...switchTab(0)} />\r\n                                                <Tab label=\"Uploads\" {...switchTab(1)} />\r\n                                            </Tabs>\r\n                                        </AppBar>\r\n                                        <Divider />\r\n                                        <CardContent>\r\n                                            <Box\r\n                                                component=\"div\"\r\n                                                sx={{\r\n                                                    '& .MuiTextField-root': { my: 1, width: '25ch' },\r\n                                                }}\r\n                                            >\r\n                                                <form onSubmit={handleSubmit(onSubmit)} noValidate >\r\n                                                    <Grid\r\n                                                        container\r\n                                                        direction=\"row\"\r\n                                                        justifyContent=\"center\"\r\n                                                        alignItems=\"stretch\"\r\n                                                        spacing={1}\r\n                                                    >\r\n                                                        <Grid item xs={4}>\r\n                                                            <div>\r\n                                                                <TextField\r\n                                                                    style={{ width: '100%' }}\r\n                                                                    required\r\n                                                                    id=\"outlined-required\"\r\n                                                                    label=\"DirectorName\"\r\n                                                                    {...register('DirectorName')}\r\n                                                                    className={`form-control ${errors.DirectorName ? 'is-invalid' : ''}`}\r\n                                                                />\r\n                                                                <Autocomplete\r\n                                                                    disablePortal style={{ width: '100%' }}\r\n                                                                    id=\"drpDirectorType\"\r\n                                                                    options={directorTypes}\r\n                                                                    getOptionLabel={directorTypes => directorTypes.DirectorTypeName}\r\n                                                                    renderInput={(params) => <TextField style={{ width: '100%' }} {...params} label=\"Director Type\" />}\r\n                                                                />\r\n                                                                <Autocomplete\r\n                                                                    disablePortal style={{ width: '100%' }}\r\n                                                                    id=\"drpDesignation\"\r\n                                                                    options={designations}\r\n                                                                    getOptionLabel={designations => designations.DesignationName}\r\n                                                                    renderInput={(params) => <TextField style={{ width: '100%' }} {...params} label=\"Designation\" />}\r\n                                                                />\r\n                                                                <Autocomplete\r\n                                                                    disablePortal style={{ width: '100%' }}\r\n                                                                    id=\"drpNationality\"\r\n                                                                    options={nationalities}\r\n                                                                    getOptionLabel={nationalities => nationalities.NationalityName}\r\n                                                                    renderInput={(params) => <TextField style={{ width: '100%' }} {...params} label=\"Nationality\" />}\r\n                                                                />\r\n                                                                <TextField\r\n                                                                    style={{ width: '100%' }}\r\n                                                                    required\r\n                                                                    id=\"outlined-required\"\r\n                                                                    label=\"CompanyName\"\r\n                                                                    {...register('CompanyName')}\r\n                                                                    className={`form-control ${errors.CompanyName ? 'is-invalid' : ''}`}\r\n                                                                />\r\n                                                            </div>\r\n                                                        </Grid>\r\n                                                        <Grid item xs={4}>\r\n                                                            <div>\r\n                                                                <TextField\r\n                                                                    style={{ width: '100%' }}\r\n                                                                    required\r\n                                                                    id=\"outlined-required\"\r\n                                                                    label=\"CompanyNumber\"\r\n                                                                    {...register('CompanyNumber')}\r\n                                                                    className={`form-control ${errors.CompanyNumber ? 'is-invalid' : ''}`}\r\n                                                                />\r\n                                                                <Autocomplete\r\n                                                                    disablePortal style={{ width: '100%' }}\r\n                                                                    id=\"drpPlaceOfBirth\"\r\n                                                                    options={placeOfBirths}\r\n                                                                    getOptionLabel={placeOfBirths => placeOfBirths.PlaceOfBirthName}\r\n                                                                    renderInput={(params) => <TextField style={{ width: '100%' }} {...params} label=\"Place of Birth\" />}\r\n                                                                />\r\n                                                                <TextField\r\n                                                                    style={{ width: '100%' }} type=\"text\"\r\n                                                                    required\r\n                                                                    id=\"outlined-required\"\r\n                                                                    label=\"DOB\"\r\n                                                                    {...register('DOB')}\r\n                                                                    className={`form-control ${errors.DOB ? 'is-invalid' : ''}`}\r\n                                                                />\r\n                                                            </div>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n\r\n                                                    <Button style={{ display: selectedTabIndex == 1 ? 'none' : undefined }} type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"primary\"> Next</Button>\r\n                                                </form>\r\n                                                <SwipeableViews\r\n                                                    axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                                                    index={selectedTabIndex}\r\n                                                    onChangeIndex={handleChangeIndex}\r\n                                                >\r\n                                                    <TabPanel value={selectedTabIndex} index={0} dir={theme.direction}>\r\n\r\n                                                    </TabPanel>\r\n                                                    <TabPanel value={selectedTabIndex} index={1} dir={theme.direction}>\r\n\r\n                                                    </TabPanel>\r\n                                                </SwipeableViews>\r\n                                            </Box>\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <Button style={{ display: selectedTabIndex == 1 ? 'none' : undefined }} type=\"submit\" sx={{ margin: 1 }} variant=\"contained\" color=\"primary\"> Next</Button>\r\n\r\n                                    <Button type=\"button\"\r\n                                        onClick={() => resetForm()} sx={{ margin: 1 }} variant=\"contained\" color=\"secondary\">\r\n                                        Reset\r\n                                    </Button>\r\n\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            {/*</form>*/}\r\n                        </div>\r\n                    </Container>\r\n                </Box>\r\n            </Modal>\r\n\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DirectorForm;\r\n"]},"metadata":{},"sourceType":"module"}