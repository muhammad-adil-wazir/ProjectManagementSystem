{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\LFMS\\\\LFMS.WebUI\\\\src\\\\content\\\\pages\\\\Components\\\\Users\\\\UserTable.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { Divider, Card, useTheme } from '@mui/material';\nimport { post } from \"../../../../services/common.service\";\nimport DataTable from '../DataTables'; //import BulkActions from './BulkActions';\n//interface RecentOrdersTableProps {\n//  className?: string;\n//  cryptoOrders: User[];\n//}\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n//const getStatusLabel = (cryptoOrderStatus: UserStatus): JSX.Element => {\n//  const map = {\n//    failed: {\n//      text: 'Failed',\n//      color: 'error'\n//    },\n//    completed: {\n//      text: 'Completed',\n//      color: 'success'\n//    },\n//    pending: {\n//      text: 'Pending',\n//      color: 'warning'\n//    }\n//  };\n//  const { text, color }: any = map[cryptoOrderStatus];\n//  return <Label color={color}>{text}</Label>;\n//};\n//const applyFilters = (\n//  cryptoOrders: IUser[],\n//  filters: Filters\n//): IUser[] => {\n//  return cryptoOrders.filter((cryptoOrder) => {\n//    let matches = true;\n//    if (filters.status && cryptoOrder.status !== filters.status) {\n//      matches = false;\n//    }\n//    return matches;\n//  });\n//};\nconst applyPagination = (users, page, limit) => {\n  return users.slice(page * limit, page * limit + limit);\n};\n\nconst UsersTable = () => {\n  _s();\n\n  var [users, setUsers] = useState([]);\n  var [order, setOrder] = useState({\n    orderBy: '',\n    orderDirection: 'asc'\n  });\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const selectedBulkActions = selectedUsers.length > 0;\n  const [page, setPage] = useState(0);\n  const [limit, setLimit] = useState(5);\n  const [filters, setFilters] = useState({\n    UserName: undefined,\n    PersonName: undefined,\n    RoleName: undefined\n  });\n  const statusOptions = [{\n    id: 'all',\n    name: 'All'\n  }, {\n    id: 'completed',\n    name: 'Completed'\n  }, {\n    id: 'pending',\n    name: 'Pending'\n  }, {\n    id: 'failed',\n    name: 'Failed'\n  }];\n\n  const handleStatusChange = (event, child) => {\n    let value = null;\n\n    if (event.target.value !== 'all') {\n      value = event.target.value;\n    }\n\n    setFilters(prevFilters => ({ ...prevFilters,\n      UserName: value,\n      PersonName: value,\n      RoleName: value\n    }));\n  };\n\n  const handleSelectAllUsers = event => {\n    setSelectedUsers(event.target.checked ? users === null || users === void 0 ? void 0 : users.map(user => user.UserID) : []);\n  };\n\n  const handleSelectOneUser = (event, UserID) => {\n    if (!selectedUsers.includes(UserID)) {\n      setSelectedUsers(prevSelected => [...prevSelected, UserID]);\n    } else {\n      setSelectedUsers(prevSelected => prevSelected.filter(id => id !== UserID));\n    }\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n    getFilteredUsers();\n  };\n\n  const handleLimitChange = event => {\n    setLimit(parseInt(event.target.value));\n  }; //const handleSort = (columnName: string): import(\"react\").MouseEventHandler<HTMLSpanElement> | undefined {\n  //    setOrder({ orderBy: columnName, orderDirection : 'asc' });\n  //}\n\n\n  const handleSort = property => event => {\n    //onRequestSort(event, property);\n    setOrder({\n      orderBy: property,\n      orderDirection: 'asc'\n    });\n    getFilteredUsers();\n  }; //const handleSort = (event: React.MouseEvent<unknown>, property: string) => {\n  //    const isAsc = orderBy === property && order === 'asc';\n  //    setOrder(isAsc ? 'desc' : 'asc');\n  //    setOrderBy(property);\n  //};\n  //const filteredUsers = getFilteredUsers( filters);\n  //const paginatedUsers = applyPagination(\n  //  filteredUsers,\n  //  page,\n  //  limit\n  //);\n\n\n  const selectedSomeUsers = selectedUsers.length > 0 && selectedUsers.length < users.length;\n  const selectedAllUsers = selectedUsers.length === users.length;\n  const theme = useTheme();\n\n  const getFilteredUsers = () => {\n    let _requestParamters = {\n      filter: filters,\n      length: limit,\n      start: page * limit,\n      order: order\n    };\n    post('user/GetUsers', _requestParamters).then(response => {\n      if (response.status == 200) {\n        setUsers(response.data.data);\n      }\n    }, error => {\n      const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    });\n  }; //getFilteredUsers();\n\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      cryptoOrders: []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this);\n}; //UsersTable.propTypes = {\n//  cryptoOrders: PropTypes.array.isRequired\n//};\n//UsersTable.defaultProps = {\n//  cryptoOrders: []\n//};\n\n\n_s(UsersTable, \"bKN6ibR+s46eC7YeDfuF5+zC9MA=\", false, function () {\n  return [useTheme];\n});\n\n_c = UsersTable;\nexport default UsersTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"UsersTable\");","map":{"version":3,"sources":["E:/Projects/LFMS/LFMS.WebUI/src/content/pages/Components/Users/UserTable.tsx"],"names":["useState","Divider","Card","useTheme","post","DataTable","applyPagination","users","page","limit","slice","UsersTable","setUsers","order","setOrder","orderBy","orderDirection","selectedUsers","setSelectedUsers","selectedBulkActions","length","setPage","setLimit","filters","setFilters","UserName","undefined","PersonName","RoleName","statusOptions","id","name","handleStatusChange","event","child","value","target","prevFilters","handleSelectAllUsers","checked","map","user","UserID","handleSelectOneUser","includes","prevSelected","filter","handlePageChange","newPage","getFilteredUsers","handleLimitChange","parseInt","handleSort","property","selectedSomeUsers","selectedAllUsers","theme","_requestParamters","start","then","response","status","data","error","resMessage","message","toString"],"mappings":"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","sourcesContent":["import { FC, ChangeEvent, useState, ReactNode } from 'react';\r\nimport { format } from 'date-fns';\r\nimport numeral from 'numeral';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    TableSortLabel, SortDirection,\r\n  Tooltip,\r\n  Divider,\r\n  Box,\r\n  FormControl,\r\n  InputLabel,\r\n  Card,\r\n  Checkbox,\r\n  IconButton,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  TableContainer,\r\n  Select,\r\n  MenuItem,\r\n  Typography,\r\n  useTheme,\r\n  CardHeader,\r\n  SelectChangeEvent\r\n} from '@mui/material';\r\n\r\nimport { DataTableRequest, DataTableResponse, Order } from '../../../../models/table.type';\r\nimport { post } from \"../../../../services/common.service\";\r\nimport { IUser } from '../../../../models/user'\r\nimport Label from '../../../../components/Label';\r\nimport EditTwoToneIcon from '@mui/icons-material/EditTwoTone';\r\nimport DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\nimport { visuallyHidden } from '@mui/utils';\r\nimport DataTable from '../DataTables';\r\n//import BulkActions from './BulkActions';\r\n\r\n//interface RecentOrdersTableProps {\r\n//  className?: string;\r\n//  cryptoOrders: User[];\r\n//}\r\n\r\ninterface Filters {\r\n    UserName?: string;\r\n    PersonName?: string;\r\n    RoleName?: string;\r\n}\r\n\r\n//const getStatusLabel = (cryptoOrderStatus: UserStatus): JSX.Element => {\r\n//  const map = {\r\n//    failed: {\r\n//      text: 'Failed',\r\n//      color: 'error'\r\n//    },\r\n//    completed: {\r\n//      text: 'Completed',\r\n//      color: 'success'\r\n//    },\r\n//    pending: {\r\n//      text: 'Pending',\r\n//      color: 'warning'\r\n//    }\r\n//  };\r\n\r\n//  const { text, color }: any = map[cryptoOrderStatus];\r\n\r\n//  return <Label color={color}>{text}</Label>;\r\n//};\r\n\r\n//const applyFilters = (\r\n//  cryptoOrders: IUser[],\r\n//  filters: Filters\r\n//): IUser[] => {\r\n//  return cryptoOrders.filter((cryptoOrder) => {\r\n//    let matches = true;\r\n\r\n//    if (filters.status && cryptoOrder.status !== filters.status) {\r\n//      matches = false;\r\n//    }\r\n\r\n//    return matches;\r\n//  });\r\n//};\r\n\r\nconst applyPagination = (\r\n  users: IUser[],\r\n  page: number,\r\n  limit: number\r\n): IUser[] => {\r\n  return users.slice(page * limit, page * limit + limit);\r\n};\r\n\r\nconst UsersTable: FC = () => {\r\n    \r\n    var [users, setUsers] = useState<IUser[]>(\r\n        []\r\n    );\r\n    var [order, setOrder] = useState<Order>(\r\n        { orderBy: '', orderDirection:'asc' }\r\n    );\r\n    const [selectedUsers, setSelectedUsers] = useState<number[]>(\r\n    []\r\n  );\r\n  const selectedBulkActions = selectedUsers.length > 0;\r\n  const [page, setPage] = useState<number>(0);\r\n  const [limit, setLimit] = useState<number>(5);\r\n    const [filters, setFilters] = useState<Filters>({\r\n        UserName: undefined,\r\n        PersonName: undefined,\r\n        RoleName: undefined\r\n  });\r\n\r\n  const statusOptions = [\r\n    {\r\n      id: 'all',\r\n      name: 'All'\r\n    },\r\n    {\r\n      id: 'completed',\r\n      name: 'Completed'\r\n    },\r\n    {\r\n      id: 'pending',\r\n      name: 'Pending'\r\n    },\r\n    {\r\n      id: 'failed',\r\n      name: 'Failed'\r\n    }\r\n  ];\r\n\r\n    const handleStatusChange = (event: SelectChangeEvent<string>, child: ReactNode): void => {\r\n    let value:any = null;\r\n\r\n    if (event.target.value !== 'all') {\r\n      value = event.target.value;\r\n    }\r\n\r\n    setFilters((prevFilters) => ({\r\n        ...prevFilters,\r\n        UserName: value,\r\n        PersonName: value,\r\n        RoleName: value\r\n    }));\r\n  };\r\n\r\n  const handleSelectAllUsers = (\r\n    event: ChangeEvent<HTMLInputElement>\r\n  ): void => {\r\n    setSelectedUsers(\r\n        event.target.checked\r\n            ? users?.map((user: IUser) => user.UserID)\r\n        : []\r\n    );\r\n  };\r\n\r\n  const handleSelectOneUser = (\r\n      event: ChangeEvent<HTMLInputElement>,\r\n      UserID: number\r\n  ): void => {\r\n      if (!selectedUsers.includes(UserID)) {\r\n      setSelectedUsers((prevSelected) => [\r\n        ...prevSelected,\r\n        UserID\r\n      ]);\r\n    } else {\r\n      setSelectedUsers((prevSelected) =>\r\n          prevSelected.filter((id) => id !== UserID)\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlePageChange = (event: any, newPage: number): void => {\r\n      setPage(newPage);\r\n      getFilteredUsers();\r\n  };\r\n\r\n    const handleLimitChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n\r\n    setLimit(parseInt(event.target.value));\r\n    };\r\n    //const handleSort = (columnName: string): import(\"react\").MouseEventHandler<HTMLSpanElement> | undefined {\r\n    //    setOrder({ orderBy: columnName, orderDirection : 'asc' });\r\n    //}\r\n    const handleSort = (property: string) => (event: React.MouseEvent<unknown>) => {\r\n        //onRequestSort(event, property);\r\n        \r\n        setOrder({ orderBy: property, orderDirection: 'asc' });\r\n        getFilteredUsers();\r\n    };\r\n    //const handleSort = (event: React.MouseEvent<unknown>, property: string) => {\r\n    //    const isAsc = orderBy === property && order === 'asc';\r\n    //    setOrder(isAsc ? 'desc' : 'asc');\r\n    //    setOrderBy(property);\r\n    //};\r\n\r\n    \r\n  //const filteredUsers = getFilteredUsers( filters);\r\n  //const paginatedUsers = applyPagination(\r\n  //  filteredUsers,\r\n  //  page,\r\n  //  limit\r\n  //);\r\n  const selectedSomeUsers =\r\n    selectedUsers.length > 0 &&\r\n    selectedUsers.length < users.length;\r\n  const selectedAllUsers =\r\n    selectedUsers.length === users.length;\r\n  const theme = useTheme();\r\n    const getFilteredUsers = () => {\r\n        let _requestParamters: DataTableRequest = {\r\n            filter: filters,\r\n            length: limit,\r\n            start: page * limit,\r\n            order: order\r\n        };\r\n        post('user/GetUsers', _requestParamters).then(\r\n            (response: any) => {\r\n                if (response.status == 200) {\r\n                    setUsers(response.data.data);\r\n\r\n                }\r\n            },\r\n            (error: any) => {\r\n                const resMessage =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n            }\r\n        );\r\n    };\r\n    //getFilteredUsers();\r\n  return (\r\n    <Card>\r\n      {/*{selectedBulkActions && (*/}\r\n      {/*  <Box flex={1} p={2}>*/}\r\n      {/*   */}{/* <BulkActions />*/}\r\n      {/*  </Box>*/}\r\n      {/*)}*/}\r\n      {/*{!selectedBulkActions && (*/}\r\n      {/*  <CardHeader*/}\r\n      {/*    action={*/}\r\n      {/*      <Box width={150}>*/}\r\n      {/*        <FormControl fullWidth variant=\"outlined\">*/}\r\n      {/*          <InputLabel>Status</InputLabel>*/}\r\n      {/*          <Select*/}\r\n      {/*            value={filters.status || 'all'}*/}\r\n      {/*            onChange={handleStatusChange}*/}\r\n      {/*            label=\"Status\"*/}\r\n      {/*            autoWidth*/}\r\n      {/*          >*/}\r\n      {/*            {statusOptions?.map((statusOption) => (*/}\r\n      {/*              <MenuItem key={statusOption.id} value={statusOption.id}>*/}\r\n      {/*                {statusOption.name}*/}\r\n      {/*              </MenuItem>*/}\r\n      {/*            ))}*/}\r\n      {/*          </Select>*/}\r\n      {/*        </FormControl>*/}\r\n      {/*      </Box>*/}\r\n      {/*    }*/}\r\n      {/*    title=\"Recent Orders\"*/}\r\n      {/*  />*/}\r\n      {/*)}*/}\r\n      <Divider />\r\n          <DataTable cryptoOrders={[] } />\r\n      </Card>\r\n\r\n  );\r\n};\r\n\r\n//UsersTable.propTypes = {\r\n//  cryptoOrders: PropTypes.array.isRequired\r\n//};\r\n\r\n//UsersTable.defaultProps = {\r\n//  cryptoOrders: []\r\n//};\r\n\r\nexport default UsersTable;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}